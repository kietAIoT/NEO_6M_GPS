
VL53L0X_Test1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006110  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000260  08006220  08006220  00016220  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006480  08006480  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  08006480  08006480  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006480  08006480  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006480  08006480  00016480  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006484  08006484  00016484  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08006488  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000054c  20000068  080064f0  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005b4  080064f0  000205b4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020091  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000bec9  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000020f8  00000000  00000000  0002bf9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b70  00000000  00000000  0002e098  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000008e4  00000000  00000000  0002ec08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001868b  00000000  00000000  0002f4ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000eab7  00000000  00000000  00047b77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00087c5f  00000000  00000000  0005662e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003ca8  00000000  00000000  000de290  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  000e1f38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000068 	.word	0x20000068
 800012c:	00000000 	.word	0x00000000
 8000130:	08006208 	.word	0x08006208

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000006c 	.word	0x2000006c
 800014c:	08006208 	.word	0x08006208

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__gedf2>:
 80004c8:	f04f 3cff 	mov.w	ip, #4294967295
 80004cc:	e006      	b.n	80004dc <__cmpdf2+0x4>
 80004ce:	bf00      	nop

080004d0 <__ledf2>:
 80004d0:	f04f 0c01 	mov.w	ip, #1
 80004d4:	e002      	b.n	80004dc <__cmpdf2+0x4>
 80004d6:	bf00      	nop

080004d8 <__cmpdf2>:
 80004d8:	f04f 0c01 	mov.w	ip, #1
 80004dc:	f84d cd04 	str.w	ip, [sp, #-4]!
 80004e0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80004e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80004e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80004ec:	bf18      	it	ne
 80004ee:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80004f2:	d01b      	beq.n	800052c <__cmpdf2+0x54>
 80004f4:	b001      	add	sp, #4
 80004f6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80004fa:	bf0c      	ite	eq
 80004fc:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000500:	ea91 0f03 	teqne	r1, r3
 8000504:	bf02      	ittt	eq
 8000506:	ea90 0f02 	teqeq	r0, r2
 800050a:	2000      	moveq	r0, #0
 800050c:	4770      	bxeq	lr
 800050e:	f110 0f00 	cmn.w	r0, #0
 8000512:	ea91 0f03 	teq	r1, r3
 8000516:	bf58      	it	pl
 8000518:	4299      	cmppl	r1, r3
 800051a:	bf08      	it	eq
 800051c:	4290      	cmpeq	r0, r2
 800051e:	bf2c      	ite	cs
 8000520:	17d8      	asrcs	r0, r3, #31
 8000522:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000526:	f040 0001 	orr.w	r0, r0, #1
 800052a:	4770      	bx	lr
 800052c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000530:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000534:	d102      	bne.n	800053c <__cmpdf2+0x64>
 8000536:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800053a:	d107      	bne.n	800054c <__cmpdf2+0x74>
 800053c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000540:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000544:	d1d6      	bne.n	80004f4 <__cmpdf2+0x1c>
 8000546:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800054a:	d0d3      	beq.n	80004f4 <__cmpdf2+0x1c>
 800054c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop

08000554 <__aeabi_cdrcmple>:
 8000554:	4684      	mov	ip, r0
 8000556:	4610      	mov	r0, r2
 8000558:	4662      	mov	r2, ip
 800055a:	468c      	mov	ip, r1
 800055c:	4619      	mov	r1, r3
 800055e:	4663      	mov	r3, ip
 8000560:	e000      	b.n	8000564 <__aeabi_cdcmpeq>
 8000562:	bf00      	nop

08000564 <__aeabi_cdcmpeq>:
 8000564:	b501      	push	{r0, lr}
 8000566:	f7ff ffb7 	bl	80004d8 <__cmpdf2>
 800056a:	2800      	cmp	r0, #0
 800056c:	bf48      	it	mi
 800056e:	f110 0f00 	cmnmi.w	r0, #0
 8000572:	bd01      	pop	{r0, pc}

08000574 <__aeabi_dcmpeq>:
 8000574:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000578:	f7ff fff4 	bl	8000564 <__aeabi_cdcmpeq>
 800057c:	bf0c      	ite	eq
 800057e:	2001      	moveq	r0, #1
 8000580:	2000      	movne	r0, #0
 8000582:	f85d fb08 	ldr.w	pc, [sp], #8
 8000586:	bf00      	nop

08000588 <__aeabi_dcmplt>:
 8000588:	f84d ed08 	str.w	lr, [sp, #-8]!
 800058c:	f7ff ffea 	bl	8000564 <__aeabi_cdcmpeq>
 8000590:	bf34      	ite	cc
 8000592:	2001      	movcc	r0, #1
 8000594:	2000      	movcs	r0, #0
 8000596:	f85d fb08 	ldr.w	pc, [sp], #8
 800059a:	bf00      	nop

0800059c <__aeabi_dcmple>:
 800059c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005a0:	f7ff ffe0 	bl	8000564 <__aeabi_cdcmpeq>
 80005a4:	bf94      	ite	ls
 80005a6:	2001      	movls	r0, #1
 80005a8:	2000      	movhi	r0, #0
 80005aa:	f85d fb08 	ldr.w	pc, [sp], #8
 80005ae:	bf00      	nop

080005b0 <__aeabi_dcmpge>:
 80005b0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005b4:	f7ff ffce 	bl	8000554 <__aeabi_cdrcmple>
 80005b8:	bf94      	ite	ls
 80005ba:	2001      	movls	r0, #1
 80005bc:	2000      	movhi	r0, #0
 80005be:	f85d fb08 	ldr.w	pc, [sp], #8
 80005c2:	bf00      	nop

080005c4 <__aeabi_dcmpgt>:
 80005c4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005c8:	f7ff ffc4 	bl	8000554 <__aeabi_cdrcmple>
 80005cc:	bf34      	ite	cc
 80005ce:	2001      	movcc	r0, #1
 80005d0:	2000      	movcs	r0, #0
 80005d2:	f85d fb08 	ldr.w	pc, [sp], #8
 80005d6:	bf00      	nop

080005d8 <__aeabi_d2uiz>:
 80005d8:	004a      	lsls	r2, r1, #1
 80005da:	d211      	bcs.n	8000600 <__aeabi_d2uiz+0x28>
 80005dc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80005e0:	d211      	bcs.n	8000606 <__aeabi_d2uiz+0x2e>
 80005e2:	d50d      	bpl.n	8000600 <__aeabi_d2uiz+0x28>
 80005e4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80005e8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80005ec:	d40e      	bmi.n	800060c <__aeabi_d2uiz+0x34>
 80005ee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80005f2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80005f6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80005fa:	fa23 f002 	lsr.w	r0, r3, r2
 80005fe:	4770      	bx	lr
 8000600:	f04f 0000 	mov.w	r0, #0
 8000604:	4770      	bx	lr
 8000606:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800060a:	d102      	bne.n	8000612 <__aeabi_d2uiz+0x3a>
 800060c:	f04f 30ff 	mov.w	r0, #4294967295
 8000610:	4770      	bx	lr
 8000612:	f04f 0000 	mov.w	r0, #0
 8000616:	4770      	bx	lr

08000618 <__aeabi_fmul>:
 8000618:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000620:	bf1e      	ittt	ne
 8000622:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000626:	ea92 0f0c 	teqne	r2, ip
 800062a:	ea93 0f0c 	teqne	r3, ip
 800062e:	d06f      	beq.n	8000710 <__aeabi_fmul+0xf8>
 8000630:	441a      	add	r2, r3
 8000632:	ea80 0c01 	eor.w	ip, r0, r1
 8000636:	0240      	lsls	r0, r0, #9
 8000638:	bf18      	it	ne
 800063a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800063e:	d01e      	beq.n	800067e <__aeabi_fmul+0x66>
 8000640:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000644:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000648:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800064c:	fba0 3101 	umull	r3, r1, r0, r1
 8000650:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000654:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000658:	bf3e      	ittt	cc
 800065a:	0049      	lslcc	r1, r1, #1
 800065c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000660:	005b      	lslcc	r3, r3, #1
 8000662:	ea40 0001 	orr.w	r0, r0, r1
 8000666:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 800066a:	2afd      	cmp	r2, #253	; 0xfd
 800066c:	d81d      	bhi.n	80006aa <__aeabi_fmul+0x92>
 800066e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000672:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000676:	bf08      	it	eq
 8000678:	f020 0001 	biceq.w	r0, r0, #1
 800067c:	4770      	bx	lr
 800067e:	f090 0f00 	teq	r0, #0
 8000682:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000686:	bf08      	it	eq
 8000688:	0249      	lsleq	r1, r1, #9
 800068a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 800068e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000692:	3a7f      	subs	r2, #127	; 0x7f
 8000694:	bfc2      	ittt	gt
 8000696:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800069a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800069e:	4770      	bxgt	lr
 80006a0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80006a4:	f04f 0300 	mov.w	r3, #0
 80006a8:	3a01      	subs	r2, #1
 80006aa:	dc5d      	bgt.n	8000768 <__aeabi_fmul+0x150>
 80006ac:	f112 0f19 	cmn.w	r2, #25
 80006b0:	bfdc      	itt	le
 80006b2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80006b6:	4770      	bxle	lr
 80006b8:	f1c2 0200 	rsb	r2, r2, #0
 80006bc:	0041      	lsls	r1, r0, #1
 80006be:	fa21 f102 	lsr.w	r1, r1, r2
 80006c2:	f1c2 0220 	rsb	r2, r2, #32
 80006c6:	fa00 fc02 	lsl.w	ip, r0, r2
 80006ca:	ea5f 0031 	movs.w	r0, r1, rrx
 80006ce:	f140 0000 	adc.w	r0, r0, #0
 80006d2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80006d6:	bf08      	it	eq
 80006d8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80006dc:	4770      	bx	lr
 80006de:	f092 0f00 	teq	r2, #0
 80006e2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80006e6:	bf02      	ittt	eq
 80006e8:	0040      	lsleq	r0, r0, #1
 80006ea:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80006ee:	3a01      	subeq	r2, #1
 80006f0:	d0f9      	beq.n	80006e6 <__aeabi_fmul+0xce>
 80006f2:	ea40 000c 	orr.w	r0, r0, ip
 80006f6:	f093 0f00 	teq	r3, #0
 80006fa:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80006fe:	bf02      	ittt	eq
 8000700:	0049      	lsleq	r1, r1, #1
 8000702:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000706:	3b01      	subeq	r3, #1
 8000708:	d0f9      	beq.n	80006fe <__aeabi_fmul+0xe6>
 800070a:	ea41 010c 	orr.w	r1, r1, ip
 800070e:	e78f      	b.n	8000630 <__aeabi_fmul+0x18>
 8000710:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000714:	ea92 0f0c 	teq	r2, ip
 8000718:	bf18      	it	ne
 800071a:	ea93 0f0c 	teqne	r3, ip
 800071e:	d00a      	beq.n	8000736 <__aeabi_fmul+0x11e>
 8000720:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000724:	bf18      	it	ne
 8000726:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800072a:	d1d8      	bne.n	80006de <__aeabi_fmul+0xc6>
 800072c:	ea80 0001 	eor.w	r0, r0, r1
 8000730:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000734:	4770      	bx	lr
 8000736:	f090 0f00 	teq	r0, #0
 800073a:	bf17      	itett	ne
 800073c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000740:	4608      	moveq	r0, r1
 8000742:	f091 0f00 	teqne	r1, #0
 8000746:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800074a:	d014      	beq.n	8000776 <__aeabi_fmul+0x15e>
 800074c:	ea92 0f0c 	teq	r2, ip
 8000750:	d101      	bne.n	8000756 <__aeabi_fmul+0x13e>
 8000752:	0242      	lsls	r2, r0, #9
 8000754:	d10f      	bne.n	8000776 <__aeabi_fmul+0x15e>
 8000756:	ea93 0f0c 	teq	r3, ip
 800075a:	d103      	bne.n	8000764 <__aeabi_fmul+0x14c>
 800075c:	024b      	lsls	r3, r1, #9
 800075e:	bf18      	it	ne
 8000760:	4608      	movne	r0, r1
 8000762:	d108      	bne.n	8000776 <__aeabi_fmul+0x15e>
 8000764:	ea80 0001 	eor.w	r0, r0, r1
 8000768:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800076c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000770:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000774:	4770      	bx	lr
 8000776:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800077a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 800077e:	4770      	bx	lr

08000780 <__aeabi_fdiv>:
 8000780:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000784:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000788:	bf1e      	ittt	ne
 800078a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800078e:	ea92 0f0c 	teqne	r2, ip
 8000792:	ea93 0f0c 	teqne	r3, ip
 8000796:	d069      	beq.n	800086c <__aeabi_fdiv+0xec>
 8000798:	eba2 0203 	sub.w	r2, r2, r3
 800079c:	ea80 0c01 	eor.w	ip, r0, r1
 80007a0:	0249      	lsls	r1, r1, #9
 80007a2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80007a6:	d037      	beq.n	8000818 <__aeabi_fdiv+0x98>
 80007a8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80007ac:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80007b0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80007b4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80007b8:	428b      	cmp	r3, r1
 80007ba:	bf38      	it	cc
 80007bc:	005b      	lslcc	r3, r3, #1
 80007be:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 80007c2:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 80007c6:	428b      	cmp	r3, r1
 80007c8:	bf24      	itt	cs
 80007ca:	1a5b      	subcs	r3, r3, r1
 80007cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80007d4:	bf24      	itt	cs
 80007d6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80007da:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007de:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80007e2:	bf24      	itt	cs
 80007e4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80007e8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007ec:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80007f0:	bf24      	itt	cs
 80007f2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80007f6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007fa:	011b      	lsls	r3, r3, #4
 80007fc:	bf18      	it	ne
 80007fe:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000802:	d1e0      	bne.n	80007c6 <__aeabi_fdiv+0x46>
 8000804:	2afd      	cmp	r2, #253	; 0xfd
 8000806:	f63f af50 	bhi.w	80006aa <__aeabi_fmul+0x92>
 800080a:	428b      	cmp	r3, r1
 800080c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000810:	bf08      	it	eq
 8000812:	f020 0001 	biceq.w	r0, r0, #1
 8000816:	4770      	bx	lr
 8000818:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800081c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000820:	327f      	adds	r2, #127	; 0x7f
 8000822:	bfc2      	ittt	gt
 8000824:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000828:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800082c:	4770      	bxgt	lr
 800082e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000832:	f04f 0300 	mov.w	r3, #0
 8000836:	3a01      	subs	r2, #1
 8000838:	e737      	b.n	80006aa <__aeabi_fmul+0x92>
 800083a:	f092 0f00 	teq	r2, #0
 800083e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000842:	bf02      	ittt	eq
 8000844:	0040      	lsleq	r0, r0, #1
 8000846:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800084a:	3a01      	subeq	r2, #1
 800084c:	d0f9      	beq.n	8000842 <__aeabi_fdiv+0xc2>
 800084e:	ea40 000c 	orr.w	r0, r0, ip
 8000852:	f093 0f00 	teq	r3, #0
 8000856:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800085a:	bf02      	ittt	eq
 800085c:	0049      	lsleq	r1, r1, #1
 800085e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000862:	3b01      	subeq	r3, #1
 8000864:	d0f9      	beq.n	800085a <__aeabi_fdiv+0xda>
 8000866:	ea41 010c 	orr.w	r1, r1, ip
 800086a:	e795      	b.n	8000798 <__aeabi_fdiv+0x18>
 800086c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000870:	ea92 0f0c 	teq	r2, ip
 8000874:	d108      	bne.n	8000888 <__aeabi_fdiv+0x108>
 8000876:	0242      	lsls	r2, r0, #9
 8000878:	f47f af7d 	bne.w	8000776 <__aeabi_fmul+0x15e>
 800087c:	ea93 0f0c 	teq	r3, ip
 8000880:	f47f af70 	bne.w	8000764 <__aeabi_fmul+0x14c>
 8000884:	4608      	mov	r0, r1
 8000886:	e776      	b.n	8000776 <__aeabi_fmul+0x15e>
 8000888:	ea93 0f0c 	teq	r3, ip
 800088c:	d104      	bne.n	8000898 <__aeabi_fdiv+0x118>
 800088e:	024b      	lsls	r3, r1, #9
 8000890:	f43f af4c 	beq.w	800072c <__aeabi_fmul+0x114>
 8000894:	4608      	mov	r0, r1
 8000896:	e76e      	b.n	8000776 <__aeabi_fmul+0x15e>
 8000898:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800089c:	bf18      	it	ne
 800089e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80008a2:	d1ca      	bne.n	800083a <__aeabi_fdiv+0xba>
 80008a4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80008a8:	f47f af5c 	bne.w	8000764 <__aeabi_fmul+0x14c>
 80008ac:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80008b0:	f47f af3c 	bne.w	800072c <__aeabi_fmul+0x114>
 80008b4:	e75f      	b.n	8000776 <__aeabi_fmul+0x15e>
 80008b6:	bf00      	nop

080008b8 <__gesf2>:
 80008b8:	f04f 3cff 	mov.w	ip, #4294967295
 80008bc:	e006      	b.n	80008cc <__cmpsf2+0x4>
 80008be:	bf00      	nop

080008c0 <__lesf2>:
 80008c0:	f04f 0c01 	mov.w	ip, #1
 80008c4:	e002      	b.n	80008cc <__cmpsf2+0x4>
 80008c6:	bf00      	nop

080008c8 <__cmpsf2>:
 80008c8:	f04f 0c01 	mov.w	ip, #1
 80008cc:	f84d cd04 	str.w	ip, [sp, #-4]!
 80008d0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80008d4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80008d8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80008dc:	bf18      	it	ne
 80008de:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80008e2:	d011      	beq.n	8000908 <__cmpsf2+0x40>
 80008e4:	b001      	add	sp, #4
 80008e6:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80008ea:	bf18      	it	ne
 80008ec:	ea90 0f01 	teqne	r0, r1
 80008f0:	bf58      	it	pl
 80008f2:	ebb2 0003 	subspl.w	r0, r2, r3
 80008f6:	bf88      	it	hi
 80008f8:	17c8      	asrhi	r0, r1, #31
 80008fa:	bf38      	it	cc
 80008fc:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000900:	bf18      	it	ne
 8000902:	f040 0001 	orrne.w	r0, r0, #1
 8000906:	4770      	bx	lr
 8000908:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800090c:	d102      	bne.n	8000914 <__cmpsf2+0x4c>
 800090e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000912:	d105      	bne.n	8000920 <__cmpsf2+0x58>
 8000914:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000918:	d1e4      	bne.n	80008e4 <__cmpsf2+0x1c>
 800091a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800091e:	d0e1      	beq.n	80008e4 <__cmpsf2+0x1c>
 8000920:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000924:	4770      	bx	lr
 8000926:	bf00      	nop

08000928 <__aeabi_cfrcmple>:
 8000928:	4684      	mov	ip, r0
 800092a:	4608      	mov	r0, r1
 800092c:	4661      	mov	r1, ip
 800092e:	e7ff      	b.n	8000930 <__aeabi_cfcmpeq>

08000930 <__aeabi_cfcmpeq>:
 8000930:	b50f      	push	{r0, r1, r2, r3, lr}
 8000932:	f7ff ffc9 	bl	80008c8 <__cmpsf2>
 8000936:	2800      	cmp	r0, #0
 8000938:	bf48      	it	mi
 800093a:	f110 0f00 	cmnmi.w	r0, #0
 800093e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000940 <__aeabi_fcmpeq>:
 8000940:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000944:	f7ff fff4 	bl	8000930 <__aeabi_cfcmpeq>
 8000948:	bf0c      	ite	eq
 800094a:	2001      	moveq	r0, #1
 800094c:	2000      	movne	r0, #0
 800094e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000952:	bf00      	nop

08000954 <__aeabi_fcmplt>:
 8000954:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000958:	f7ff ffea 	bl	8000930 <__aeabi_cfcmpeq>
 800095c:	bf34      	ite	cc
 800095e:	2001      	movcc	r0, #1
 8000960:	2000      	movcs	r0, #0
 8000962:	f85d fb08 	ldr.w	pc, [sp], #8
 8000966:	bf00      	nop

08000968 <__aeabi_fcmple>:
 8000968:	f84d ed08 	str.w	lr, [sp, #-8]!
 800096c:	f7ff ffe0 	bl	8000930 <__aeabi_cfcmpeq>
 8000970:	bf94      	ite	ls
 8000972:	2001      	movls	r0, #1
 8000974:	2000      	movhi	r0, #0
 8000976:	f85d fb08 	ldr.w	pc, [sp], #8
 800097a:	bf00      	nop

0800097c <__aeabi_fcmpge>:
 800097c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000980:	f7ff ffd2 	bl	8000928 <__aeabi_cfrcmple>
 8000984:	bf94      	ite	ls
 8000986:	2001      	movls	r0, #1
 8000988:	2000      	movhi	r0, #0
 800098a:	f85d fb08 	ldr.w	pc, [sp], #8
 800098e:	bf00      	nop

08000990 <__aeabi_fcmpgt>:
 8000990:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000994:	f7ff ffc8 	bl	8000928 <__aeabi_cfrcmple>
 8000998:	bf34      	ite	cc
 800099a:	2001      	movcc	r0, #1
 800099c:	2000      	movcs	r0, #0
 800099e:	f85d fb08 	ldr.w	pc, [sp], #8
 80009a2:	bf00      	nop

080009a4 <__aeabi_f2uiz>:
 80009a4:	0042      	lsls	r2, r0, #1
 80009a6:	d20e      	bcs.n	80009c6 <__aeabi_f2uiz+0x22>
 80009a8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80009ac:	d30b      	bcc.n	80009c6 <__aeabi_f2uiz+0x22>
 80009ae:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80009b2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80009b6:	d409      	bmi.n	80009cc <__aeabi_f2uiz+0x28>
 80009b8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80009bc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009c0:	fa23 f002 	lsr.w	r0, r3, r2
 80009c4:	4770      	bx	lr
 80009c6:	f04f 0000 	mov.w	r0, #0
 80009ca:	4770      	bx	lr
 80009cc:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80009d0:	d101      	bne.n	80009d6 <__aeabi_f2uiz+0x32>
 80009d2:	0242      	lsls	r2, r0, #9
 80009d4:	d102      	bne.n	80009dc <__aeabi_f2uiz+0x38>
 80009d6:	f04f 30ff 	mov.w	r0, #4294967295
 80009da:	4770      	bx	lr
 80009dc:	f04f 0000 	mov.w	r0, #0
 80009e0:	4770      	bx	lr
 80009e2:	bf00      	nop

080009e4 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80009e4:	b480      	push	{r7}
 80009e6:	b083      	sub	sp, #12
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80009ec:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80009f0:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80009f4:	f003 0301 	and.w	r3, r3, #1
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d013      	beq.n	8000a24 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80009fc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000a00:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000a04:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d00b      	beq.n	8000a24 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000a0c:	e000      	b.n	8000a10 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000a0e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000a10:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d0f9      	beq.n	8000a0e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000a1a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000a1e:	687a      	ldr	r2, [r7, #4]
 8000a20:	b2d2      	uxtb	r2, r2
 8000a22:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000a24:	687b      	ldr	r3, [r7, #4]
}
 8000a26:	4618      	mov	r0, r3
 8000a28:	370c      	adds	r7, #12
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bc80      	pop	{r7}
 8000a2e:	4770      	bx	lr

08000a30 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b086      	sub	sp, #24
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	60f8      	str	r0, [r7, #12]
 8000a38:	60b9      	str	r1, [r7, #8]
 8000a3a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	617b      	str	r3, [r7, #20]
 8000a40:	e009      	b.n	8000a56 <_write+0x26>
	{
//		__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8000a42:	68bb      	ldr	r3, [r7, #8]
 8000a44:	1c5a      	adds	r2, r3, #1
 8000a46:	60ba      	str	r2, [r7, #8]
 8000a48:	781b      	ldrb	r3, [r3, #0]
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f7ff ffca 	bl	80009e4 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a50:	697b      	ldr	r3, [r7, #20]
 8000a52:	3301      	adds	r3, #1
 8000a54:	617b      	str	r3, [r7, #20]
 8000a56:	697a      	ldr	r2, [r7, #20]
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	429a      	cmp	r2, r3
 8000a5c:	dbf1      	blt.n	8000a42 <_write+0x12>
	}
	return len;
 8000a5e:	687b      	ldr	r3, [r7, #4]
}
 8000a60:	4618      	mov	r0, r3
 8000a62:	3718      	adds	r7, #24
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}

08000a68 <HAL_UART_RxCpltCallback>:

uint8_t uartBuffer[500] = "";

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b082      	sub	sp, #8
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
//	printf("Data receive \n%s\n -----", uartBuffer);
	HAL_UART_Receive_DMA(&huart1, uartBuffer, sizeof(uartBuffer)-1);
 8000a70:	f240 12f3 	movw	r2, #499	; 0x1f3
 8000a74:	4903      	ldr	r1, [pc, #12]	; (8000a84 <HAL_UART_RxCpltCallback+0x1c>)
 8000a76:	4804      	ldr	r0, [pc, #16]	; (8000a88 <HAL_UART_RxCpltCallback+0x20>)
 8000a78:	f002 feee 	bl	8003858 <HAL_UART_Receive_DMA>
}
 8000a7c:	bf00      	nop
 8000a7e:	3708      	adds	r7, #8
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	20000204 	.word	0x20000204
 8000a88:	20000178 	.word	0x20000178

08000a8c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b09c      	sub	sp, #112	; 0x70
 8000a90:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a92:	f000 fd09 	bl	80014a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a96:	f000 f88b 	bl	8000bb0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a9a:	f000 f945 	bl	8000d28 <MX_GPIO_Init>
  MX_DMA_Init();
 8000a9e:	f000 f925 	bl	8000cec <MX_DMA_Init>
  MX_I2C1_Init();
 8000aa2:	f000 f8cb 	bl	8000c3c <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000aa6:	f000 f8f7 	bl	8000c98 <MX_USART1_UART_Init>


  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_DMA(&huart1, uartBuffer, sizeof(uartBuffer));
 8000aaa:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000aae:	4937      	ldr	r1, [pc, #220]	; (8000b8c <main+0x100>)
 8000ab0:	4837      	ldr	r0, [pc, #220]	; (8000b90 <main+0x104>)
 8000ab2:	f002 fed1 	bl	8003858 <HAL_UART_Receive_DMA>
  initVL53L0X(1, &hi2c1);
 8000ab6:	4937      	ldr	r1, [pc, #220]	; (8000b94 <main+0x108>)
 8000ab8:	2001      	movs	r0, #1
 8000aba:	f003 fac3 	bl	8004044 <initVL53L0X>
  setSignalRateLimit(200);
 8000abe:	4836      	ldr	r0, [pc, #216]	; (8000b98 <main+0x10c>)
 8000ac0:	f003 fd1e 	bl	8004500 <setSignalRateLimit>
  setVcselPulsePeriod(VcselPeriodPreRange, 10);
 8000ac4:	210a      	movs	r1, #10
 8000ac6:	2000      	movs	r0, #0
 8000ac8:	f003 fe48 	bl	800475c <setVcselPulsePeriod>
  setVcselPulsePeriod(VcselPeriodFinalRange, 14);
 8000acc:	210e      	movs	r1, #14
 8000ace:	2001      	movs	r0, #1
 8000ad0:	f003 fe44 	bl	800475c <setVcselPulsePeriod>
  setMeasurementTimingBudget(300 * 1000UL);
 8000ad4:	4831      	ldr	r0, [pc, #196]	; (8000b9c <main+0x110>)
 8000ad6:	f003 fd47 	bl	8004568 <setMeasurementTimingBudget>
  uint16_t distance;
  char data[100]="$";
 8000ada:	2324      	movs	r3, #36	; 0x24
 8000adc:	607b      	str	r3, [r7, #4]
 8000ade:	f107 0308 	add.w	r3, r7, #8
 8000ae2:	2260      	movs	r2, #96	; 0x60
 8000ae4:	2100      	movs	r1, #0
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	f004 fda8 	bl	800563c <memset>
  GPS_NEO_NMEA_Init();
 8000aec:	f000 fb62 	bl	80011b4 <GPS_NEO_NMEA_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  char *token;
	  token = strtok(uartBuffer, "$");
 8000af0:	492b      	ldr	r1, [pc, #172]	; (8000ba0 <main+0x114>)
 8000af2:	4826      	ldr	r0, [pc, #152]	; (8000b8c <main+0x100>)
 8000af4:	f004 fdbe 	bl	8005674 <strtok>
 8000af8:	66f8      	str	r0, [r7, #108]	; 0x6c
	  while (token!=NULL) {
 8000afa:	e01a      	b.n	8000b32 <main+0xa6>
		  token = strtok(NULL,"$");
 8000afc:	4928      	ldr	r1, [pc, #160]	; (8000ba0 <main+0x114>)
 8000afe:	2000      	movs	r0, #0
 8000b00:	f004 fdb8 	bl	8005674 <strtok>
 8000b04:	66f8      	str	r0, [r7, #108]	; 0x6c
		  if (token[2]=='G' && token[3]=='G' && token[4]=='A') {
 8000b06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000b08:	3302      	adds	r3, #2
 8000b0a:	781b      	ldrb	r3, [r3, #0]
 8000b0c:	2b47      	cmp	r3, #71	; 0x47
 8000b0e:	d110      	bne.n	8000b32 <main+0xa6>
 8000b10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000b12:	3303      	adds	r3, #3
 8000b14:	781b      	ldrb	r3, [r3, #0]
 8000b16:	2b47      	cmp	r3, #71	; 0x47
 8000b18:	d10b      	bne.n	8000b32 <main+0xa6>
 8000b1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000b1c:	3304      	adds	r3, #4
 8000b1e:	781b      	ldrb	r3, [r3, #0]
 8000b20:	2b41      	cmp	r3, #65	; 0x41
 8000b22:	d106      	bne.n	8000b32 <main+0xa6>
			  strcpy(data+1,token);
 8000b24:	1d3b      	adds	r3, r7, #4
 8000b26:	3301      	adds	r3, #1
 8000b28:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	f004 fe80 	bl	8005830 <strcpy>
			  break;
 8000b30:	e002      	b.n	8000b38 <main+0xac>
	  while (token!=NULL) {
 8000b32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d1e1      	bne.n	8000afc <main+0x70>
		  }
	  }
	  printf("TOKEN1: %s\n",data);
 8000b38:	1d3b      	adds	r3, r7, #4
 8000b3a:	4619      	mov	r1, r3
 8000b3c:	4819      	ldr	r0, [pc, #100]	; (8000ba4 <main+0x118>)
 8000b3e:	f004 fc37 	bl	80053b0 <iprintf>
	  TypeStatusDecode_t a;
	  a = GPS.Decode(data, sizeof(data));
 8000b42:	4b19      	ldr	r3, [pc, #100]	; (8000ba8 <main+0x11c>)
 8000b44:	68db      	ldr	r3, [r3, #12]
 8000b46:	1d3a      	adds	r2, r7, #4
 8000b48:	2164      	movs	r1, #100	; 0x64
 8000b4a:	4610      	mov	r0, r2
 8000b4c:	4798      	blx	r3
 8000b4e:	4603      	mov	r3, r0
 8000b50:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 8000b54:	2201      	movs	r2, #1
 8000b56:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b5a:	4814      	ldr	r0, [pc, #80]	; (8000bac <main+0x120>)
 8000b5c:	f001 f9aa 	bl	8001eb4 <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 8000b60:	2064      	movs	r0, #100	; 0x64
 8000b62:	f000 fd03 	bl	800156c <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 8000b66:	2200      	movs	r2, #0
 8000b68:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b6c:	480f      	ldr	r0, [pc, #60]	; (8000bac <main+0x120>)
 8000b6e:	f001 f9a1 	bl	8001eb4 <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 8000b72:	2064      	movs	r0, #100	; 0x64
 8000b74:	f000 fcfa 	bl	800156c <HAL_Delay>
	  distance = readRangeSingleMillimeters(&distance);
 8000b78:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	f003 ffd3 	bl	8004b28 <readRangeSingleMillimeters>
 8000b82:	4603      	mov	r3, r0
 8000b84:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
  {
 8000b88:	e7b2      	b.n	8000af0 <main+0x64>
 8000b8a:	bf00      	nop
 8000b8c:	20000204 	.word	0x20000204
 8000b90:	20000178 	.word	0x20000178
 8000b94:	20000124 	.word	0x20000124
 8000b98:	43480000 	.word	0x43480000
 8000b9c:	000493e0 	.word	0x000493e0
 8000ba0:	08006220 	.word	0x08006220
 8000ba4:	08006224 	.word	0x08006224
 8000ba8:	20000084 	.word	0x20000084
 8000bac:	40010c00 	.word	0x40010c00

08000bb0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b090      	sub	sp, #64	; 0x40
 8000bb4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bb6:	f107 0318 	add.w	r3, r7, #24
 8000bba:	2228      	movs	r2, #40	; 0x28
 8000bbc:	2100      	movs	r1, #0
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	f004 fd3c 	bl	800563c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bc4:	1d3b      	adds	r3, r7, #4
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	601a      	str	r2, [r3, #0]
 8000bca:	605a      	str	r2, [r3, #4]
 8000bcc:	609a      	str	r2, [r3, #8]
 8000bce:	60da      	str	r2, [r3, #12]
 8000bd0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000bd6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000bda:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000be0:	2301      	movs	r3, #1
 8000be2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000be4:	2302      	movs	r3, #2
 8000be6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000be8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000bec:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000bee:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000bf2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bf4:	f107 0318 	add.w	r3, r7, #24
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	f002 f9cd 	bl	8002f98 <HAL_RCC_OscConfig>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d001      	beq.n	8000c08 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000c04:	f000 f8e8 	bl	8000dd8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c08:	230f      	movs	r3, #15
 8000c0a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c0c:	2302      	movs	r3, #2
 8000c0e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c10:	2300      	movs	r3, #0
 8000c12:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c14:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c18:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c1e:	1d3b      	adds	r3, r7, #4
 8000c20:	2102      	movs	r1, #2
 8000c22:	4618      	mov	r0, r3
 8000c24:	f002 fc3a 	bl	800349c <HAL_RCC_ClockConfig>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d001      	beq.n	8000c32 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000c2e:	f000 f8d3 	bl	8000dd8 <Error_Handler>
  }
}
 8000c32:	bf00      	nop
 8000c34:	3740      	adds	r7, #64	; 0x40
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
	...

08000c3c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000c40:	4b12      	ldr	r3, [pc, #72]	; (8000c8c <MX_I2C1_Init+0x50>)
 8000c42:	4a13      	ldr	r2, [pc, #76]	; (8000c90 <MX_I2C1_Init+0x54>)
 8000c44:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000c46:	4b11      	ldr	r3, [pc, #68]	; (8000c8c <MX_I2C1_Init+0x50>)
 8000c48:	4a12      	ldr	r2, [pc, #72]	; (8000c94 <MX_I2C1_Init+0x58>)
 8000c4a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000c4c:	4b0f      	ldr	r3, [pc, #60]	; (8000c8c <MX_I2C1_Init+0x50>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000c52:	4b0e      	ldr	r3, [pc, #56]	; (8000c8c <MX_I2C1_Init+0x50>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c58:	4b0c      	ldr	r3, [pc, #48]	; (8000c8c <MX_I2C1_Init+0x50>)
 8000c5a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c5e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c60:	4b0a      	ldr	r3, [pc, #40]	; (8000c8c <MX_I2C1_Init+0x50>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000c66:	4b09      	ldr	r3, [pc, #36]	; (8000c8c <MX_I2C1_Init+0x50>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c6c:	4b07      	ldr	r3, [pc, #28]	; (8000c8c <MX_I2C1_Init+0x50>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c72:	4b06      	ldr	r3, [pc, #24]	; (8000c8c <MX_I2C1_Init+0x50>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c78:	4804      	ldr	r0, [pc, #16]	; (8000c8c <MX_I2C1_Init+0x50>)
 8000c7a:	f001 f933 	bl	8001ee4 <HAL_I2C_Init>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d001      	beq.n	8000c88 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000c84:	f000 f8a8 	bl	8000dd8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000c88:	bf00      	nop
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	20000124 	.word	0x20000124
 8000c90:	40005400 	.word	0x40005400
 8000c94:	000186a0 	.word	0x000186a0

08000c98 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000c9c:	4b11      	ldr	r3, [pc, #68]	; (8000ce4 <MX_USART1_UART_Init+0x4c>)
 8000c9e:	4a12      	ldr	r2, [pc, #72]	; (8000ce8 <MX_USART1_UART_Init+0x50>)
 8000ca0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000ca2:	4b10      	ldr	r3, [pc, #64]	; (8000ce4 <MX_USART1_UART_Init+0x4c>)
 8000ca4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000ca8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000caa:	4b0e      	ldr	r3, [pc, #56]	; (8000ce4 <MX_USART1_UART_Init+0x4c>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000cb0:	4b0c      	ldr	r3, [pc, #48]	; (8000ce4 <MX_USART1_UART_Init+0x4c>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000cb6:	4b0b      	ldr	r3, [pc, #44]	; (8000ce4 <MX_USART1_UART_Init+0x4c>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000cbc:	4b09      	ldr	r3, [pc, #36]	; (8000ce4 <MX_USART1_UART_Init+0x4c>)
 8000cbe:	220c      	movs	r2, #12
 8000cc0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cc2:	4b08      	ldr	r3, [pc, #32]	; (8000ce4 <MX_USART1_UART_Init+0x4c>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cc8:	4b06      	ldr	r3, [pc, #24]	; (8000ce4 <MX_USART1_UART_Init+0x4c>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000cce:	4805      	ldr	r0, [pc, #20]	; (8000ce4 <MX_USART1_UART_Init+0x4c>)
 8000cd0:	f002 fd72 	bl	80037b8 <HAL_UART_Init>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d001      	beq.n	8000cde <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000cda:	f000 f87d 	bl	8000dd8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000cde:	bf00      	nop
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	20000178 	.word	0x20000178
 8000ce8:	40013800 	.word	0x40013800

08000cec <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b082      	sub	sp, #8
 8000cf0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000cf2:	4b0c      	ldr	r3, [pc, #48]	; (8000d24 <MX_DMA_Init+0x38>)
 8000cf4:	695b      	ldr	r3, [r3, #20]
 8000cf6:	4a0b      	ldr	r2, [pc, #44]	; (8000d24 <MX_DMA_Init+0x38>)
 8000cf8:	f043 0301 	orr.w	r3, r3, #1
 8000cfc:	6153      	str	r3, [r2, #20]
 8000cfe:	4b09      	ldr	r3, [pc, #36]	; (8000d24 <MX_DMA_Init+0x38>)
 8000d00:	695b      	ldr	r3, [r3, #20]
 8000d02:	f003 0301 	and.w	r3, r3, #1
 8000d06:	607b      	str	r3, [r7, #4]
 8000d08:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2100      	movs	r1, #0
 8000d0e:	200f      	movs	r0, #15
 8000d10:	f000 fd27 	bl	8001762 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000d14:	200f      	movs	r0, #15
 8000d16:	f000 fd40 	bl	800179a <HAL_NVIC_EnableIRQ>

}
 8000d1a:	bf00      	nop
 8000d1c:	3708      	adds	r7, #8
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	40021000 	.word	0x40021000

08000d28 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b088      	sub	sp, #32
 8000d2c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d2e:	f107 0310 	add.w	r3, r7, #16
 8000d32:	2200      	movs	r2, #0
 8000d34:	601a      	str	r2, [r3, #0]
 8000d36:	605a      	str	r2, [r3, #4]
 8000d38:	609a      	str	r2, [r3, #8]
 8000d3a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d3c:	4b24      	ldr	r3, [pc, #144]	; (8000dd0 <MX_GPIO_Init+0xa8>)
 8000d3e:	699b      	ldr	r3, [r3, #24]
 8000d40:	4a23      	ldr	r2, [pc, #140]	; (8000dd0 <MX_GPIO_Init+0xa8>)
 8000d42:	f043 0310 	orr.w	r3, r3, #16
 8000d46:	6193      	str	r3, [r2, #24]
 8000d48:	4b21      	ldr	r3, [pc, #132]	; (8000dd0 <MX_GPIO_Init+0xa8>)
 8000d4a:	699b      	ldr	r3, [r3, #24]
 8000d4c:	f003 0310 	and.w	r3, r3, #16
 8000d50:	60fb      	str	r3, [r7, #12]
 8000d52:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d54:	4b1e      	ldr	r3, [pc, #120]	; (8000dd0 <MX_GPIO_Init+0xa8>)
 8000d56:	699b      	ldr	r3, [r3, #24]
 8000d58:	4a1d      	ldr	r2, [pc, #116]	; (8000dd0 <MX_GPIO_Init+0xa8>)
 8000d5a:	f043 0320 	orr.w	r3, r3, #32
 8000d5e:	6193      	str	r3, [r2, #24]
 8000d60:	4b1b      	ldr	r3, [pc, #108]	; (8000dd0 <MX_GPIO_Init+0xa8>)
 8000d62:	699b      	ldr	r3, [r3, #24]
 8000d64:	f003 0320 	and.w	r3, r3, #32
 8000d68:	60bb      	str	r3, [r7, #8]
 8000d6a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d6c:	4b18      	ldr	r3, [pc, #96]	; (8000dd0 <MX_GPIO_Init+0xa8>)
 8000d6e:	699b      	ldr	r3, [r3, #24]
 8000d70:	4a17      	ldr	r2, [pc, #92]	; (8000dd0 <MX_GPIO_Init+0xa8>)
 8000d72:	f043 0304 	orr.w	r3, r3, #4
 8000d76:	6193      	str	r3, [r2, #24]
 8000d78:	4b15      	ldr	r3, [pc, #84]	; (8000dd0 <MX_GPIO_Init+0xa8>)
 8000d7a:	699b      	ldr	r3, [r3, #24]
 8000d7c:	f003 0304 	and.w	r3, r3, #4
 8000d80:	607b      	str	r3, [r7, #4]
 8000d82:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d84:	4b12      	ldr	r3, [pc, #72]	; (8000dd0 <MX_GPIO_Init+0xa8>)
 8000d86:	699b      	ldr	r3, [r3, #24]
 8000d88:	4a11      	ldr	r2, [pc, #68]	; (8000dd0 <MX_GPIO_Init+0xa8>)
 8000d8a:	f043 0308 	orr.w	r3, r3, #8
 8000d8e:	6193      	str	r3, [r2, #24]
 8000d90:	4b0f      	ldr	r3, [pc, #60]	; (8000dd0 <MX_GPIO_Init+0xa8>)
 8000d92:	699b      	ldr	r3, [r3, #24]
 8000d94:	f003 0308 	and.w	r3, r3, #8
 8000d98:	603b      	str	r3, [r7, #0]
 8000d9a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000da2:	480c      	ldr	r0, [pc, #48]	; (8000dd4 <MX_GPIO_Init+0xac>)
 8000da4:	f001 f886 	bl	8001eb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8000da8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000dac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dae:	2301      	movs	r3, #1
 8000db0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db2:	2300      	movs	r3, #0
 8000db4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db6:	2302      	movs	r3, #2
 8000db8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8000dba:	f107 0310 	add.w	r3, r7, #16
 8000dbe:	4619      	mov	r1, r3
 8000dc0:	4804      	ldr	r0, [pc, #16]	; (8000dd4 <MX_GPIO_Init+0xac>)
 8000dc2:	f000 fef3 	bl	8001bac <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000dc6:	bf00      	nop
 8000dc8:	3720      	adds	r7, #32
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	40021000 	.word	0x40021000
 8000dd4:	40010c00 	.word	0x40010c00

08000dd8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ddc:	b672      	cpsid	i
}
 8000dde:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000de0:	e7fe      	b.n	8000de0 <Error_Handler+0x8>
	...

08000de4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	b085      	sub	sp, #20
 8000de8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000dea:	4b15      	ldr	r3, [pc, #84]	; (8000e40 <HAL_MspInit+0x5c>)
 8000dec:	699b      	ldr	r3, [r3, #24]
 8000dee:	4a14      	ldr	r2, [pc, #80]	; (8000e40 <HAL_MspInit+0x5c>)
 8000df0:	f043 0301 	orr.w	r3, r3, #1
 8000df4:	6193      	str	r3, [r2, #24]
 8000df6:	4b12      	ldr	r3, [pc, #72]	; (8000e40 <HAL_MspInit+0x5c>)
 8000df8:	699b      	ldr	r3, [r3, #24]
 8000dfa:	f003 0301 	and.w	r3, r3, #1
 8000dfe:	60bb      	str	r3, [r7, #8]
 8000e00:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e02:	4b0f      	ldr	r3, [pc, #60]	; (8000e40 <HAL_MspInit+0x5c>)
 8000e04:	69db      	ldr	r3, [r3, #28]
 8000e06:	4a0e      	ldr	r2, [pc, #56]	; (8000e40 <HAL_MspInit+0x5c>)
 8000e08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e0c:	61d3      	str	r3, [r2, #28]
 8000e0e:	4b0c      	ldr	r3, [pc, #48]	; (8000e40 <HAL_MspInit+0x5c>)
 8000e10:	69db      	ldr	r3, [r3, #28]
 8000e12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e16:	607b      	str	r3, [r7, #4]
 8000e18:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000e1a:	4b0a      	ldr	r3, [pc, #40]	; (8000e44 <HAL_MspInit+0x60>)
 8000e1c:	685b      	ldr	r3, [r3, #4]
 8000e1e:	60fb      	str	r3, [r7, #12]
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000e26:	60fb      	str	r3, [r7, #12]
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000e2e:	60fb      	str	r3, [r7, #12]
 8000e30:	4a04      	ldr	r2, [pc, #16]	; (8000e44 <HAL_MspInit+0x60>)
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e36:	bf00      	nop
 8000e38:	3714      	adds	r7, #20
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bc80      	pop	{r7}
 8000e3e:	4770      	bx	lr
 8000e40:	40021000 	.word	0x40021000
 8000e44:	40010000 	.word	0x40010000

08000e48 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b088      	sub	sp, #32
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e50:	f107 0310 	add.w	r3, r7, #16
 8000e54:	2200      	movs	r2, #0
 8000e56:	601a      	str	r2, [r3, #0]
 8000e58:	605a      	str	r2, [r3, #4]
 8000e5a:	609a      	str	r2, [r3, #8]
 8000e5c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	4a15      	ldr	r2, [pc, #84]	; (8000eb8 <HAL_I2C_MspInit+0x70>)
 8000e64:	4293      	cmp	r3, r2
 8000e66:	d123      	bne.n	8000eb0 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e68:	4b14      	ldr	r3, [pc, #80]	; (8000ebc <HAL_I2C_MspInit+0x74>)
 8000e6a:	699b      	ldr	r3, [r3, #24]
 8000e6c:	4a13      	ldr	r2, [pc, #76]	; (8000ebc <HAL_I2C_MspInit+0x74>)
 8000e6e:	f043 0308 	orr.w	r3, r3, #8
 8000e72:	6193      	str	r3, [r2, #24]
 8000e74:	4b11      	ldr	r3, [pc, #68]	; (8000ebc <HAL_I2C_MspInit+0x74>)
 8000e76:	699b      	ldr	r3, [r3, #24]
 8000e78:	f003 0308 	and.w	r3, r3, #8
 8000e7c:	60fb      	str	r3, [r7, #12]
 8000e7e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000e80:	23c0      	movs	r3, #192	; 0xc0
 8000e82:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e84:	2312      	movs	r3, #18
 8000e86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e88:	2303      	movs	r3, #3
 8000e8a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e8c:	f107 0310 	add.w	r3, r7, #16
 8000e90:	4619      	mov	r1, r3
 8000e92:	480b      	ldr	r0, [pc, #44]	; (8000ec0 <HAL_I2C_MspInit+0x78>)
 8000e94:	f000 fe8a 	bl	8001bac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e98:	4b08      	ldr	r3, [pc, #32]	; (8000ebc <HAL_I2C_MspInit+0x74>)
 8000e9a:	69db      	ldr	r3, [r3, #28]
 8000e9c:	4a07      	ldr	r2, [pc, #28]	; (8000ebc <HAL_I2C_MspInit+0x74>)
 8000e9e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ea2:	61d3      	str	r3, [r2, #28]
 8000ea4:	4b05      	ldr	r3, [pc, #20]	; (8000ebc <HAL_I2C_MspInit+0x74>)
 8000ea6:	69db      	ldr	r3, [r3, #28]
 8000ea8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000eac:	60bb      	str	r3, [r7, #8]
 8000eae:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000eb0:	bf00      	nop
 8000eb2:	3720      	adds	r7, #32
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	40005400 	.word	0x40005400
 8000ebc:	40021000 	.word	0x40021000
 8000ec0:	40010c00 	.word	0x40010c00

08000ec4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b088      	sub	sp, #32
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ecc:	f107 0310 	add.w	r3, r7, #16
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	601a      	str	r2, [r3, #0]
 8000ed4:	605a      	str	r2, [r3, #4]
 8000ed6:	609a      	str	r2, [r3, #8]
 8000ed8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	4a2f      	ldr	r2, [pc, #188]	; (8000f9c <HAL_UART_MspInit+0xd8>)
 8000ee0:	4293      	cmp	r3, r2
 8000ee2:	d157      	bne.n	8000f94 <HAL_UART_MspInit+0xd0>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000ee4:	4b2e      	ldr	r3, [pc, #184]	; (8000fa0 <HAL_UART_MspInit+0xdc>)
 8000ee6:	699b      	ldr	r3, [r3, #24]
 8000ee8:	4a2d      	ldr	r2, [pc, #180]	; (8000fa0 <HAL_UART_MspInit+0xdc>)
 8000eea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000eee:	6193      	str	r3, [r2, #24]
 8000ef0:	4b2b      	ldr	r3, [pc, #172]	; (8000fa0 <HAL_UART_MspInit+0xdc>)
 8000ef2:	699b      	ldr	r3, [r3, #24]
 8000ef4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ef8:	60fb      	str	r3, [r7, #12]
 8000efa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000efc:	4b28      	ldr	r3, [pc, #160]	; (8000fa0 <HAL_UART_MspInit+0xdc>)
 8000efe:	699b      	ldr	r3, [r3, #24]
 8000f00:	4a27      	ldr	r2, [pc, #156]	; (8000fa0 <HAL_UART_MspInit+0xdc>)
 8000f02:	f043 0304 	orr.w	r3, r3, #4
 8000f06:	6193      	str	r3, [r2, #24]
 8000f08:	4b25      	ldr	r3, [pc, #148]	; (8000fa0 <HAL_UART_MspInit+0xdc>)
 8000f0a:	699b      	ldr	r3, [r3, #24]
 8000f0c:	f003 0304 	and.w	r3, r3, #4
 8000f10:	60bb      	str	r3, [r7, #8]
 8000f12:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000f14:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f18:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f1a:	2302      	movs	r3, #2
 8000f1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f1e:	2303      	movs	r3, #3
 8000f20:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f22:	f107 0310 	add.w	r3, r7, #16
 8000f26:	4619      	mov	r1, r3
 8000f28:	481e      	ldr	r0, [pc, #120]	; (8000fa4 <HAL_UART_MspInit+0xe0>)
 8000f2a:	f000 fe3f 	bl	8001bac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000f2e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f32:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f34:	2300      	movs	r3, #0
 8000f36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f3c:	f107 0310 	add.w	r3, r7, #16
 8000f40:	4619      	mov	r1, r3
 8000f42:	4818      	ldr	r0, [pc, #96]	; (8000fa4 <HAL_UART_MspInit+0xe0>)
 8000f44:	f000 fe32 	bl	8001bac <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8000f48:	4b17      	ldr	r3, [pc, #92]	; (8000fa8 <HAL_UART_MspInit+0xe4>)
 8000f4a:	4a18      	ldr	r2, [pc, #96]	; (8000fac <HAL_UART_MspInit+0xe8>)
 8000f4c:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f4e:	4b16      	ldr	r3, [pc, #88]	; (8000fa8 <HAL_UART_MspInit+0xe4>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f54:	4b14      	ldr	r3, [pc, #80]	; (8000fa8 <HAL_UART_MspInit+0xe4>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000f5a:	4b13      	ldr	r3, [pc, #76]	; (8000fa8 <HAL_UART_MspInit+0xe4>)
 8000f5c:	2280      	movs	r2, #128	; 0x80
 8000f5e:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f60:	4b11      	ldr	r3, [pc, #68]	; (8000fa8 <HAL_UART_MspInit+0xe4>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f66:	4b10      	ldr	r3, [pc, #64]	; (8000fa8 <HAL_UART_MspInit+0xe4>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8000f6c:	4b0e      	ldr	r3, [pc, #56]	; (8000fa8 <HAL_UART_MspInit+0xe4>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000f72:	4b0d      	ldr	r3, [pc, #52]	; (8000fa8 <HAL_UART_MspInit+0xe4>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000f78:	480b      	ldr	r0, [pc, #44]	; (8000fa8 <HAL_UART_MspInit+0xe4>)
 8000f7a:	f000 fc29 	bl	80017d0 <HAL_DMA_Init>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d001      	beq.n	8000f88 <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 8000f84:	f7ff ff28 	bl	8000dd8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	4a07      	ldr	r2, [pc, #28]	; (8000fa8 <HAL_UART_MspInit+0xe4>)
 8000f8c:	63da      	str	r2, [r3, #60]	; 0x3c
 8000f8e:	4a06      	ldr	r2, [pc, #24]	; (8000fa8 <HAL_UART_MspInit+0xe4>)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000f94:	bf00      	nop
 8000f96:	3720      	adds	r7, #32
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	40013800 	.word	0x40013800
 8000fa0:	40021000 	.word	0x40021000
 8000fa4:	40010800 	.word	0x40010800
 8000fa8:	200001c0 	.word	0x200001c0
 8000fac:	40020058 	.word	0x40020058

08000fb0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fb4:	e7fe      	b.n	8000fb4 <NMI_Handler+0x4>

08000fb6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fb6:	b480      	push	{r7}
 8000fb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fba:	e7fe      	b.n	8000fba <HardFault_Handler+0x4>

08000fbc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fc0:	e7fe      	b.n	8000fc0 <MemManage_Handler+0x4>

08000fc2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fc2:	b480      	push	{r7}
 8000fc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fc6:	e7fe      	b.n	8000fc6 <BusFault_Handler+0x4>

08000fc8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fcc:	e7fe      	b.n	8000fcc <UsageFault_Handler+0x4>

08000fce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fce:	b480      	push	{r7}
 8000fd0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fd2:	bf00      	nop
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bc80      	pop	{r7}
 8000fd8:	4770      	bx	lr

08000fda <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fda:	b480      	push	{r7}
 8000fdc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fde:	bf00      	nop
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bc80      	pop	{r7}
 8000fe4:	4770      	bx	lr

08000fe6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fe6:	b480      	push	{r7}
 8000fe8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fea:	bf00      	nop
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bc80      	pop	{r7}
 8000ff0:	4770      	bx	lr

08000ff2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ff2:	b580      	push	{r7, lr}
 8000ff4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ff6:	f000 fa9d 	bl	8001534 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ffa:	bf00      	nop
 8000ffc:	bd80      	pop	{r7, pc}
	...

08001000 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001004:	4802      	ldr	r0, [pc, #8]	; (8001010 <DMA1_Channel5_IRQHandler+0x10>)
 8001006:	f000 fc9d 	bl	8001944 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800100a:	bf00      	nop
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	200001c0 	.word	0x200001c0

08001014 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
  return 1;
 8001018:	2301      	movs	r3, #1
}
 800101a:	4618      	mov	r0, r3
 800101c:	46bd      	mov	sp, r7
 800101e:	bc80      	pop	{r7}
 8001020:	4770      	bx	lr

08001022 <_kill>:

int _kill(int pid, int sig)
{
 8001022:	b580      	push	{r7, lr}
 8001024:	b082      	sub	sp, #8
 8001026:	af00      	add	r7, sp, #0
 8001028:	6078      	str	r0, [r7, #4]
 800102a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800102c:	f004 fbd4 	bl	80057d8 <__errno>
 8001030:	4603      	mov	r3, r0
 8001032:	2216      	movs	r2, #22
 8001034:	601a      	str	r2, [r3, #0]
  return -1;
 8001036:	f04f 33ff 	mov.w	r3, #4294967295
}
 800103a:	4618      	mov	r0, r3
 800103c:	3708      	adds	r7, #8
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}

08001042 <_exit>:

void _exit (int status)
{
 8001042:	b580      	push	{r7, lr}
 8001044:	b082      	sub	sp, #8
 8001046:	af00      	add	r7, sp, #0
 8001048:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800104a:	f04f 31ff 	mov.w	r1, #4294967295
 800104e:	6878      	ldr	r0, [r7, #4]
 8001050:	f7ff ffe7 	bl	8001022 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001054:	e7fe      	b.n	8001054 <_exit+0x12>

08001056 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001056:	b580      	push	{r7, lr}
 8001058:	b086      	sub	sp, #24
 800105a:	af00      	add	r7, sp, #0
 800105c:	60f8      	str	r0, [r7, #12]
 800105e:	60b9      	str	r1, [r7, #8]
 8001060:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001062:	2300      	movs	r3, #0
 8001064:	617b      	str	r3, [r7, #20]
 8001066:	e00a      	b.n	800107e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001068:	f3af 8000 	nop.w
 800106c:	4601      	mov	r1, r0
 800106e:	68bb      	ldr	r3, [r7, #8]
 8001070:	1c5a      	adds	r2, r3, #1
 8001072:	60ba      	str	r2, [r7, #8]
 8001074:	b2ca      	uxtb	r2, r1
 8001076:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001078:	697b      	ldr	r3, [r7, #20]
 800107a:	3301      	adds	r3, #1
 800107c:	617b      	str	r3, [r7, #20]
 800107e:	697a      	ldr	r2, [r7, #20]
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	429a      	cmp	r2, r3
 8001084:	dbf0      	blt.n	8001068 <_read+0x12>
  }

  return len;
 8001086:	687b      	ldr	r3, [r7, #4]
}
 8001088:	4618      	mov	r0, r3
 800108a:	3718      	adds	r7, #24
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}

08001090 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001090:	b480      	push	{r7}
 8001092:	b083      	sub	sp, #12
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001098:	f04f 33ff 	mov.w	r3, #4294967295
}
 800109c:	4618      	mov	r0, r3
 800109e:	370c      	adds	r7, #12
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bc80      	pop	{r7}
 80010a4:	4770      	bx	lr

080010a6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80010a6:	b480      	push	{r7}
 80010a8:	b083      	sub	sp, #12
 80010aa:	af00      	add	r7, sp, #0
 80010ac:	6078      	str	r0, [r7, #4]
 80010ae:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80010b6:	605a      	str	r2, [r3, #4]
  return 0;
 80010b8:	2300      	movs	r3, #0
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	370c      	adds	r7, #12
 80010be:	46bd      	mov	sp, r7
 80010c0:	bc80      	pop	{r7}
 80010c2:	4770      	bx	lr

080010c4 <_isatty>:

int _isatty(int file)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b083      	sub	sp, #12
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80010cc:	2301      	movs	r3, #1
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	370c      	adds	r7, #12
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bc80      	pop	{r7}
 80010d6:	4770      	bx	lr

080010d8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80010d8:	b480      	push	{r7}
 80010da:	b085      	sub	sp, #20
 80010dc:	af00      	add	r7, sp, #0
 80010de:	60f8      	str	r0, [r7, #12]
 80010e0:	60b9      	str	r1, [r7, #8]
 80010e2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80010e4:	2300      	movs	r3, #0
}
 80010e6:	4618      	mov	r0, r3
 80010e8:	3714      	adds	r7, #20
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bc80      	pop	{r7}
 80010ee:	4770      	bx	lr

080010f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b086      	sub	sp, #24
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010f8:	4a14      	ldr	r2, [pc, #80]	; (800114c <_sbrk+0x5c>)
 80010fa:	4b15      	ldr	r3, [pc, #84]	; (8001150 <_sbrk+0x60>)
 80010fc:	1ad3      	subs	r3, r2, r3
 80010fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001100:	697b      	ldr	r3, [r7, #20]
 8001102:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001104:	4b13      	ldr	r3, [pc, #76]	; (8001154 <_sbrk+0x64>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d102      	bne.n	8001112 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800110c:	4b11      	ldr	r3, [pc, #68]	; (8001154 <_sbrk+0x64>)
 800110e:	4a12      	ldr	r2, [pc, #72]	; (8001158 <_sbrk+0x68>)
 8001110:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001112:	4b10      	ldr	r3, [pc, #64]	; (8001154 <_sbrk+0x64>)
 8001114:	681a      	ldr	r2, [r3, #0]
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	4413      	add	r3, r2
 800111a:	693a      	ldr	r2, [r7, #16]
 800111c:	429a      	cmp	r2, r3
 800111e:	d207      	bcs.n	8001130 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001120:	f004 fb5a 	bl	80057d8 <__errno>
 8001124:	4603      	mov	r3, r0
 8001126:	220c      	movs	r2, #12
 8001128:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800112a:	f04f 33ff 	mov.w	r3, #4294967295
 800112e:	e009      	b.n	8001144 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001130:	4b08      	ldr	r3, [pc, #32]	; (8001154 <_sbrk+0x64>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001136:	4b07      	ldr	r3, [pc, #28]	; (8001154 <_sbrk+0x64>)
 8001138:	681a      	ldr	r2, [r3, #0]
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	4413      	add	r3, r2
 800113e:	4a05      	ldr	r2, [pc, #20]	; (8001154 <_sbrk+0x64>)
 8001140:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001142:	68fb      	ldr	r3, [r7, #12]
}
 8001144:	4618      	mov	r0, r3
 8001146:	3718      	adds	r7, #24
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}
 800114c:	20005000 	.word	0x20005000
 8001150:	00000400 	.word	0x00000400
 8001154:	200003f8 	.word	0x200003f8
 8001158:	200005b8 	.word	0x200005b8

0800115c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800115c:	b480      	push	{r7}
 800115e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001160:	bf00      	nop
 8001162:	46bd      	mov	sp, r7
 8001164:	bc80      	pop	{r7}
 8001166:	4770      	bx	lr

08001168 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001168:	f7ff fff8 	bl	800115c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800116c:	480b      	ldr	r0, [pc, #44]	; (800119c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800116e:	490c      	ldr	r1, [pc, #48]	; (80011a0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001170:	4a0c      	ldr	r2, [pc, #48]	; (80011a4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001172:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001174:	e002      	b.n	800117c <LoopCopyDataInit>

08001176 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001176:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001178:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800117a:	3304      	adds	r3, #4

0800117c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800117c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800117e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001180:	d3f9      	bcc.n	8001176 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001182:	4a09      	ldr	r2, [pc, #36]	; (80011a8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001184:	4c09      	ldr	r4, [pc, #36]	; (80011ac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001186:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001188:	e001      	b.n	800118e <LoopFillZerobss>

0800118a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800118a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800118c:	3204      	adds	r2, #4

0800118e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800118e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001190:	d3fb      	bcc.n	800118a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001192:	f004 fb27 	bl	80057e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001196:	f7ff fc79 	bl	8000a8c <main>
  bx lr
 800119a:	4770      	bx	lr
  ldr r0, =_sdata
 800119c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011a0:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80011a4:	08006488 	.word	0x08006488
  ldr r2, =_sbss
 80011a8:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80011ac:	200005b4 	.word	0x200005b4

080011b0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80011b0:	e7fe      	b.n	80011b0 <ADC1_2_IRQHandler>
	...

080011b4 <GPS_NEO_NMEA_Init>:


char GPGGA[100] = "$GPGGA,010244.00,1052.92019,N,10648.54956,E,1,05,3.24,33.9,M,-2.3,M,,*7F";


void GPS_NEO_NMEA_Init() {
 80011b4:	b480      	push	{r7}
 80011b6:	af00      	add	r7, sp, #0
    GPS.CalculateTime = GPS_NEO_NMEA_CalculateTime;
 80011b8:	4b0d      	ldr	r3, [pc, #52]	; (80011f0 <GPS_NEO_NMEA_Init+0x3c>)
 80011ba:	4a0e      	ldr	r2, [pc, #56]	; (80011f4 <GPS_NEO_NMEA_Init+0x40>)
 80011bc:	609a      	str	r2, [r3, #8]
    GPS.Decode = GPS_NEO_NMEA_Decode;
 80011be:	4b0c      	ldr	r3, [pc, #48]	; (80011f0 <GPS_NEO_NMEA_Init+0x3c>)
 80011c0:	4a0d      	ldr	r2, [pc, #52]	; (80011f8 <GPS_NEO_NMEA_Init+0x44>)
 80011c2:	60da      	str	r2, [r3, #12]
    GPS.localHour = 0;
 80011c4:	4b0a      	ldr	r3, [pc, #40]	; (80011f0 <GPS_NEO_NMEA_Init+0x3c>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	701a      	strb	r2, [r3, #0]
    GPS.localMinute = 0;
 80011ca:	4b09      	ldr	r3, [pc, #36]	; (80011f0 <GPS_NEO_NMEA_Init+0x3c>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	705a      	strb	r2, [r3, #1]
    GPS.localSecond = 0;
 80011d0:	4b07      	ldr	r3, [pc, #28]	; (80011f0 <GPS_NEO_NMEA_Init+0x3c>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	709a      	strb	r2, [r3, #2]

    GPS.GTMHour = 0;
 80011d6:	4b06      	ldr	r3, [pc, #24]	; (80011f0 <GPS_NEO_NMEA_Init+0x3c>)
 80011d8:	2200      	movs	r2, #0
 80011da:	70da      	strb	r2, [r3, #3]
    GPS.GTMMinute = 0;
 80011dc:	4b04      	ldr	r3, [pc, #16]	; (80011f0 <GPS_NEO_NMEA_Init+0x3c>)
 80011de:	2200      	movs	r2, #0
 80011e0:	711a      	strb	r2, [r3, #4]
    GPS.GTMSecond = 0;
 80011e2:	4b03      	ldr	r3, [pc, #12]	; (80011f0 <GPS_NEO_NMEA_Init+0x3c>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	715a      	strb	r2, [r3, #5]
}
 80011e8:	bf00      	nop
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bc80      	pop	{r7}
 80011ee:	4770      	bx	lr
 80011f0:	20000084 	.word	0x20000084
 80011f4:	080013b5 	.word	0x080013b5
 80011f8:	080011fd 	.word	0x080011fd

080011fc <GPS_NEO_NMEA_Decode>:

TypeStatusDecode_t GPS_NEO_NMEA_Decode(char *GPGGA_, uint8_t size) {
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b088      	sub	sp, #32
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
 8001204:	460b      	mov	r3, r1
 8001206:	70fb      	strb	r3, [r7, #3]
    strcpy(GPS.GPGGA, GPGGA_);
 8001208:	6879      	ldr	r1, [r7, #4]
 800120a:	4838      	ldr	r0, [pc, #224]	; (80012ec <GPS_NEO_NMEA_Decode+0xf0>)
 800120c:	f004 fb10 	bl	8005830 <strcpy>
    uint8_t _position = 0;
 8001210:	2300      	movs	r3, #0
 8001212:	77fb      	strb	r3, [r7, #31]
    char temp[15];
    uint8_t flag = 0;
 8001214:	2300      	movs	r3, #0
 8001216:	77bb      	strb	r3, [r7, #30]
    uint8_t temp_size = 0;
 8001218:	2300      	movs	r3, #0
 800121a:	777b      	strb	r3, [r7, #29]
    while (_position<size) {
 800121c:	e029      	b.n	8001272 <GPS_NEO_NMEA_Decode+0x76>
        if (GPS.GPGGA[_position] == ',') {
 800121e:	7ffb      	ldrb	r3, [r7, #31]
 8001220:	4a33      	ldr	r2, [pc, #204]	; (80012f0 <GPS_NEO_NMEA_Decode+0xf4>)
 8001222:	4413      	add	r3, r2
 8001224:	7c1b      	ldrb	r3, [r3, #16]
 8001226:	2b2c      	cmp	r3, #44	; 0x2c
 8001228:	d114      	bne.n	8001254 <GPS_NEO_NMEA_Decode+0x58>
            temp[temp_size] = '\0';
 800122a:	7f7b      	ldrb	r3, [r7, #29]
 800122c:	3320      	adds	r3, #32
 800122e:	443b      	add	r3, r7
 8001230:	2200      	movs	r2, #0
 8001232:	f803 2c14 	strb.w	r2, [r3, #-20]
            GPS_NEO_NMEA_GotoUpdate(temp, temp_size+1, flag);
 8001236:	7f7b      	ldrb	r3, [r7, #29]
 8001238:	3301      	adds	r3, #1
 800123a:	b2d9      	uxtb	r1, r3
 800123c:	7fba      	ldrb	r2, [r7, #30]
 800123e:	f107 030c 	add.w	r3, r7, #12
 8001242:	4618      	mov	r0, r3
 8001244:	f000 f860 	bl	8001308 <GPS_NEO_NMEA_GotoUpdate>
            temp_size = 0;
 8001248:	2300      	movs	r3, #0
 800124a:	777b      	strb	r3, [r7, #29]
            flag++;
 800124c:	7fbb      	ldrb	r3, [r7, #30]
 800124e:	3301      	adds	r3, #1
 8001250:	77bb      	strb	r3, [r7, #30]
 8001252:	e00b      	b.n	800126c <GPS_NEO_NMEA_Decode+0x70>
        } else {
            temp[temp_size] = GPS.GPGGA[_position];
 8001254:	7ffa      	ldrb	r2, [r7, #31]
 8001256:	7f7b      	ldrb	r3, [r7, #29]
 8001258:	4925      	ldr	r1, [pc, #148]	; (80012f0 <GPS_NEO_NMEA_Decode+0xf4>)
 800125a:	440a      	add	r2, r1
 800125c:	7c12      	ldrb	r2, [r2, #16]
 800125e:	3320      	adds	r3, #32
 8001260:	443b      	add	r3, r7
 8001262:	f803 2c14 	strb.w	r2, [r3, #-20]
            temp_size++;
 8001266:	7f7b      	ldrb	r3, [r7, #29]
 8001268:	3301      	adds	r3, #1
 800126a:	777b      	strb	r3, [r7, #29]
        }
        _position++;
 800126c:	7ffb      	ldrb	r3, [r7, #31]
 800126e:	3301      	adds	r3, #1
 8001270:	77fb      	strb	r3, [r7, #31]
    while (_position<size) {
 8001272:	7ffa      	ldrb	r2, [r7, #31]
 8001274:	78fb      	ldrb	r3, [r7, #3]
 8001276:	429a      	cmp	r2, r3
 8001278:	d3d1      	bcc.n	800121e <GPS_NEO_NMEA_Decode+0x22>
    }
    if (strlen(GPS.Latitude_str)==0 | strlen(GPS.Longitude_str)==0 | strlen(GPS.Latitude_str)==0 | GPS.CheckE_str!='E' | GPS.CheckN_str!='N') {
 800127a:	4b1e      	ldr	r3, [pc, #120]	; (80012f4 <GPS_NEO_NMEA_Decode+0xf8>)
 800127c:	781b      	ldrb	r3, [r3, #0]
 800127e:	2b00      	cmp	r3, #0
 8001280:	bf0c      	ite	eq
 8001282:	2301      	moveq	r3, #1
 8001284:	2300      	movne	r3, #0
 8001286:	b2da      	uxtb	r2, r3
 8001288:	4b1b      	ldr	r3, [pc, #108]	; (80012f8 <GPS_NEO_NMEA_Decode+0xfc>)
 800128a:	781b      	ldrb	r3, [r3, #0]
 800128c:	2b00      	cmp	r3, #0
 800128e:	bf0c      	ite	eq
 8001290:	2301      	moveq	r3, #1
 8001292:	2300      	movne	r3, #0
 8001294:	b2db      	uxtb	r3, r3
 8001296:	4313      	orrs	r3, r2
 8001298:	b2db      	uxtb	r3, r3
 800129a:	461a      	mov	r2, r3
 800129c:	4b15      	ldr	r3, [pc, #84]	; (80012f4 <GPS_NEO_NMEA_Decode+0xf8>)
 800129e:	781b      	ldrb	r3, [r3, #0]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	bf0c      	ite	eq
 80012a4:	2301      	moveq	r3, #1
 80012a6:	2300      	movne	r3, #0
 80012a8:	b2db      	uxtb	r3, r3
 80012aa:	4313      	orrs	r3, r2
 80012ac:	2201      	movs	r2, #1
 80012ae:	4611      	mov	r1, r2
 80012b0:	4a12      	ldr	r2, [pc, #72]	; (80012fc <GPS_NEO_NMEA_Decode+0x100>)
 80012b2:	2a45      	cmp	r2, #69	; 0x45
 80012b4:	d101      	bne.n	80012ba <GPS_NEO_NMEA_Decode+0xbe>
 80012b6:	2200      	movs	r2, #0
 80012b8:	4611      	mov	r1, r2
 80012ba:	b2c9      	uxtb	r1, r1
 80012bc:	2201      	movs	r2, #1
 80012be:	4610      	mov	r0, r2
 80012c0:	4a0f      	ldr	r2, [pc, #60]	; (8001300 <GPS_NEO_NMEA_Decode+0x104>)
 80012c2:	2a4e      	cmp	r2, #78	; 0x4e
 80012c4:	d101      	bne.n	80012ca <GPS_NEO_NMEA_Decode+0xce>
 80012c6:	2200      	movs	r2, #0
 80012c8:	4610      	mov	r0, r2
 80012ca:	b2c2      	uxtb	r2, r0
 80012cc:	430a      	orrs	r2, r1
 80012ce:	b2d2      	uxtb	r2, r2
 80012d0:	4313      	orrs	r3, r2
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d004      	beq.n	80012e0 <GPS_NEO_NMEA_Decode+0xe4>
        printf("Error! Can't decode, you should check data input\n");
 80012d6:	480b      	ldr	r0, [pc, #44]	; (8001304 <GPS_NEO_NMEA_Decode+0x108>)
 80012d8:	f004 f8d0 	bl	800547c <puts>
        return DECODE_ERROR;
 80012dc:	2300      	movs	r3, #0
 80012de:	e000      	b.n	80012e2 <GPS_NEO_NMEA_Decode+0xe6>
    } else 
    return DECODE_OK;
 80012e0:	2301      	movs	r3, #1
}
 80012e2:	4618      	mov	r0, r3
 80012e4:	3720      	adds	r7, #32
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	20000094 	.word	0x20000094
 80012f0:	20000084 	.word	0x20000084
 80012f4:	20000115 	.word	0x20000115
 80012f8:	20000109 	.word	0x20000109
 80012fc:	20000122 	.word	0x20000122
 8001300:	20000121 	.word	0x20000121
 8001304:	08006230 	.word	0x08006230

08001308 <GPS_NEO_NMEA_GotoUpdate>:

void GPS_NEO_NMEA_GotoUpdate(char *a, uint8_t size, uint8_t flag) {
 8001308:	b580      	push	{r7, lr}
 800130a:	b082      	sub	sp, #8
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
 8001310:	460b      	mov	r3, r1
 8001312:	70fb      	strb	r3, [r7, #3]
 8001314:	4613      	mov	r3, r2
 8001316:	70bb      	strb	r3, [r7, #2]
    switch (flag) {
 8001318:	78bb      	ldrb	r3, [r7, #2]
 800131a:	2b05      	cmp	r3, #5
 800131c:	d838      	bhi.n	8001390 <GPS_NEO_NMEA_GotoUpdate+0x88>
 800131e:	a201      	add	r2, pc, #4	; (adr r2, 8001324 <GPS_NEO_NMEA_GotoUpdate+0x1c>)
 8001320:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001324:	0800133d 	.word	0x0800133d
 8001328:	0800134b 	.word	0x0800134b
 800132c:	08001359 	.word	0x08001359
 8001330:	08001367 	.word	0x08001367
 8001334:	08001375 	.word	0x08001375
 8001338:	08001383 	.word	0x08001383
        case 0:
            strncpy(GPS.TypeGP_str, a, size);
 800133c:	78fb      	ldrb	r3, [r7, #3]
 800133e:	461a      	mov	r2, r3
 8001340:	6879      	ldr	r1, [r7, #4]
 8001342:	4816      	ldr	r0, [pc, #88]	; (800139c <GPS_NEO_NMEA_GotoUpdate+0x94>)
 8001344:	f004 f982 	bl	800564c <strncpy>
            break;
 8001348:	e023      	b.n	8001392 <GPS_NEO_NMEA_GotoUpdate+0x8a>
        case 1:
            strncpy(GPS.GTM_str, a, size);
 800134a:	78fb      	ldrb	r3, [r7, #3]
 800134c:	461a      	mov	r2, r3
 800134e:	6879      	ldr	r1, [r7, #4]
 8001350:	4813      	ldr	r0, [pc, #76]	; (80013a0 <GPS_NEO_NMEA_GotoUpdate+0x98>)
 8001352:	f004 f97b 	bl	800564c <strncpy>
            break;
 8001356:	e01c      	b.n	8001392 <GPS_NEO_NMEA_GotoUpdate+0x8a>
        case 2:
            strncpy(GPS.Longitude_str, a, size);
 8001358:	78fb      	ldrb	r3, [r7, #3]
 800135a:	461a      	mov	r2, r3
 800135c:	6879      	ldr	r1, [r7, #4]
 800135e:	4811      	ldr	r0, [pc, #68]	; (80013a4 <GPS_NEO_NMEA_GotoUpdate+0x9c>)
 8001360:	f004 f974 	bl	800564c <strncpy>
            break;
 8001364:	e015      	b.n	8001392 <GPS_NEO_NMEA_GotoUpdate+0x8a>
        case 3:
        	strncpy(GPS.CheckN_str, a, size);
 8001366:	78fb      	ldrb	r3, [r7, #3]
 8001368:	461a      	mov	r2, r3
 800136a:	6879      	ldr	r1, [r7, #4]
 800136c:	480e      	ldr	r0, [pc, #56]	; (80013a8 <GPS_NEO_NMEA_GotoUpdate+0xa0>)
 800136e:	f004 f96d 	bl	800564c <strncpy>
        	break;
 8001372:	e00e      	b.n	8001392 <GPS_NEO_NMEA_GotoUpdate+0x8a>
        case 4:
            strncpy(GPS.Latitude_str, a, size);
 8001374:	78fb      	ldrb	r3, [r7, #3]
 8001376:	461a      	mov	r2, r3
 8001378:	6879      	ldr	r1, [r7, #4]
 800137a:	480c      	ldr	r0, [pc, #48]	; (80013ac <GPS_NEO_NMEA_GotoUpdate+0xa4>)
 800137c:	f004 f966 	bl	800564c <strncpy>
            break;
 8001380:	e007      	b.n	8001392 <GPS_NEO_NMEA_GotoUpdate+0x8a>
        case 5:
        	strncpy(GPS.CheckE_str, a, size);
 8001382:	78fb      	ldrb	r3, [r7, #3]
 8001384:	461a      	mov	r2, r3
 8001386:	6879      	ldr	r1, [r7, #4]
 8001388:	4809      	ldr	r0, [pc, #36]	; (80013b0 <GPS_NEO_NMEA_GotoUpdate+0xa8>)
 800138a:	f004 f95f 	bl	800564c <strncpy>
        	break;
 800138e:	e000      	b.n	8001392 <GPS_NEO_NMEA_GotoUpdate+0x8a>
        default:
            break;
 8001390:	bf00      	nop
    }
}
 8001392:	bf00      	nop
 8001394:	3708      	adds	r7, #8
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	200000f8 	.word	0x200000f8
 80013a0:	200000ff 	.word	0x200000ff
 80013a4:	20000109 	.word	0x20000109
 80013a8:	20000121 	.word	0x20000121
 80013ac:	20000115 	.word	0x20000115
 80013b0:	20000122 	.word	0x20000122

080013b4 <GPS_NEO_NMEA_CalculateTime>:

void GPS_NEO_NMEA_CalculateTime() {
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b084      	sub	sp, #16
 80013b8:	af00      	add	r7, sp, #0
    char *Latitude_img = (char *)malloc(sizeof(GPS.Latitude_str));
 80013ba:	200c      	movs	r0, #12
 80013bc:	f003 fe0c 	bl	8004fd8 <malloc>
 80013c0:	4603      	mov	r3, r0
 80013c2:	60fb      	str	r3, [r7, #12]
    strncpy(Latitude_img, GPS.Latitude_str, sizeof(GPS.Latitude_str));
 80013c4:	220c      	movs	r2, #12
 80013c6:	4933      	ldr	r1, [pc, #204]	; (8001494 <GPS_NEO_NMEA_CalculateTime+0xe0>)
 80013c8:	68f8      	ldr	r0, [r7, #12]
 80013ca:	f004 f93f 	bl	800564c <strncpy>
    char *token;
    token = strtok(Latitude_img,".");
 80013ce:	4932      	ldr	r1, [pc, #200]	; (8001498 <GPS_NEO_NMEA_CalculateTime+0xe4>)
 80013d0:	68f8      	ldr	r0, [r7, #12]
 80013d2:	f004 f94f 	bl	8005674 <strtok>
 80013d6:	60b8      	str	r0, [r7, #8]
    int latitude_int = atoi(token);
 80013d8:	68b8      	ldr	r0, [r7, #8]
 80013da:	f003 fdf9 	bl	8004fd0 <atoi>
 80013de:	6078      	str	r0, [r7, #4]
    uint8_t Muigio = round(latitude_int/1500);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	4a2e      	ldr	r2, [pc, #184]	; (800149c <GPS_NEO_NMEA_CalculateTime+0xe8>)
 80013e4:	fb82 1203 	smull	r1, r2, r2, r3
 80013e8:	1152      	asrs	r2, r2, #5
 80013ea:	17db      	asrs	r3, r3, #31
 80013ec:	1ad3      	subs	r3, r2, r3
 80013ee:	4618      	mov	r0, r3
 80013f0:	f7ff f800 	bl	80003f4 <__aeabi_i2d>
 80013f4:	4602      	mov	r2, r0
 80013f6:	460b      	mov	r3, r1
 80013f8:	4610      	mov	r0, r2
 80013fa:	4619      	mov	r1, r3
 80013fc:	f7ff f8ec 	bl	80005d8 <__aeabi_d2uiz>
 8001400:	4603      	mov	r3, r0
 8001402:	70fb      	strb	r3, [r7, #3]
    GPS.GTMHour   = (GPS.GTM_str[0]-0x30)*10 + (GPS.GTM_str[1]-0x30);
 8001404:	4b26      	ldr	r3, [pc, #152]	; (80014a0 <GPS_NEO_NMEA_CalculateTime+0xec>)
 8001406:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 800140a:	3b30      	subs	r3, #48	; 0x30
 800140c:	b2db      	uxtb	r3, r3
 800140e:	461a      	mov	r2, r3
 8001410:	0092      	lsls	r2, r2, #2
 8001412:	4413      	add	r3, r2
 8001414:	005b      	lsls	r3, r3, #1
 8001416:	b2da      	uxtb	r2, r3
 8001418:	4b21      	ldr	r3, [pc, #132]	; (80014a0 <GPS_NEO_NMEA_CalculateTime+0xec>)
 800141a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800141e:	4413      	add	r3, r2
 8001420:	b2db      	uxtb	r3, r3
 8001422:	3b30      	subs	r3, #48	; 0x30
 8001424:	b2da      	uxtb	r2, r3
 8001426:	4b1e      	ldr	r3, [pc, #120]	; (80014a0 <GPS_NEO_NMEA_CalculateTime+0xec>)
 8001428:	70da      	strb	r2, [r3, #3]
    GPS.GTMMinute = (GPS.GTM_str[2]-0x30)*10 + (GPS.GTM_str[3]-0x30);
 800142a:	4b1d      	ldr	r3, [pc, #116]	; (80014a0 <GPS_NEO_NMEA_CalculateTime+0xec>)
 800142c:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8001430:	3b30      	subs	r3, #48	; 0x30
 8001432:	b2db      	uxtb	r3, r3
 8001434:	461a      	mov	r2, r3
 8001436:	0092      	lsls	r2, r2, #2
 8001438:	4413      	add	r3, r2
 800143a:	005b      	lsls	r3, r3, #1
 800143c:	b2da      	uxtb	r2, r3
 800143e:	4b18      	ldr	r3, [pc, #96]	; (80014a0 <GPS_NEO_NMEA_CalculateTime+0xec>)
 8001440:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8001444:	4413      	add	r3, r2
 8001446:	b2db      	uxtb	r3, r3
 8001448:	3b30      	subs	r3, #48	; 0x30
 800144a:	b2da      	uxtb	r2, r3
 800144c:	4b14      	ldr	r3, [pc, #80]	; (80014a0 <GPS_NEO_NMEA_CalculateTime+0xec>)
 800144e:	711a      	strb	r2, [r3, #4]
    GPS.GTMSecond = (GPS.GTM_str[4]-0x30)*10 + (GPS.GTM_str[5]-0x30);
 8001450:	4b13      	ldr	r3, [pc, #76]	; (80014a0 <GPS_NEO_NMEA_CalculateTime+0xec>)
 8001452:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8001456:	3b30      	subs	r3, #48	; 0x30
 8001458:	b2db      	uxtb	r3, r3
 800145a:	461a      	mov	r2, r3
 800145c:	0092      	lsls	r2, r2, #2
 800145e:	4413      	add	r3, r2
 8001460:	005b      	lsls	r3, r3, #1
 8001462:	b2da      	uxtb	r2, r3
 8001464:	4b0e      	ldr	r3, [pc, #56]	; (80014a0 <GPS_NEO_NMEA_CalculateTime+0xec>)
 8001466:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800146a:	4413      	add	r3, r2
 800146c:	b2db      	uxtb	r3, r3
 800146e:	3b30      	subs	r3, #48	; 0x30
 8001470:	b2da      	uxtb	r2, r3
 8001472:	4b0b      	ldr	r3, [pc, #44]	; (80014a0 <GPS_NEO_NMEA_CalculateTime+0xec>)
 8001474:	715a      	strb	r2, [r3, #5]
    printf("%d,%d,%d", GPS.GTMHour, GPS.GTMMinute, GPS.GTMSecond);
 8001476:	4b0a      	ldr	r3, [pc, #40]	; (80014a0 <GPS_NEO_NMEA_CalculateTime+0xec>)
 8001478:	78db      	ldrb	r3, [r3, #3]
 800147a:	4619      	mov	r1, r3
 800147c:	4b08      	ldr	r3, [pc, #32]	; (80014a0 <GPS_NEO_NMEA_CalculateTime+0xec>)
 800147e:	791b      	ldrb	r3, [r3, #4]
 8001480:	461a      	mov	r2, r3
 8001482:	4b07      	ldr	r3, [pc, #28]	; (80014a0 <GPS_NEO_NMEA_CalculateTime+0xec>)
 8001484:	795b      	ldrb	r3, [r3, #5]
 8001486:	4807      	ldr	r0, [pc, #28]	; (80014a4 <GPS_NEO_NMEA_CalculateTime+0xf0>)
 8001488:	f003 ff92 	bl	80053b0 <iprintf>
}
 800148c:	bf00      	nop
 800148e:	3710      	adds	r7, #16
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}
 8001494:	20000115 	.word	0x20000115
 8001498:	08006264 	.word	0x08006264
 800149c:	057619f1 	.word	0x057619f1
 80014a0:	20000084 	.word	0x20000084
 80014a4:	08006268 	.word	0x08006268

080014a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014ac:	4b08      	ldr	r3, [pc, #32]	; (80014d0 <HAL_Init+0x28>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4a07      	ldr	r2, [pc, #28]	; (80014d0 <HAL_Init+0x28>)
 80014b2:	f043 0310 	orr.w	r3, r3, #16
 80014b6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014b8:	2003      	movs	r0, #3
 80014ba:	f000 f947 	bl	800174c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014be:	200f      	movs	r0, #15
 80014c0:	f000 f808 	bl	80014d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014c4:	f7ff fc8e 	bl	8000de4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014c8:	2300      	movs	r3, #0
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	40022000 	.word	0x40022000

080014d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b082      	sub	sp, #8
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014dc:	4b12      	ldr	r3, [pc, #72]	; (8001528 <HAL_InitTick+0x54>)
 80014de:	681a      	ldr	r2, [r3, #0]
 80014e0:	4b12      	ldr	r3, [pc, #72]	; (800152c <HAL_InitTick+0x58>)
 80014e2:	781b      	ldrb	r3, [r3, #0]
 80014e4:	4619      	mov	r1, r3
 80014e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80014ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80014f2:	4618      	mov	r0, r3
 80014f4:	f000 f95f 	bl	80017b6 <HAL_SYSTICK_Config>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d001      	beq.n	8001502 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014fe:	2301      	movs	r3, #1
 8001500:	e00e      	b.n	8001520 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	2b0f      	cmp	r3, #15
 8001506:	d80a      	bhi.n	800151e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001508:	2200      	movs	r2, #0
 800150a:	6879      	ldr	r1, [r7, #4]
 800150c:	f04f 30ff 	mov.w	r0, #4294967295
 8001510:	f000 f927 	bl	8001762 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001514:	4a06      	ldr	r2, [pc, #24]	; (8001530 <HAL_InitTick+0x5c>)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800151a:	2300      	movs	r3, #0
 800151c:	e000      	b.n	8001520 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800151e:	2301      	movs	r3, #1
}
 8001520:	4618      	mov	r0, r3
 8001522:	3708      	adds	r7, #8
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}
 8001528:	20000000 	.word	0x20000000
 800152c:	20000008 	.word	0x20000008
 8001530:	20000004 	.word	0x20000004

08001534 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001534:	b480      	push	{r7}
 8001536:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001538:	4b05      	ldr	r3, [pc, #20]	; (8001550 <HAL_IncTick+0x1c>)
 800153a:	781b      	ldrb	r3, [r3, #0]
 800153c:	461a      	mov	r2, r3
 800153e:	4b05      	ldr	r3, [pc, #20]	; (8001554 <HAL_IncTick+0x20>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4413      	add	r3, r2
 8001544:	4a03      	ldr	r2, [pc, #12]	; (8001554 <HAL_IncTick+0x20>)
 8001546:	6013      	str	r3, [r2, #0]
}
 8001548:	bf00      	nop
 800154a:	46bd      	mov	sp, r7
 800154c:	bc80      	pop	{r7}
 800154e:	4770      	bx	lr
 8001550:	20000008 	.word	0x20000008
 8001554:	200003fc 	.word	0x200003fc

08001558 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001558:	b480      	push	{r7}
 800155a:	af00      	add	r7, sp, #0
  return uwTick;
 800155c:	4b02      	ldr	r3, [pc, #8]	; (8001568 <HAL_GetTick+0x10>)
 800155e:	681b      	ldr	r3, [r3, #0]
}
 8001560:	4618      	mov	r0, r3
 8001562:	46bd      	mov	sp, r7
 8001564:	bc80      	pop	{r7}
 8001566:	4770      	bx	lr
 8001568:	200003fc 	.word	0x200003fc

0800156c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b084      	sub	sp, #16
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001574:	f7ff fff0 	bl	8001558 <HAL_GetTick>
 8001578:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001584:	d005      	beq.n	8001592 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001586:	4b0a      	ldr	r3, [pc, #40]	; (80015b0 <HAL_Delay+0x44>)
 8001588:	781b      	ldrb	r3, [r3, #0]
 800158a:	461a      	mov	r2, r3
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	4413      	add	r3, r2
 8001590:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001592:	bf00      	nop
 8001594:	f7ff ffe0 	bl	8001558 <HAL_GetTick>
 8001598:	4602      	mov	r2, r0
 800159a:	68bb      	ldr	r3, [r7, #8]
 800159c:	1ad3      	subs	r3, r2, r3
 800159e:	68fa      	ldr	r2, [r7, #12]
 80015a0:	429a      	cmp	r2, r3
 80015a2:	d8f7      	bhi.n	8001594 <HAL_Delay+0x28>
  {
  }
}
 80015a4:	bf00      	nop
 80015a6:	bf00      	nop
 80015a8:	3710      	adds	r7, #16
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	20000008 	.word	0x20000008

080015b4 <__NVIC_SetPriorityGrouping>:
{
 80015b4:	b480      	push	{r7}
 80015b6:	b085      	sub	sp, #20
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	f003 0307 	and.w	r3, r3, #7
 80015c2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015c4:	4b0c      	ldr	r3, [pc, #48]	; (80015f8 <__NVIC_SetPriorityGrouping+0x44>)
 80015c6:	68db      	ldr	r3, [r3, #12]
 80015c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015ca:	68ba      	ldr	r2, [r7, #8]
 80015cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015d0:	4013      	ands	r3, r2
 80015d2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015d8:	68bb      	ldr	r3, [r7, #8]
 80015da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015e6:	4a04      	ldr	r2, [pc, #16]	; (80015f8 <__NVIC_SetPriorityGrouping+0x44>)
 80015e8:	68bb      	ldr	r3, [r7, #8]
 80015ea:	60d3      	str	r3, [r2, #12]
}
 80015ec:	bf00      	nop
 80015ee:	3714      	adds	r7, #20
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bc80      	pop	{r7}
 80015f4:	4770      	bx	lr
 80015f6:	bf00      	nop
 80015f8:	e000ed00 	.word	0xe000ed00

080015fc <__NVIC_GetPriorityGrouping>:
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001600:	4b04      	ldr	r3, [pc, #16]	; (8001614 <__NVIC_GetPriorityGrouping+0x18>)
 8001602:	68db      	ldr	r3, [r3, #12]
 8001604:	0a1b      	lsrs	r3, r3, #8
 8001606:	f003 0307 	and.w	r3, r3, #7
}
 800160a:	4618      	mov	r0, r3
 800160c:	46bd      	mov	sp, r7
 800160e:	bc80      	pop	{r7}
 8001610:	4770      	bx	lr
 8001612:	bf00      	nop
 8001614:	e000ed00 	.word	0xe000ed00

08001618 <__NVIC_EnableIRQ>:
{
 8001618:	b480      	push	{r7}
 800161a:	b083      	sub	sp, #12
 800161c:	af00      	add	r7, sp, #0
 800161e:	4603      	mov	r3, r0
 8001620:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001622:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001626:	2b00      	cmp	r3, #0
 8001628:	db0b      	blt.n	8001642 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800162a:	79fb      	ldrb	r3, [r7, #7]
 800162c:	f003 021f 	and.w	r2, r3, #31
 8001630:	4906      	ldr	r1, [pc, #24]	; (800164c <__NVIC_EnableIRQ+0x34>)
 8001632:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001636:	095b      	lsrs	r3, r3, #5
 8001638:	2001      	movs	r0, #1
 800163a:	fa00 f202 	lsl.w	r2, r0, r2
 800163e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001642:	bf00      	nop
 8001644:	370c      	adds	r7, #12
 8001646:	46bd      	mov	sp, r7
 8001648:	bc80      	pop	{r7}
 800164a:	4770      	bx	lr
 800164c:	e000e100 	.word	0xe000e100

08001650 <__NVIC_SetPriority>:
{
 8001650:	b480      	push	{r7}
 8001652:	b083      	sub	sp, #12
 8001654:	af00      	add	r7, sp, #0
 8001656:	4603      	mov	r3, r0
 8001658:	6039      	str	r1, [r7, #0]
 800165a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800165c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001660:	2b00      	cmp	r3, #0
 8001662:	db0a      	blt.n	800167a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	b2da      	uxtb	r2, r3
 8001668:	490c      	ldr	r1, [pc, #48]	; (800169c <__NVIC_SetPriority+0x4c>)
 800166a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800166e:	0112      	lsls	r2, r2, #4
 8001670:	b2d2      	uxtb	r2, r2
 8001672:	440b      	add	r3, r1
 8001674:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001678:	e00a      	b.n	8001690 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	b2da      	uxtb	r2, r3
 800167e:	4908      	ldr	r1, [pc, #32]	; (80016a0 <__NVIC_SetPriority+0x50>)
 8001680:	79fb      	ldrb	r3, [r7, #7]
 8001682:	f003 030f 	and.w	r3, r3, #15
 8001686:	3b04      	subs	r3, #4
 8001688:	0112      	lsls	r2, r2, #4
 800168a:	b2d2      	uxtb	r2, r2
 800168c:	440b      	add	r3, r1
 800168e:	761a      	strb	r2, [r3, #24]
}
 8001690:	bf00      	nop
 8001692:	370c      	adds	r7, #12
 8001694:	46bd      	mov	sp, r7
 8001696:	bc80      	pop	{r7}
 8001698:	4770      	bx	lr
 800169a:	bf00      	nop
 800169c:	e000e100 	.word	0xe000e100
 80016a0:	e000ed00 	.word	0xe000ed00

080016a4 <NVIC_EncodePriority>:
{
 80016a4:	b480      	push	{r7}
 80016a6:	b089      	sub	sp, #36	; 0x24
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	60f8      	str	r0, [r7, #12]
 80016ac:	60b9      	str	r1, [r7, #8]
 80016ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	f003 0307 	and.w	r3, r3, #7
 80016b6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016b8:	69fb      	ldr	r3, [r7, #28]
 80016ba:	f1c3 0307 	rsb	r3, r3, #7
 80016be:	2b04      	cmp	r3, #4
 80016c0:	bf28      	it	cs
 80016c2:	2304      	movcs	r3, #4
 80016c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016c6:	69fb      	ldr	r3, [r7, #28]
 80016c8:	3304      	adds	r3, #4
 80016ca:	2b06      	cmp	r3, #6
 80016cc:	d902      	bls.n	80016d4 <NVIC_EncodePriority+0x30>
 80016ce:	69fb      	ldr	r3, [r7, #28]
 80016d0:	3b03      	subs	r3, #3
 80016d2:	e000      	b.n	80016d6 <NVIC_EncodePriority+0x32>
 80016d4:	2300      	movs	r3, #0
 80016d6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016d8:	f04f 32ff 	mov.w	r2, #4294967295
 80016dc:	69bb      	ldr	r3, [r7, #24]
 80016de:	fa02 f303 	lsl.w	r3, r2, r3
 80016e2:	43da      	mvns	r2, r3
 80016e4:	68bb      	ldr	r3, [r7, #8]
 80016e6:	401a      	ands	r2, r3
 80016e8:	697b      	ldr	r3, [r7, #20]
 80016ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016ec:	f04f 31ff 	mov.w	r1, #4294967295
 80016f0:	697b      	ldr	r3, [r7, #20]
 80016f2:	fa01 f303 	lsl.w	r3, r1, r3
 80016f6:	43d9      	mvns	r1, r3
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016fc:	4313      	orrs	r3, r2
}
 80016fe:	4618      	mov	r0, r3
 8001700:	3724      	adds	r7, #36	; 0x24
 8001702:	46bd      	mov	sp, r7
 8001704:	bc80      	pop	{r7}
 8001706:	4770      	bx	lr

08001708 <SysTick_Config>:
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b082      	sub	sp, #8
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	3b01      	subs	r3, #1
 8001714:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001718:	d301      	bcc.n	800171e <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800171a:	2301      	movs	r3, #1
 800171c:	e00f      	b.n	800173e <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800171e:	4a0a      	ldr	r2, [pc, #40]	; (8001748 <SysTick_Config+0x40>)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	3b01      	subs	r3, #1
 8001724:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001726:	210f      	movs	r1, #15
 8001728:	f04f 30ff 	mov.w	r0, #4294967295
 800172c:	f7ff ff90 	bl	8001650 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001730:	4b05      	ldr	r3, [pc, #20]	; (8001748 <SysTick_Config+0x40>)
 8001732:	2200      	movs	r2, #0
 8001734:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001736:	4b04      	ldr	r3, [pc, #16]	; (8001748 <SysTick_Config+0x40>)
 8001738:	2207      	movs	r2, #7
 800173a:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 800173c:	2300      	movs	r3, #0
}
 800173e:	4618      	mov	r0, r3
 8001740:	3708      	adds	r7, #8
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	e000e010 	.word	0xe000e010

0800174c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b082      	sub	sp, #8
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001754:	6878      	ldr	r0, [r7, #4]
 8001756:	f7ff ff2d 	bl	80015b4 <__NVIC_SetPriorityGrouping>
}
 800175a:	bf00      	nop
 800175c:	3708      	adds	r7, #8
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}

08001762 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001762:	b580      	push	{r7, lr}
 8001764:	b086      	sub	sp, #24
 8001766:	af00      	add	r7, sp, #0
 8001768:	4603      	mov	r3, r0
 800176a:	60b9      	str	r1, [r7, #8]
 800176c:	607a      	str	r2, [r7, #4]
 800176e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001770:	2300      	movs	r3, #0
 8001772:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001774:	f7ff ff42 	bl	80015fc <__NVIC_GetPriorityGrouping>
 8001778:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800177a:	687a      	ldr	r2, [r7, #4]
 800177c:	68b9      	ldr	r1, [r7, #8]
 800177e:	6978      	ldr	r0, [r7, #20]
 8001780:	f7ff ff90 	bl	80016a4 <NVIC_EncodePriority>
 8001784:	4602      	mov	r2, r0
 8001786:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800178a:	4611      	mov	r1, r2
 800178c:	4618      	mov	r0, r3
 800178e:	f7ff ff5f 	bl	8001650 <__NVIC_SetPriority>
}
 8001792:	bf00      	nop
 8001794:	3718      	adds	r7, #24
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}

0800179a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800179a:	b580      	push	{r7, lr}
 800179c:	b082      	sub	sp, #8
 800179e:	af00      	add	r7, sp, #0
 80017a0:	4603      	mov	r3, r0
 80017a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017a8:	4618      	mov	r0, r3
 80017aa:	f7ff ff35 	bl	8001618 <__NVIC_EnableIRQ>
}
 80017ae:	bf00      	nop
 80017b0:	3708      	adds	r7, #8
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}

080017b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017b6:	b580      	push	{r7, lr}
 80017b8:	b082      	sub	sp, #8
 80017ba:	af00      	add	r7, sp, #0
 80017bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017be:	6878      	ldr	r0, [r7, #4]
 80017c0:	f7ff ffa2 	bl	8001708 <SysTick_Config>
 80017c4:	4603      	mov	r3, r0
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	3708      	adds	r7, #8
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
	...

080017d0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b085      	sub	sp, #20
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80017d8:	2300      	movs	r3, #0
 80017da:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d101      	bne.n	80017e6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80017e2:	2301      	movs	r3, #1
 80017e4:	e043      	b.n	800186e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	461a      	mov	r2, r3
 80017ec:	4b22      	ldr	r3, [pc, #136]	; (8001878 <HAL_DMA_Init+0xa8>)
 80017ee:	4413      	add	r3, r2
 80017f0:	4a22      	ldr	r2, [pc, #136]	; (800187c <HAL_DMA_Init+0xac>)
 80017f2:	fba2 2303 	umull	r2, r3, r2, r3
 80017f6:	091b      	lsrs	r3, r3, #4
 80017f8:	009a      	lsls	r2, r3, #2
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	4a1f      	ldr	r2, [pc, #124]	; (8001880 <HAL_DMA_Init+0xb0>)
 8001802:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2202      	movs	r2, #2
 8001808:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800181a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800181e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001828:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	68db      	ldr	r3, [r3, #12]
 800182e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001834:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	695b      	ldr	r3, [r3, #20]
 800183a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001840:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	69db      	ldr	r3, [r3, #28]
 8001846:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001848:	68fa      	ldr	r2, [r7, #12]
 800184a:	4313      	orrs	r3, r2
 800184c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	68fa      	ldr	r2, [r7, #12]
 8001854:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	2200      	movs	r2, #0
 800185a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2201      	movs	r2, #1
 8001860:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2200      	movs	r2, #0
 8001868:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800186c:	2300      	movs	r3, #0
}
 800186e:	4618      	mov	r0, r3
 8001870:	3714      	adds	r7, #20
 8001872:	46bd      	mov	sp, r7
 8001874:	bc80      	pop	{r7}
 8001876:	4770      	bx	lr
 8001878:	bffdfff8 	.word	0xbffdfff8
 800187c:	cccccccd 	.word	0xcccccccd
 8001880:	40020000 	.word	0x40020000

08001884 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b086      	sub	sp, #24
 8001888:	af00      	add	r7, sp, #0
 800188a:	60f8      	str	r0, [r7, #12]
 800188c:	60b9      	str	r1, [r7, #8]
 800188e:	607a      	str	r2, [r7, #4]
 8001890:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001892:	2300      	movs	r3, #0
 8001894:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	f893 3020 	ldrb.w	r3, [r3, #32]
 800189c:	2b01      	cmp	r3, #1
 800189e:	d101      	bne.n	80018a4 <HAL_DMA_Start_IT+0x20>
 80018a0:	2302      	movs	r3, #2
 80018a2:	e04b      	b.n	800193c <HAL_DMA_Start_IT+0xb8>
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	2201      	movs	r2, #1
 80018a8:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80018b2:	b2db      	uxtb	r3, r3
 80018b4:	2b01      	cmp	r3, #1
 80018b6:	d13a      	bne.n	800192e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	2202      	movs	r2, #2
 80018bc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	2200      	movs	r2, #0
 80018c4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	681a      	ldr	r2, [r3, #0]
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f022 0201 	bic.w	r2, r2, #1
 80018d4:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	687a      	ldr	r2, [r7, #4]
 80018da:	68b9      	ldr	r1, [r7, #8]
 80018dc:	68f8      	ldr	r0, [r7, #12]
 80018de:	f000 f937 	bl	8001b50 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d008      	beq.n	80018fc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	681a      	ldr	r2, [r3, #0]
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f042 020e 	orr.w	r2, r2, #14
 80018f8:	601a      	str	r2, [r3, #0]
 80018fa:	e00f      	b.n	800191c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	681a      	ldr	r2, [r3, #0]
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f022 0204 	bic.w	r2, r2, #4
 800190a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	681a      	ldr	r2, [r3, #0]
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f042 020a 	orr.w	r2, r2, #10
 800191a:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	681a      	ldr	r2, [r3, #0]
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f042 0201 	orr.w	r2, r2, #1
 800192a:	601a      	str	r2, [r3, #0]
 800192c:	e005      	b.n	800193a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	2200      	movs	r2, #0
 8001932:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001936:	2302      	movs	r3, #2
 8001938:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800193a:	7dfb      	ldrb	r3, [r7, #23]
}
 800193c:	4618      	mov	r0, r3
 800193e:	3718      	adds	r7, #24
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}

08001944 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b084      	sub	sp, #16
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001960:	2204      	movs	r2, #4
 8001962:	409a      	lsls	r2, r3
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	4013      	ands	r3, r2
 8001968:	2b00      	cmp	r3, #0
 800196a:	d04f      	beq.n	8001a0c <HAL_DMA_IRQHandler+0xc8>
 800196c:	68bb      	ldr	r3, [r7, #8]
 800196e:	f003 0304 	and.w	r3, r3, #4
 8001972:	2b00      	cmp	r3, #0
 8001974:	d04a      	beq.n	8001a0c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f003 0320 	and.w	r3, r3, #32
 8001980:	2b00      	cmp	r3, #0
 8001982:	d107      	bne.n	8001994 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	681a      	ldr	r2, [r3, #0]
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f022 0204 	bic.w	r2, r2, #4
 8001992:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4a66      	ldr	r2, [pc, #408]	; (8001b34 <HAL_DMA_IRQHandler+0x1f0>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d029      	beq.n	80019f2 <HAL_DMA_IRQHandler+0xae>
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4a65      	ldr	r2, [pc, #404]	; (8001b38 <HAL_DMA_IRQHandler+0x1f4>)
 80019a4:	4293      	cmp	r3, r2
 80019a6:	d022      	beq.n	80019ee <HAL_DMA_IRQHandler+0xaa>
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a63      	ldr	r2, [pc, #396]	; (8001b3c <HAL_DMA_IRQHandler+0x1f8>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d01a      	beq.n	80019e8 <HAL_DMA_IRQHandler+0xa4>
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4a62      	ldr	r2, [pc, #392]	; (8001b40 <HAL_DMA_IRQHandler+0x1fc>)
 80019b8:	4293      	cmp	r3, r2
 80019ba:	d012      	beq.n	80019e2 <HAL_DMA_IRQHandler+0x9e>
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4a60      	ldr	r2, [pc, #384]	; (8001b44 <HAL_DMA_IRQHandler+0x200>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d00a      	beq.n	80019dc <HAL_DMA_IRQHandler+0x98>
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4a5f      	ldr	r2, [pc, #380]	; (8001b48 <HAL_DMA_IRQHandler+0x204>)
 80019cc:	4293      	cmp	r3, r2
 80019ce:	d102      	bne.n	80019d6 <HAL_DMA_IRQHandler+0x92>
 80019d0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80019d4:	e00e      	b.n	80019f4 <HAL_DMA_IRQHandler+0xb0>
 80019d6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80019da:	e00b      	b.n	80019f4 <HAL_DMA_IRQHandler+0xb0>
 80019dc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80019e0:	e008      	b.n	80019f4 <HAL_DMA_IRQHandler+0xb0>
 80019e2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80019e6:	e005      	b.n	80019f4 <HAL_DMA_IRQHandler+0xb0>
 80019e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80019ec:	e002      	b.n	80019f4 <HAL_DMA_IRQHandler+0xb0>
 80019ee:	2340      	movs	r3, #64	; 0x40
 80019f0:	e000      	b.n	80019f4 <HAL_DMA_IRQHandler+0xb0>
 80019f2:	2304      	movs	r3, #4
 80019f4:	4a55      	ldr	r2, [pc, #340]	; (8001b4c <HAL_DMA_IRQHandler+0x208>)
 80019f6:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	f000 8094 	beq.w	8001b2a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a06:	6878      	ldr	r0, [r7, #4]
 8001a08:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001a0a:	e08e      	b.n	8001b2a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a10:	2202      	movs	r2, #2
 8001a12:	409a      	lsls	r2, r3
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	4013      	ands	r3, r2
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d056      	beq.n	8001aca <HAL_DMA_IRQHandler+0x186>
 8001a1c:	68bb      	ldr	r3, [r7, #8]
 8001a1e:	f003 0302 	and.w	r3, r3, #2
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d051      	beq.n	8001aca <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f003 0320 	and.w	r3, r3, #32
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d10b      	bne.n	8001a4c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	681a      	ldr	r2, [r3, #0]
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f022 020a 	bic.w	r2, r2, #10
 8001a42:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2201      	movs	r2, #1
 8001a48:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4a38      	ldr	r2, [pc, #224]	; (8001b34 <HAL_DMA_IRQHandler+0x1f0>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d029      	beq.n	8001aaa <HAL_DMA_IRQHandler+0x166>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4a37      	ldr	r2, [pc, #220]	; (8001b38 <HAL_DMA_IRQHandler+0x1f4>)
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	d022      	beq.n	8001aa6 <HAL_DMA_IRQHandler+0x162>
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a35      	ldr	r2, [pc, #212]	; (8001b3c <HAL_DMA_IRQHandler+0x1f8>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d01a      	beq.n	8001aa0 <HAL_DMA_IRQHandler+0x15c>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4a34      	ldr	r2, [pc, #208]	; (8001b40 <HAL_DMA_IRQHandler+0x1fc>)
 8001a70:	4293      	cmp	r3, r2
 8001a72:	d012      	beq.n	8001a9a <HAL_DMA_IRQHandler+0x156>
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4a32      	ldr	r2, [pc, #200]	; (8001b44 <HAL_DMA_IRQHandler+0x200>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d00a      	beq.n	8001a94 <HAL_DMA_IRQHandler+0x150>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4a31      	ldr	r2, [pc, #196]	; (8001b48 <HAL_DMA_IRQHandler+0x204>)
 8001a84:	4293      	cmp	r3, r2
 8001a86:	d102      	bne.n	8001a8e <HAL_DMA_IRQHandler+0x14a>
 8001a88:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001a8c:	e00e      	b.n	8001aac <HAL_DMA_IRQHandler+0x168>
 8001a8e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001a92:	e00b      	b.n	8001aac <HAL_DMA_IRQHandler+0x168>
 8001a94:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a98:	e008      	b.n	8001aac <HAL_DMA_IRQHandler+0x168>
 8001a9a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a9e:	e005      	b.n	8001aac <HAL_DMA_IRQHandler+0x168>
 8001aa0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001aa4:	e002      	b.n	8001aac <HAL_DMA_IRQHandler+0x168>
 8001aa6:	2320      	movs	r3, #32
 8001aa8:	e000      	b.n	8001aac <HAL_DMA_IRQHandler+0x168>
 8001aaa:	2302      	movs	r3, #2
 8001aac:	4a27      	ldr	r2, [pc, #156]	; (8001b4c <HAL_DMA_IRQHandler+0x208>)
 8001aae:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d034      	beq.n	8001b2a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ac4:	6878      	ldr	r0, [r7, #4]
 8001ac6:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001ac8:	e02f      	b.n	8001b2a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ace:	2208      	movs	r2, #8
 8001ad0:	409a      	lsls	r2, r3
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d028      	beq.n	8001b2c <HAL_DMA_IRQHandler+0x1e8>
 8001ada:	68bb      	ldr	r3, [r7, #8]
 8001adc:	f003 0308 	and.w	r3, r3, #8
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d023      	beq.n	8001b2c <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	681a      	ldr	r2, [r3, #0]
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f022 020e 	bic.w	r2, r2, #14
 8001af2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001afc:	2101      	movs	r1, #1
 8001afe:	fa01 f202 	lsl.w	r2, r1, r2
 8001b02:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2201      	movs	r2, #1
 8001b08:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2201      	movs	r2, #1
 8001b0e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	2200      	movs	r2, #0
 8001b16:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d004      	beq.n	8001b2c <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b26:	6878      	ldr	r0, [r7, #4]
 8001b28:	4798      	blx	r3
    }
  }
  return;
 8001b2a:	bf00      	nop
 8001b2c:	bf00      	nop
}
 8001b2e:	3710      	adds	r7, #16
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}
 8001b34:	40020008 	.word	0x40020008
 8001b38:	4002001c 	.word	0x4002001c
 8001b3c:	40020030 	.word	0x40020030
 8001b40:	40020044 	.word	0x40020044
 8001b44:	40020058 	.word	0x40020058
 8001b48:	4002006c 	.word	0x4002006c
 8001b4c:	40020000 	.word	0x40020000

08001b50 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b085      	sub	sp, #20
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	60f8      	str	r0, [r7, #12]
 8001b58:	60b9      	str	r1, [r7, #8]
 8001b5a:	607a      	str	r2, [r7, #4]
 8001b5c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b66:	2101      	movs	r1, #1
 8001b68:	fa01 f202 	lsl.w	r2, r1, r2
 8001b6c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	683a      	ldr	r2, [r7, #0]
 8001b74:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	2b10      	cmp	r3, #16
 8001b7c:	d108      	bne.n	8001b90 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	687a      	ldr	r2, [r7, #4]
 8001b84:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	68ba      	ldr	r2, [r7, #8]
 8001b8c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001b8e:	e007      	b.n	8001ba0 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	68ba      	ldr	r2, [r7, #8]
 8001b96:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	687a      	ldr	r2, [r7, #4]
 8001b9e:	60da      	str	r2, [r3, #12]
}
 8001ba0:	bf00      	nop
 8001ba2:	3714      	adds	r7, #20
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bc80      	pop	{r7}
 8001ba8:	4770      	bx	lr
	...

08001bac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b08b      	sub	sp, #44	; 0x2c
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
 8001bb4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bbe:	e169      	b.n	8001e94 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001bc0:	2201      	movs	r2, #1
 8001bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	69fa      	ldr	r2, [r7, #28]
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001bd4:	69ba      	ldr	r2, [r7, #24]
 8001bd6:	69fb      	ldr	r3, [r7, #28]
 8001bd8:	429a      	cmp	r2, r3
 8001bda:	f040 8158 	bne.w	8001e8e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	4a9a      	ldr	r2, [pc, #616]	; (8001e4c <HAL_GPIO_Init+0x2a0>)
 8001be4:	4293      	cmp	r3, r2
 8001be6:	d05e      	beq.n	8001ca6 <HAL_GPIO_Init+0xfa>
 8001be8:	4a98      	ldr	r2, [pc, #608]	; (8001e4c <HAL_GPIO_Init+0x2a0>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d875      	bhi.n	8001cda <HAL_GPIO_Init+0x12e>
 8001bee:	4a98      	ldr	r2, [pc, #608]	; (8001e50 <HAL_GPIO_Init+0x2a4>)
 8001bf0:	4293      	cmp	r3, r2
 8001bf2:	d058      	beq.n	8001ca6 <HAL_GPIO_Init+0xfa>
 8001bf4:	4a96      	ldr	r2, [pc, #600]	; (8001e50 <HAL_GPIO_Init+0x2a4>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d86f      	bhi.n	8001cda <HAL_GPIO_Init+0x12e>
 8001bfa:	4a96      	ldr	r2, [pc, #600]	; (8001e54 <HAL_GPIO_Init+0x2a8>)
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d052      	beq.n	8001ca6 <HAL_GPIO_Init+0xfa>
 8001c00:	4a94      	ldr	r2, [pc, #592]	; (8001e54 <HAL_GPIO_Init+0x2a8>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d869      	bhi.n	8001cda <HAL_GPIO_Init+0x12e>
 8001c06:	4a94      	ldr	r2, [pc, #592]	; (8001e58 <HAL_GPIO_Init+0x2ac>)
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d04c      	beq.n	8001ca6 <HAL_GPIO_Init+0xfa>
 8001c0c:	4a92      	ldr	r2, [pc, #584]	; (8001e58 <HAL_GPIO_Init+0x2ac>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d863      	bhi.n	8001cda <HAL_GPIO_Init+0x12e>
 8001c12:	4a92      	ldr	r2, [pc, #584]	; (8001e5c <HAL_GPIO_Init+0x2b0>)
 8001c14:	4293      	cmp	r3, r2
 8001c16:	d046      	beq.n	8001ca6 <HAL_GPIO_Init+0xfa>
 8001c18:	4a90      	ldr	r2, [pc, #576]	; (8001e5c <HAL_GPIO_Init+0x2b0>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d85d      	bhi.n	8001cda <HAL_GPIO_Init+0x12e>
 8001c1e:	2b12      	cmp	r3, #18
 8001c20:	d82a      	bhi.n	8001c78 <HAL_GPIO_Init+0xcc>
 8001c22:	2b12      	cmp	r3, #18
 8001c24:	d859      	bhi.n	8001cda <HAL_GPIO_Init+0x12e>
 8001c26:	a201      	add	r2, pc, #4	; (adr r2, 8001c2c <HAL_GPIO_Init+0x80>)
 8001c28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c2c:	08001ca7 	.word	0x08001ca7
 8001c30:	08001c81 	.word	0x08001c81
 8001c34:	08001c93 	.word	0x08001c93
 8001c38:	08001cd5 	.word	0x08001cd5
 8001c3c:	08001cdb 	.word	0x08001cdb
 8001c40:	08001cdb 	.word	0x08001cdb
 8001c44:	08001cdb 	.word	0x08001cdb
 8001c48:	08001cdb 	.word	0x08001cdb
 8001c4c:	08001cdb 	.word	0x08001cdb
 8001c50:	08001cdb 	.word	0x08001cdb
 8001c54:	08001cdb 	.word	0x08001cdb
 8001c58:	08001cdb 	.word	0x08001cdb
 8001c5c:	08001cdb 	.word	0x08001cdb
 8001c60:	08001cdb 	.word	0x08001cdb
 8001c64:	08001cdb 	.word	0x08001cdb
 8001c68:	08001cdb 	.word	0x08001cdb
 8001c6c:	08001cdb 	.word	0x08001cdb
 8001c70:	08001c89 	.word	0x08001c89
 8001c74:	08001c9d 	.word	0x08001c9d
 8001c78:	4a79      	ldr	r2, [pc, #484]	; (8001e60 <HAL_GPIO_Init+0x2b4>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d013      	beq.n	8001ca6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001c7e:	e02c      	b.n	8001cda <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	68db      	ldr	r3, [r3, #12]
 8001c84:	623b      	str	r3, [r7, #32]
          break;
 8001c86:	e029      	b.n	8001cdc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	68db      	ldr	r3, [r3, #12]
 8001c8c:	3304      	adds	r3, #4
 8001c8e:	623b      	str	r3, [r7, #32]
          break;
 8001c90:	e024      	b.n	8001cdc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	68db      	ldr	r3, [r3, #12]
 8001c96:	3308      	adds	r3, #8
 8001c98:	623b      	str	r3, [r7, #32]
          break;
 8001c9a:	e01f      	b.n	8001cdc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	68db      	ldr	r3, [r3, #12]
 8001ca0:	330c      	adds	r3, #12
 8001ca2:	623b      	str	r3, [r7, #32]
          break;
 8001ca4:	e01a      	b.n	8001cdc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	689b      	ldr	r3, [r3, #8]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d102      	bne.n	8001cb4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001cae:	2304      	movs	r3, #4
 8001cb0:	623b      	str	r3, [r7, #32]
          break;
 8001cb2:	e013      	b.n	8001cdc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	689b      	ldr	r3, [r3, #8]
 8001cb8:	2b01      	cmp	r3, #1
 8001cba:	d105      	bne.n	8001cc8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001cbc:	2308      	movs	r3, #8
 8001cbe:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	69fa      	ldr	r2, [r7, #28]
 8001cc4:	611a      	str	r2, [r3, #16]
          break;
 8001cc6:	e009      	b.n	8001cdc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001cc8:	2308      	movs	r3, #8
 8001cca:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	69fa      	ldr	r2, [r7, #28]
 8001cd0:	615a      	str	r2, [r3, #20]
          break;
 8001cd2:	e003      	b.n	8001cdc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	623b      	str	r3, [r7, #32]
          break;
 8001cd8:	e000      	b.n	8001cdc <HAL_GPIO_Init+0x130>
          break;
 8001cda:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001cdc:	69bb      	ldr	r3, [r7, #24]
 8001cde:	2bff      	cmp	r3, #255	; 0xff
 8001ce0:	d801      	bhi.n	8001ce6 <HAL_GPIO_Init+0x13a>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	e001      	b.n	8001cea <HAL_GPIO_Init+0x13e>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	3304      	adds	r3, #4
 8001cea:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001cec:	69bb      	ldr	r3, [r7, #24]
 8001cee:	2bff      	cmp	r3, #255	; 0xff
 8001cf0:	d802      	bhi.n	8001cf8 <HAL_GPIO_Init+0x14c>
 8001cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf4:	009b      	lsls	r3, r3, #2
 8001cf6:	e002      	b.n	8001cfe <HAL_GPIO_Init+0x152>
 8001cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cfa:	3b08      	subs	r3, #8
 8001cfc:	009b      	lsls	r3, r3, #2
 8001cfe:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001d00:	697b      	ldr	r3, [r7, #20]
 8001d02:	681a      	ldr	r2, [r3, #0]
 8001d04:	210f      	movs	r1, #15
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	fa01 f303 	lsl.w	r3, r1, r3
 8001d0c:	43db      	mvns	r3, r3
 8001d0e:	401a      	ands	r2, r3
 8001d10:	6a39      	ldr	r1, [r7, #32]
 8001d12:	693b      	ldr	r3, [r7, #16]
 8001d14:	fa01 f303 	lsl.w	r3, r1, r3
 8001d18:	431a      	orrs	r2, r3
 8001d1a:	697b      	ldr	r3, [r7, #20]
 8001d1c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	f000 80b1 	beq.w	8001e8e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001d2c:	4b4d      	ldr	r3, [pc, #308]	; (8001e64 <HAL_GPIO_Init+0x2b8>)
 8001d2e:	699b      	ldr	r3, [r3, #24]
 8001d30:	4a4c      	ldr	r2, [pc, #304]	; (8001e64 <HAL_GPIO_Init+0x2b8>)
 8001d32:	f043 0301 	orr.w	r3, r3, #1
 8001d36:	6193      	str	r3, [r2, #24]
 8001d38:	4b4a      	ldr	r3, [pc, #296]	; (8001e64 <HAL_GPIO_Init+0x2b8>)
 8001d3a:	699b      	ldr	r3, [r3, #24]
 8001d3c:	f003 0301 	and.w	r3, r3, #1
 8001d40:	60bb      	str	r3, [r7, #8]
 8001d42:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001d44:	4a48      	ldr	r2, [pc, #288]	; (8001e68 <HAL_GPIO_Init+0x2bc>)
 8001d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d48:	089b      	lsrs	r3, r3, #2
 8001d4a:	3302      	adds	r3, #2
 8001d4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d50:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d54:	f003 0303 	and.w	r3, r3, #3
 8001d58:	009b      	lsls	r3, r3, #2
 8001d5a:	220f      	movs	r2, #15
 8001d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d60:	43db      	mvns	r3, r3
 8001d62:	68fa      	ldr	r2, [r7, #12]
 8001d64:	4013      	ands	r3, r2
 8001d66:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	4a40      	ldr	r2, [pc, #256]	; (8001e6c <HAL_GPIO_Init+0x2c0>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d013      	beq.n	8001d98 <HAL_GPIO_Init+0x1ec>
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	4a3f      	ldr	r2, [pc, #252]	; (8001e70 <HAL_GPIO_Init+0x2c4>)
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d00d      	beq.n	8001d94 <HAL_GPIO_Init+0x1e8>
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	4a3e      	ldr	r2, [pc, #248]	; (8001e74 <HAL_GPIO_Init+0x2c8>)
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	d007      	beq.n	8001d90 <HAL_GPIO_Init+0x1e4>
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	4a3d      	ldr	r2, [pc, #244]	; (8001e78 <HAL_GPIO_Init+0x2cc>)
 8001d84:	4293      	cmp	r3, r2
 8001d86:	d101      	bne.n	8001d8c <HAL_GPIO_Init+0x1e0>
 8001d88:	2303      	movs	r3, #3
 8001d8a:	e006      	b.n	8001d9a <HAL_GPIO_Init+0x1ee>
 8001d8c:	2304      	movs	r3, #4
 8001d8e:	e004      	b.n	8001d9a <HAL_GPIO_Init+0x1ee>
 8001d90:	2302      	movs	r3, #2
 8001d92:	e002      	b.n	8001d9a <HAL_GPIO_Init+0x1ee>
 8001d94:	2301      	movs	r3, #1
 8001d96:	e000      	b.n	8001d9a <HAL_GPIO_Init+0x1ee>
 8001d98:	2300      	movs	r3, #0
 8001d9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d9c:	f002 0203 	and.w	r2, r2, #3
 8001da0:	0092      	lsls	r2, r2, #2
 8001da2:	4093      	lsls	r3, r2
 8001da4:	68fa      	ldr	r2, [r7, #12]
 8001da6:	4313      	orrs	r3, r2
 8001da8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001daa:	492f      	ldr	r1, [pc, #188]	; (8001e68 <HAL_GPIO_Init+0x2bc>)
 8001dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dae:	089b      	lsrs	r3, r3, #2
 8001db0:	3302      	adds	r3, #2
 8001db2:	68fa      	ldr	r2, [r7, #12]
 8001db4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d006      	beq.n	8001dd2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001dc4:	4b2d      	ldr	r3, [pc, #180]	; (8001e7c <HAL_GPIO_Init+0x2d0>)
 8001dc6:	689a      	ldr	r2, [r3, #8]
 8001dc8:	492c      	ldr	r1, [pc, #176]	; (8001e7c <HAL_GPIO_Init+0x2d0>)
 8001dca:	69bb      	ldr	r3, [r7, #24]
 8001dcc:	4313      	orrs	r3, r2
 8001dce:	608b      	str	r3, [r1, #8]
 8001dd0:	e006      	b.n	8001de0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001dd2:	4b2a      	ldr	r3, [pc, #168]	; (8001e7c <HAL_GPIO_Init+0x2d0>)
 8001dd4:	689a      	ldr	r2, [r3, #8]
 8001dd6:	69bb      	ldr	r3, [r7, #24]
 8001dd8:	43db      	mvns	r3, r3
 8001dda:	4928      	ldr	r1, [pc, #160]	; (8001e7c <HAL_GPIO_Init+0x2d0>)
 8001ddc:	4013      	ands	r3, r2
 8001dde:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d006      	beq.n	8001dfa <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001dec:	4b23      	ldr	r3, [pc, #140]	; (8001e7c <HAL_GPIO_Init+0x2d0>)
 8001dee:	68da      	ldr	r2, [r3, #12]
 8001df0:	4922      	ldr	r1, [pc, #136]	; (8001e7c <HAL_GPIO_Init+0x2d0>)
 8001df2:	69bb      	ldr	r3, [r7, #24]
 8001df4:	4313      	orrs	r3, r2
 8001df6:	60cb      	str	r3, [r1, #12]
 8001df8:	e006      	b.n	8001e08 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001dfa:	4b20      	ldr	r3, [pc, #128]	; (8001e7c <HAL_GPIO_Init+0x2d0>)
 8001dfc:	68da      	ldr	r2, [r3, #12]
 8001dfe:	69bb      	ldr	r3, [r7, #24]
 8001e00:	43db      	mvns	r3, r3
 8001e02:	491e      	ldr	r1, [pc, #120]	; (8001e7c <HAL_GPIO_Init+0x2d0>)
 8001e04:	4013      	ands	r3, r2
 8001e06:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d006      	beq.n	8001e22 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001e14:	4b19      	ldr	r3, [pc, #100]	; (8001e7c <HAL_GPIO_Init+0x2d0>)
 8001e16:	685a      	ldr	r2, [r3, #4]
 8001e18:	4918      	ldr	r1, [pc, #96]	; (8001e7c <HAL_GPIO_Init+0x2d0>)
 8001e1a:	69bb      	ldr	r3, [r7, #24]
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	604b      	str	r3, [r1, #4]
 8001e20:	e006      	b.n	8001e30 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001e22:	4b16      	ldr	r3, [pc, #88]	; (8001e7c <HAL_GPIO_Init+0x2d0>)
 8001e24:	685a      	ldr	r2, [r3, #4]
 8001e26:	69bb      	ldr	r3, [r7, #24]
 8001e28:	43db      	mvns	r3, r3
 8001e2a:	4914      	ldr	r1, [pc, #80]	; (8001e7c <HAL_GPIO_Init+0x2d0>)
 8001e2c:	4013      	ands	r3, r2
 8001e2e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d021      	beq.n	8001e80 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001e3c:	4b0f      	ldr	r3, [pc, #60]	; (8001e7c <HAL_GPIO_Init+0x2d0>)
 8001e3e:	681a      	ldr	r2, [r3, #0]
 8001e40:	490e      	ldr	r1, [pc, #56]	; (8001e7c <HAL_GPIO_Init+0x2d0>)
 8001e42:	69bb      	ldr	r3, [r7, #24]
 8001e44:	4313      	orrs	r3, r2
 8001e46:	600b      	str	r3, [r1, #0]
 8001e48:	e021      	b.n	8001e8e <HAL_GPIO_Init+0x2e2>
 8001e4a:	bf00      	nop
 8001e4c:	10320000 	.word	0x10320000
 8001e50:	10310000 	.word	0x10310000
 8001e54:	10220000 	.word	0x10220000
 8001e58:	10210000 	.word	0x10210000
 8001e5c:	10120000 	.word	0x10120000
 8001e60:	10110000 	.word	0x10110000
 8001e64:	40021000 	.word	0x40021000
 8001e68:	40010000 	.word	0x40010000
 8001e6c:	40010800 	.word	0x40010800
 8001e70:	40010c00 	.word	0x40010c00
 8001e74:	40011000 	.word	0x40011000
 8001e78:	40011400 	.word	0x40011400
 8001e7c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001e80:	4b0b      	ldr	r3, [pc, #44]	; (8001eb0 <HAL_GPIO_Init+0x304>)
 8001e82:	681a      	ldr	r2, [r3, #0]
 8001e84:	69bb      	ldr	r3, [r7, #24]
 8001e86:	43db      	mvns	r3, r3
 8001e88:	4909      	ldr	r1, [pc, #36]	; (8001eb0 <HAL_GPIO_Init+0x304>)
 8001e8a:	4013      	ands	r3, r2
 8001e8c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e90:	3301      	adds	r3, #1
 8001e92:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	681a      	ldr	r2, [r3, #0]
 8001e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e9a:	fa22 f303 	lsr.w	r3, r2, r3
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	f47f ae8e 	bne.w	8001bc0 <HAL_GPIO_Init+0x14>
  }
}
 8001ea4:	bf00      	nop
 8001ea6:	bf00      	nop
 8001ea8:	372c      	adds	r7, #44	; 0x2c
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bc80      	pop	{r7}
 8001eae:	4770      	bx	lr
 8001eb0:	40010400 	.word	0x40010400

08001eb4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b083      	sub	sp, #12
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
 8001ebc:	460b      	mov	r3, r1
 8001ebe:	807b      	strh	r3, [r7, #2]
 8001ec0:	4613      	mov	r3, r2
 8001ec2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ec4:	787b      	ldrb	r3, [r7, #1]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d003      	beq.n	8001ed2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001eca:	887a      	ldrh	r2, [r7, #2]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001ed0:	e003      	b.n	8001eda <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001ed2:	887b      	ldrh	r3, [r7, #2]
 8001ed4:	041a      	lsls	r2, r3, #16
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	611a      	str	r2, [r3, #16]
}
 8001eda:	bf00      	nop
 8001edc:	370c      	adds	r7, #12
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bc80      	pop	{r7}
 8001ee2:	4770      	bx	lr

08001ee4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b084      	sub	sp, #16
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d101      	bne.n	8001ef6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	e12b      	b.n	800214e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001efc:	b2db      	uxtb	r3, r3
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d106      	bne.n	8001f10 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2200      	movs	r2, #0
 8001f06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001f0a:	6878      	ldr	r0, [r7, #4]
 8001f0c:	f7fe ff9c 	bl	8000e48 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2224      	movs	r2, #36	; 0x24
 8001f14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	681a      	ldr	r2, [r3, #0]
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f022 0201 	bic.w	r2, r2, #1
 8001f26:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	681a      	ldr	r2, [r3, #0]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001f36:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	681a      	ldr	r2, [r3, #0]
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001f46:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001f48:	f001 fbf0 	bl	800372c <HAL_RCC_GetPCLK1Freq>
 8001f4c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	4a81      	ldr	r2, [pc, #516]	; (8002158 <HAL_I2C_Init+0x274>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d807      	bhi.n	8001f68 <HAL_I2C_Init+0x84>
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	4a80      	ldr	r2, [pc, #512]	; (800215c <HAL_I2C_Init+0x278>)
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	bf94      	ite	ls
 8001f60:	2301      	movls	r3, #1
 8001f62:	2300      	movhi	r3, #0
 8001f64:	b2db      	uxtb	r3, r3
 8001f66:	e006      	b.n	8001f76 <HAL_I2C_Init+0x92>
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	4a7d      	ldr	r2, [pc, #500]	; (8002160 <HAL_I2C_Init+0x27c>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	bf94      	ite	ls
 8001f70:	2301      	movls	r3, #1
 8001f72:	2300      	movhi	r3, #0
 8001f74:	b2db      	uxtb	r3, r3
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d001      	beq.n	8001f7e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	e0e7      	b.n	800214e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	4a78      	ldr	r2, [pc, #480]	; (8002164 <HAL_I2C_Init+0x280>)
 8001f82:	fba2 2303 	umull	r2, r3, r2, r3
 8001f86:	0c9b      	lsrs	r3, r3, #18
 8001f88:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	68ba      	ldr	r2, [r7, #8]
 8001f9a:	430a      	orrs	r2, r1
 8001f9c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	6a1b      	ldr	r3, [r3, #32]
 8001fa4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	4a6a      	ldr	r2, [pc, #424]	; (8002158 <HAL_I2C_Init+0x274>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d802      	bhi.n	8001fb8 <HAL_I2C_Init+0xd4>
 8001fb2:	68bb      	ldr	r3, [r7, #8]
 8001fb4:	3301      	adds	r3, #1
 8001fb6:	e009      	b.n	8001fcc <HAL_I2C_Init+0xe8>
 8001fb8:	68bb      	ldr	r3, [r7, #8]
 8001fba:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001fbe:	fb02 f303 	mul.w	r3, r2, r3
 8001fc2:	4a69      	ldr	r2, [pc, #420]	; (8002168 <HAL_I2C_Init+0x284>)
 8001fc4:	fba2 2303 	umull	r2, r3, r2, r3
 8001fc8:	099b      	lsrs	r3, r3, #6
 8001fca:	3301      	adds	r3, #1
 8001fcc:	687a      	ldr	r2, [r7, #4]
 8001fce:	6812      	ldr	r2, [r2, #0]
 8001fd0:	430b      	orrs	r3, r1
 8001fd2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	69db      	ldr	r3, [r3, #28]
 8001fda:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001fde:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	495c      	ldr	r1, [pc, #368]	; (8002158 <HAL_I2C_Init+0x274>)
 8001fe8:	428b      	cmp	r3, r1
 8001fea:	d819      	bhi.n	8002020 <HAL_I2C_Init+0x13c>
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	1e59      	subs	r1, r3, #1
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	005b      	lsls	r3, r3, #1
 8001ff6:	fbb1 f3f3 	udiv	r3, r1, r3
 8001ffa:	1c59      	adds	r1, r3, #1
 8001ffc:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002000:	400b      	ands	r3, r1
 8002002:	2b00      	cmp	r3, #0
 8002004:	d00a      	beq.n	800201c <HAL_I2C_Init+0x138>
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	1e59      	subs	r1, r3, #1
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	005b      	lsls	r3, r3, #1
 8002010:	fbb1 f3f3 	udiv	r3, r1, r3
 8002014:	3301      	adds	r3, #1
 8002016:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800201a:	e051      	b.n	80020c0 <HAL_I2C_Init+0x1dc>
 800201c:	2304      	movs	r3, #4
 800201e:	e04f      	b.n	80020c0 <HAL_I2C_Init+0x1dc>
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	689b      	ldr	r3, [r3, #8]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d111      	bne.n	800204c <HAL_I2C_Init+0x168>
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	1e58      	subs	r0, r3, #1
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6859      	ldr	r1, [r3, #4]
 8002030:	460b      	mov	r3, r1
 8002032:	005b      	lsls	r3, r3, #1
 8002034:	440b      	add	r3, r1
 8002036:	fbb0 f3f3 	udiv	r3, r0, r3
 800203a:	3301      	adds	r3, #1
 800203c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002040:	2b00      	cmp	r3, #0
 8002042:	bf0c      	ite	eq
 8002044:	2301      	moveq	r3, #1
 8002046:	2300      	movne	r3, #0
 8002048:	b2db      	uxtb	r3, r3
 800204a:	e012      	b.n	8002072 <HAL_I2C_Init+0x18e>
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	1e58      	subs	r0, r3, #1
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6859      	ldr	r1, [r3, #4]
 8002054:	460b      	mov	r3, r1
 8002056:	009b      	lsls	r3, r3, #2
 8002058:	440b      	add	r3, r1
 800205a:	0099      	lsls	r1, r3, #2
 800205c:	440b      	add	r3, r1
 800205e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002062:	3301      	adds	r3, #1
 8002064:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002068:	2b00      	cmp	r3, #0
 800206a:	bf0c      	ite	eq
 800206c:	2301      	moveq	r3, #1
 800206e:	2300      	movne	r3, #0
 8002070:	b2db      	uxtb	r3, r3
 8002072:	2b00      	cmp	r3, #0
 8002074:	d001      	beq.n	800207a <HAL_I2C_Init+0x196>
 8002076:	2301      	movs	r3, #1
 8002078:	e022      	b.n	80020c0 <HAL_I2C_Init+0x1dc>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	689b      	ldr	r3, [r3, #8]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d10e      	bne.n	80020a0 <HAL_I2C_Init+0x1bc>
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	1e58      	subs	r0, r3, #1
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6859      	ldr	r1, [r3, #4]
 800208a:	460b      	mov	r3, r1
 800208c:	005b      	lsls	r3, r3, #1
 800208e:	440b      	add	r3, r1
 8002090:	fbb0 f3f3 	udiv	r3, r0, r3
 8002094:	3301      	adds	r3, #1
 8002096:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800209a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800209e:	e00f      	b.n	80020c0 <HAL_I2C_Init+0x1dc>
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	1e58      	subs	r0, r3, #1
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6859      	ldr	r1, [r3, #4]
 80020a8:	460b      	mov	r3, r1
 80020aa:	009b      	lsls	r3, r3, #2
 80020ac:	440b      	add	r3, r1
 80020ae:	0099      	lsls	r1, r3, #2
 80020b0:	440b      	add	r3, r1
 80020b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80020b6:	3301      	adds	r3, #1
 80020b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020bc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80020c0:	6879      	ldr	r1, [r7, #4]
 80020c2:	6809      	ldr	r1, [r1, #0]
 80020c4:	4313      	orrs	r3, r2
 80020c6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	69da      	ldr	r2, [r3, #28]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6a1b      	ldr	r3, [r3, #32]
 80020da:	431a      	orrs	r2, r3
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	430a      	orrs	r2, r1
 80020e2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	689b      	ldr	r3, [r3, #8]
 80020ea:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80020ee:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80020f2:	687a      	ldr	r2, [r7, #4]
 80020f4:	6911      	ldr	r1, [r2, #16]
 80020f6:	687a      	ldr	r2, [r7, #4]
 80020f8:	68d2      	ldr	r2, [r2, #12]
 80020fa:	4311      	orrs	r1, r2
 80020fc:	687a      	ldr	r2, [r7, #4]
 80020fe:	6812      	ldr	r2, [r2, #0]
 8002100:	430b      	orrs	r3, r1
 8002102:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	68db      	ldr	r3, [r3, #12]
 800210a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	695a      	ldr	r2, [r3, #20]
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	699b      	ldr	r3, [r3, #24]
 8002116:	431a      	orrs	r2, r3
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	430a      	orrs	r2, r1
 800211e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	681a      	ldr	r2, [r3, #0]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f042 0201 	orr.w	r2, r2, #1
 800212e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2200      	movs	r2, #0
 8002134:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2220      	movs	r2, #32
 800213a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2200      	movs	r2, #0
 8002142:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2200      	movs	r2, #0
 8002148:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800214c:	2300      	movs	r3, #0
}
 800214e:	4618      	mov	r0, r3
 8002150:	3710      	adds	r7, #16
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}
 8002156:	bf00      	nop
 8002158:	000186a0 	.word	0x000186a0
 800215c:	001e847f 	.word	0x001e847f
 8002160:	003d08ff 	.word	0x003d08ff
 8002164:	431bde83 	.word	0x431bde83
 8002168:	10624dd3 	.word	0x10624dd3

0800216c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b088      	sub	sp, #32
 8002170:	af02      	add	r7, sp, #8
 8002172:	60f8      	str	r0, [r7, #12]
 8002174:	4608      	mov	r0, r1
 8002176:	4611      	mov	r1, r2
 8002178:	461a      	mov	r2, r3
 800217a:	4603      	mov	r3, r0
 800217c:	817b      	strh	r3, [r7, #10]
 800217e:	460b      	mov	r3, r1
 8002180:	813b      	strh	r3, [r7, #8]
 8002182:	4613      	mov	r3, r2
 8002184:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002186:	f7ff f9e7 	bl	8001558 <HAL_GetTick>
 800218a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002192:	b2db      	uxtb	r3, r3
 8002194:	2b20      	cmp	r3, #32
 8002196:	f040 80d9 	bne.w	800234c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800219a:	697b      	ldr	r3, [r7, #20]
 800219c:	9300      	str	r3, [sp, #0]
 800219e:	2319      	movs	r3, #25
 80021a0:	2201      	movs	r2, #1
 80021a2:	496d      	ldr	r1, [pc, #436]	; (8002358 <HAL_I2C_Mem_Write+0x1ec>)
 80021a4:	68f8      	ldr	r0, [r7, #12]
 80021a6:	f000 fcc1 	bl	8002b2c <I2C_WaitOnFlagUntilTimeout>
 80021aa:	4603      	mov	r3, r0
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d001      	beq.n	80021b4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80021b0:	2302      	movs	r3, #2
 80021b2:	e0cc      	b.n	800234e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021ba:	2b01      	cmp	r3, #1
 80021bc:	d101      	bne.n	80021c2 <HAL_I2C_Mem_Write+0x56>
 80021be:	2302      	movs	r3, #2
 80021c0:	e0c5      	b.n	800234e <HAL_I2C_Mem_Write+0x1e2>
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	2201      	movs	r2, #1
 80021c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f003 0301 	and.w	r3, r3, #1
 80021d4:	2b01      	cmp	r3, #1
 80021d6:	d007      	beq.n	80021e8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	681a      	ldr	r2, [r3, #0]
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f042 0201 	orr.w	r2, r2, #1
 80021e6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	681a      	ldr	r2, [r3, #0]
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80021f6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	2221      	movs	r2, #33	; 0x21
 80021fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	2240      	movs	r2, #64	; 0x40
 8002204:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	2200      	movs	r2, #0
 800220c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	6a3a      	ldr	r2, [r7, #32]
 8002212:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002218:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800221e:	b29a      	uxth	r2, r3
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	4a4d      	ldr	r2, [pc, #308]	; (800235c <HAL_I2C_Mem_Write+0x1f0>)
 8002228:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800222a:	88f8      	ldrh	r0, [r7, #6]
 800222c:	893a      	ldrh	r2, [r7, #8]
 800222e:	8979      	ldrh	r1, [r7, #10]
 8002230:	697b      	ldr	r3, [r7, #20]
 8002232:	9301      	str	r3, [sp, #4]
 8002234:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002236:	9300      	str	r3, [sp, #0]
 8002238:	4603      	mov	r3, r0
 800223a:	68f8      	ldr	r0, [r7, #12]
 800223c:	f000 faf8 	bl	8002830 <I2C_RequestMemoryWrite>
 8002240:	4603      	mov	r3, r0
 8002242:	2b00      	cmp	r3, #0
 8002244:	d052      	beq.n	80022ec <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002246:	2301      	movs	r3, #1
 8002248:	e081      	b.n	800234e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800224a:	697a      	ldr	r2, [r7, #20]
 800224c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800224e:	68f8      	ldr	r0, [r7, #12]
 8002250:	f000 fd86 	bl	8002d60 <I2C_WaitOnTXEFlagUntilTimeout>
 8002254:	4603      	mov	r3, r0
 8002256:	2b00      	cmp	r3, #0
 8002258:	d00d      	beq.n	8002276 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800225e:	2b04      	cmp	r3, #4
 8002260:	d107      	bne.n	8002272 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	681a      	ldr	r2, [r3, #0]
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002270:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002272:	2301      	movs	r3, #1
 8002274:	e06b      	b.n	800234e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800227a:	781a      	ldrb	r2, [r3, #0]
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002286:	1c5a      	adds	r2, r3, #1
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002290:	3b01      	subs	r3, #1
 8002292:	b29a      	uxth	r2, r3
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800229c:	b29b      	uxth	r3, r3
 800229e:	3b01      	subs	r3, #1
 80022a0:	b29a      	uxth	r2, r3
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	695b      	ldr	r3, [r3, #20]
 80022ac:	f003 0304 	and.w	r3, r3, #4
 80022b0:	2b04      	cmp	r3, #4
 80022b2:	d11b      	bne.n	80022ec <HAL_I2C_Mem_Write+0x180>
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d017      	beq.n	80022ec <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022c0:	781a      	ldrb	r2, [r3, #0]
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022cc:	1c5a      	adds	r2, r3, #1
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022d6:	3b01      	subs	r3, #1
 80022d8:	b29a      	uxth	r2, r3
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022e2:	b29b      	uxth	r3, r3
 80022e4:	3b01      	subs	r3, #1
 80022e6:	b29a      	uxth	r2, r3
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d1aa      	bne.n	800224a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022f4:	697a      	ldr	r2, [r7, #20]
 80022f6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80022f8:	68f8      	ldr	r0, [r7, #12]
 80022fa:	f000 fd79 	bl	8002df0 <I2C_WaitOnBTFFlagUntilTimeout>
 80022fe:	4603      	mov	r3, r0
 8002300:	2b00      	cmp	r3, #0
 8002302:	d00d      	beq.n	8002320 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002308:	2b04      	cmp	r3, #4
 800230a:	d107      	bne.n	800231c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	681a      	ldr	r2, [r3, #0]
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800231a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800231c:	2301      	movs	r3, #1
 800231e:	e016      	b.n	800234e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	681a      	ldr	r2, [r3, #0]
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800232e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	2220      	movs	r2, #32
 8002334:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	2200      	movs	r2, #0
 800233c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	2200      	movs	r2, #0
 8002344:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002348:	2300      	movs	r3, #0
 800234a:	e000      	b.n	800234e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800234c:	2302      	movs	r3, #2
  }
}
 800234e:	4618      	mov	r0, r3
 8002350:	3718      	adds	r7, #24
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}
 8002356:	bf00      	nop
 8002358:	00100002 	.word	0x00100002
 800235c:	ffff0000 	.word	0xffff0000

08002360 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b08c      	sub	sp, #48	; 0x30
 8002364:	af02      	add	r7, sp, #8
 8002366:	60f8      	str	r0, [r7, #12]
 8002368:	4608      	mov	r0, r1
 800236a:	4611      	mov	r1, r2
 800236c:	461a      	mov	r2, r3
 800236e:	4603      	mov	r3, r0
 8002370:	817b      	strh	r3, [r7, #10]
 8002372:	460b      	mov	r3, r1
 8002374:	813b      	strh	r3, [r7, #8]
 8002376:	4613      	mov	r3, r2
 8002378:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800237a:	2300      	movs	r3, #0
 800237c:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800237e:	f7ff f8eb 	bl	8001558 <HAL_GetTick>
 8002382:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800238a:	b2db      	uxtb	r3, r3
 800238c:	2b20      	cmp	r3, #32
 800238e:	f040 8244 	bne.w	800281a <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002394:	9300      	str	r3, [sp, #0]
 8002396:	2319      	movs	r3, #25
 8002398:	2201      	movs	r2, #1
 800239a:	4982      	ldr	r1, [pc, #520]	; (80025a4 <HAL_I2C_Mem_Read+0x244>)
 800239c:	68f8      	ldr	r0, [r7, #12]
 800239e:	f000 fbc5 	bl	8002b2c <I2C_WaitOnFlagUntilTimeout>
 80023a2:	4603      	mov	r3, r0
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d001      	beq.n	80023ac <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 80023a8:	2302      	movs	r3, #2
 80023aa:	e237      	b.n	800281c <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023b2:	2b01      	cmp	r3, #1
 80023b4:	d101      	bne.n	80023ba <HAL_I2C_Mem_Read+0x5a>
 80023b6:	2302      	movs	r3, #2
 80023b8:	e230      	b.n	800281c <HAL_I2C_Mem_Read+0x4bc>
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	2201      	movs	r2, #1
 80023be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f003 0301 	and.w	r3, r3, #1
 80023cc:	2b01      	cmp	r3, #1
 80023ce:	d007      	beq.n	80023e0 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f042 0201 	orr.w	r2, r2, #1
 80023de:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	681a      	ldr	r2, [r3, #0]
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80023ee:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	2222      	movs	r2, #34	; 0x22
 80023f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	2240      	movs	r2, #64	; 0x40
 80023fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	2200      	movs	r2, #0
 8002404:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800240a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002410:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002416:	b29a      	uxth	r2, r3
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	4a62      	ldr	r2, [pc, #392]	; (80025a8 <HAL_I2C_Mem_Read+0x248>)
 8002420:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002422:	88f8      	ldrh	r0, [r7, #6]
 8002424:	893a      	ldrh	r2, [r7, #8]
 8002426:	8979      	ldrh	r1, [r7, #10]
 8002428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800242a:	9301      	str	r3, [sp, #4]
 800242c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800242e:	9300      	str	r3, [sp, #0]
 8002430:	4603      	mov	r3, r0
 8002432:	68f8      	ldr	r0, [r7, #12]
 8002434:	f000 fa92 	bl	800295c <I2C_RequestMemoryRead>
 8002438:	4603      	mov	r3, r0
 800243a:	2b00      	cmp	r3, #0
 800243c:	d001      	beq.n	8002442 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 800243e:	2301      	movs	r3, #1
 8002440:	e1ec      	b.n	800281c <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002446:	2b00      	cmp	r3, #0
 8002448:	d113      	bne.n	8002472 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800244a:	2300      	movs	r3, #0
 800244c:	61fb      	str	r3, [r7, #28]
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	695b      	ldr	r3, [r3, #20]
 8002454:	61fb      	str	r3, [r7, #28]
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	699b      	ldr	r3, [r3, #24]
 800245c:	61fb      	str	r3, [r7, #28]
 800245e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	681a      	ldr	r2, [r3, #0]
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800246e:	601a      	str	r2, [r3, #0]
 8002470:	e1c0      	b.n	80027f4 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002476:	2b01      	cmp	r3, #1
 8002478:	d11e      	bne.n	80024b8 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	681a      	ldr	r2, [r3, #0]
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002488:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800248a:	b672      	cpsid	i
}
 800248c:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800248e:	2300      	movs	r3, #0
 8002490:	61bb      	str	r3, [r7, #24]
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	695b      	ldr	r3, [r3, #20]
 8002498:	61bb      	str	r3, [r7, #24]
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	699b      	ldr	r3, [r3, #24]
 80024a0:	61bb      	str	r3, [r7, #24]
 80024a2:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	681a      	ldr	r2, [r3, #0]
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024b2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80024b4:	b662      	cpsie	i
}
 80024b6:	e035      	b.n	8002524 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024bc:	2b02      	cmp	r3, #2
 80024be:	d11e      	bne.n	80024fe <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	681a      	ldr	r2, [r3, #0]
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80024ce:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80024d0:	b672      	cpsid	i
}
 80024d2:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024d4:	2300      	movs	r3, #0
 80024d6:	617b      	str	r3, [r7, #20]
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	695b      	ldr	r3, [r3, #20]
 80024de:	617b      	str	r3, [r7, #20]
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	699b      	ldr	r3, [r3, #24]
 80024e6:	617b      	str	r3, [r7, #20]
 80024e8:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	681a      	ldr	r2, [r3, #0]
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80024f8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80024fa:	b662      	cpsie	i
}
 80024fc:	e012      	b.n	8002524 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	681a      	ldr	r2, [r3, #0]
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800250c:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800250e:	2300      	movs	r3, #0
 8002510:	613b      	str	r3, [r7, #16]
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	695b      	ldr	r3, [r3, #20]
 8002518:	613b      	str	r3, [r7, #16]
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	699b      	ldr	r3, [r3, #24]
 8002520:	613b      	str	r3, [r7, #16]
 8002522:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002524:	e166      	b.n	80027f4 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800252a:	2b03      	cmp	r3, #3
 800252c:	f200 811f 	bhi.w	800276e <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002534:	2b01      	cmp	r3, #1
 8002536:	d123      	bne.n	8002580 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002538:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800253a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800253c:	68f8      	ldr	r0, [r7, #12]
 800253e:	f000 fc9f 	bl	8002e80 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002542:	4603      	mov	r3, r0
 8002544:	2b00      	cmp	r3, #0
 8002546:	d001      	beq.n	800254c <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8002548:	2301      	movs	r3, #1
 800254a:	e167      	b.n	800281c <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	691a      	ldr	r2, [r3, #16]
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002556:	b2d2      	uxtb	r2, r2
 8002558:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800255e:	1c5a      	adds	r2, r3, #1
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002568:	3b01      	subs	r3, #1
 800256a:	b29a      	uxth	r2, r3
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002574:	b29b      	uxth	r3, r3
 8002576:	3b01      	subs	r3, #1
 8002578:	b29a      	uxth	r2, r3
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800257e:	e139      	b.n	80027f4 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002584:	2b02      	cmp	r3, #2
 8002586:	d152      	bne.n	800262e <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800258a:	9300      	str	r3, [sp, #0]
 800258c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800258e:	2200      	movs	r2, #0
 8002590:	4906      	ldr	r1, [pc, #24]	; (80025ac <HAL_I2C_Mem_Read+0x24c>)
 8002592:	68f8      	ldr	r0, [r7, #12]
 8002594:	f000 faca 	bl	8002b2c <I2C_WaitOnFlagUntilTimeout>
 8002598:	4603      	mov	r3, r0
 800259a:	2b00      	cmp	r3, #0
 800259c:	d008      	beq.n	80025b0 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 800259e:	2301      	movs	r3, #1
 80025a0:	e13c      	b.n	800281c <HAL_I2C_Mem_Read+0x4bc>
 80025a2:	bf00      	nop
 80025a4:	00100002 	.word	0x00100002
 80025a8:	ffff0000 	.word	0xffff0000
 80025ac:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80025b0:	b672      	cpsid	i
}
 80025b2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	681a      	ldr	r2, [r3, #0]
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025c2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	691a      	ldr	r2, [r3, #16]
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ce:	b2d2      	uxtb	r2, r2
 80025d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d6:	1c5a      	adds	r2, r3, #1
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025e0:	3b01      	subs	r3, #1
 80025e2:	b29a      	uxth	r2, r3
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025ec:	b29b      	uxth	r3, r3
 80025ee:	3b01      	subs	r3, #1
 80025f0:	b29a      	uxth	r2, r3
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80025f6:	b662      	cpsie	i
}
 80025f8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	691a      	ldr	r2, [r3, #16]
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002604:	b2d2      	uxtb	r2, r2
 8002606:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800260c:	1c5a      	adds	r2, r3, #1
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002616:	3b01      	subs	r3, #1
 8002618:	b29a      	uxth	r2, r3
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002622:	b29b      	uxth	r3, r3
 8002624:	3b01      	subs	r3, #1
 8002626:	b29a      	uxth	r2, r3
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800262c:	e0e2      	b.n	80027f4 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800262e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002630:	9300      	str	r3, [sp, #0]
 8002632:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002634:	2200      	movs	r2, #0
 8002636:	497b      	ldr	r1, [pc, #492]	; (8002824 <HAL_I2C_Mem_Read+0x4c4>)
 8002638:	68f8      	ldr	r0, [r7, #12]
 800263a:	f000 fa77 	bl	8002b2c <I2C_WaitOnFlagUntilTimeout>
 800263e:	4603      	mov	r3, r0
 8002640:	2b00      	cmp	r3, #0
 8002642:	d001      	beq.n	8002648 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8002644:	2301      	movs	r3, #1
 8002646:	e0e9      	b.n	800281c <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	681a      	ldr	r2, [r3, #0]
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002656:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002658:	b672      	cpsid	i
}
 800265a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	691a      	ldr	r2, [r3, #16]
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002666:	b2d2      	uxtb	r2, r2
 8002668:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800266e:	1c5a      	adds	r2, r3, #1
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002678:	3b01      	subs	r3, #1
 800267a:	b29a      	uxth	r2, r3
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002684:	b29b      	uxth	r3, r3
 8002686:	3b01      	subs	r3, #1
 8002688:	b29a      	uxth	r2, r3
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800268e:	4b66      	ldr	r3, [pc, #408]	; (8002828 <HAL_I2C_Mem_Read+0x4c8>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	08db      	lsrs	r3, r3, #3
 8002694:	4a65      	ldr	r2, [pc, #404]	; (800282c <HAL_I2C_Mem_Read+0x4cc>)
 8002696:	fba2 2303 	umull	r2, r3, r2, r3
 800269a:	0a1a      	lsrs	r2, r3, #8
 800269c:	4613      	mov	r3, r2
 800269e:	009b      	lsls	r3, r3, #2
 80026a0:	4413      	add	r3, r2
 80026a2:	00da      	lsls	r2, r3, #3
 80026a4:	1ad3      	subs	r3, r2, r3
 80026a6:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80026a8:	6a3b      	ldr	r3, [r7, #32]
 80026aa:	3b01      	subs	r3, #1
 80026ac:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80026ae:	6a3b      	ldr	r3, [r7, #32]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d118      	bne.n	80026e6 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	2200      	movs	r2, #0
 80026b8:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	2220      	movs	r2, #32
 80026be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	2200      	movs	r2, #0
 80026c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ce:	f043 0220 	orr.w	r2, r3, #32
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80026d6:	b662      	cpsie	i
}
 80026d8:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	2200      	movs	r2, #0
 80026de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 80026e2:	2301      	movs	r3, #1
 80026e4:	e09a      	b.n	800281c <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	695b      	ldr	r3, [r3, #20]
 80026ec:	f003 0304 	and.w	r3, r3, #4
 80026f0:	2b04      	cmp	r3, #4
 80026f2:	d1d9      	bne.n	80026a8 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	681a      	ldr	r2, [r3, #0]
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002702:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	691a      	ldr	r2, [r3, #16]
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800270e:	b2d2      	uxtb	r2, r2
 8002710:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002716:	1c5a      	adds	r2, r3, #1
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002720:	3b01      	subs	r3, #1
 8002722:	b29a      	uxth	r2, r3
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800272c:	b29b      	uxth	r3, r3
 800272e:	3b01      	subs	r3, #1
 8002730:	b29a      	uxth	r2, r3
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002736:	b662      	cpsie	i
}
 8002738:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	691a      	ldr	r2, [r3, #16]
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002744:	b2d2      	uxtb	r2, r2
 8002746:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800274c:	1c5a      	adds	r2, r3, #1
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002756:	3b01      	subs	r3, #1
 8002758:	b29a      	uxth	r2, r3
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002762:	b29b      	uxth	r3, r3
 8002764:	3b01      	subs	r3, #1
 8002766:	b29a      	uxth	r2, r3
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800276c:	e042      	b.n	80027f4 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800276e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002770:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002772:	68f8      	ldr	r0, [r7, #12]
 8002774:	f000 fb84 	bl	8002e80 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002778:	4603      	mov	r3, r0
 800277a:	2b00      	cmp	r3, #0
 800277c:	d001      	beq.n	8002782 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 800277e:	2301      	movs	r3, #1
 8002780:	e04c      	b.n	800281c <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	691a      	ldr	r2, [r3, #16]
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800278c:	b2d2      	uxtb	r2, r2
 800278e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002794:	1c5a      	adds	r2, r3, #1
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800279e:	3b01      	subs	r3, #1
 80027a0:	b29a      	uxth	r2, r3
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027aa:	b29b      	uxth	r3, r3
 80027ac:	3b01      	subs	r3, #1
 80027ae:	b29a      	uxth	r2, r3
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	695b      	ldr	r3, [r3, #20]
 80027ba:	f003 0304 	and.w	r3, r3, #4
 80027be:	2b04      	cmp	r3, #4
 80027c0:	d118      	bne.n	80027f4 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	691a      	ldr	r2, [r3, #16]
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027cc:	b2d2      	uxtb	r2, r2
 80027ce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d4:	1c5a      	adds	r2, r3, #1
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027de:	3b01      	subs	r3, #1
 80027e0:	b29a      	uxth	r2, r3
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027ea:	b29b      	uxth	r3, r3
 80027ec:	3b01      	subs	r3, #1
 80027ee:	b29a      	uxth	r2, r3
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	f47f ae94 	bne.w	8002526 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	2220      	movs	r2, #32
 8002802:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	2200      	movs	r2, #0
 800280a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	2200      	movs	r2, #0
 8002812:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002816:	2300      	movs	r3, #0
 8002818:	e000      	b.n	800281c <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 800281a:	2302      	movs	r3, #2
  }
}
 800281c:	4618      	mov	r0, r3
 800281e:	3728      	adds	r7, #40	; 0x28
 8002820:	46bd      	mov	sp, r7
 8002822:	bd80      	pop	{r7, pc}
 8002824:	00010004 	.word	0x00010004
 8002828:	20000000 	.word	0x20000000
 800282c:	14f8b589 	.word	0x14f8b589

08002830 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b088      	sub	sp, #32
 8002834:	af02      	add	r7, sp, #8
 8002836:	60f8      	str	r0, [r7, #12]
 8002838:	4608      	mov	r0, r1
 800283a:	4611      	mov	r1, r2
 800283c:	461a      	mov	r2, r3
 800283e:	4603      	mov	r3, r0
 8002840:	817b      	strh	r3, [r7, #10]
 8002842:	460b      	mov	r3, r1
 8002844:	813b      	strh	r3, [r7, #8]
 8002846:	4613      	mov	r3, r2
 8002848:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	681a      	ldr	r2, [r3, #0]
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002858:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800285a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800285c:	9300      	str	r3, [sp, #0]
 800285e:	6a3b      	ldr	r3, [r7, #32]
 8002860:	2200      	movs	r2, #0
 8002862:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002866:	68f8      	ldr	r0, [r7, #12]
 8002868:	f000 f960 	bl	8002b2c <I2C_WaitOnFlagUntilTimeout>
 800286c:	4603      	mov	r3, r0
 800286e:	2b00      	cmp	r3, #0
 8002870:	d00d      	beq.n	800288e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800287c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002880:	d103      	bne.n	800288a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002888:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800288a:	2303      	movs	r3, #3
 800288c:	e05f      	b.n	800294e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800288e:	897b      	ldrh	r3, [r7, #10]
 8002890:	b2db      	uxtb	r3, r3
 8002892:	461a      	mov	r2, r3
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800289c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800289e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a0:	6a3a      	ldr	r2, [r7, #32]
 80028a2:	492d      	ldr	r1, [pc, #180]	; (8002958 <I2C_RequestMemoryWrite+0x128>)
 80028a4:	68f8      	ldr	r0, [r7, #12]
 80028a6:	f000 f9bb 	bl	8002c20 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80028aa:	4603      	mov	r3, r0
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d001      	beq.n	80028b4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80028b0:	2301      	movs	r3, #1
 80028b2:	e04c      	b.n	800294e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028b4:	2300      	movs	r3, #0
 80028b6:	617b      	str	r3, [r7, #20]
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	695b      	ldr	r3, [r3, #20]
 80028be:	617b      	str	r3, [r7, #20]
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	699b      	ldr	r3, [r3, #24]
 80028c6:	617b      	str	r3, [r7, #20]
 80028c8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80028ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028cc:	6a39      	ldr	r1, [r7, #32]
 80028ce:	68f8      	ldr	r0, [r7, #12]
 80028d0:	f000 fa46 	bl	8002d60 <I2C_WaitOnTXEFlagUntilTimeout>
 80028d4:	4603      	mov	r3, r0
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d00d      	beq.n	80028f6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028de:	2b04      	cmp	r3, #4
 80028e0:	d107      	bne.n	80028f2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	681a      	ldr	r2, [r3, #0]
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028f0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80028f2:	2301      	movs	r3, #1
 80028f4:	e02b      	b.n	800294e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80028f6:	88fb      	ldrh	r3, [r7, #6]
 80028f8:	2b01      	cmp	r3, #1
 80028fa:	d105      	bne.n	8002908 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80028fc:	893b      	ldrh	r3, [r7, #8]
 80028fe:	b2da      	uxtb	r2, r3
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	611a      	str	r2, [r3, #16]
 8002906:	e021      	b.n	800294c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002908:	893b      	ldrh	r3, [r7, #8]
 800290a:	0a1b      	lsrs	r3, r3, #8
 800290c:	b29b      	uxth	r3, r3
 800290e:	b2da      	uxtb	r2, r3
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002916:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002918:	6a39      	ldr	r1, [r7, #32]
 800291a:	68f8      	ldr	r0, [r7, #12]
 800291c:	f000 fa20 	bl	8002d60 <I2C_WaitOnTXEFlagUntilTimeout>
 8002920:	4603      	mov	r3, r0
 8002922:	2b00      	cmp	r3, #0
 8002924:	d00d      	beq.n	8002942 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800292a:	2b04      	cmp	r3, #4
 800292c:	d107      	bne.n	800293e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	681a      	ldr	r2, [r3, #0]
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800293c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800293e:	2301      	movs	r3, #1
 8002940:	e005      	b.n	800294e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002942:	893b      	ldrh	r3, [r7, #8]
 8002944:	b2da      	uxtb	r2, r3
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800294c:	2300      	movs	r3, #0
}
 800294e:	4618      	mov	r0, r3
 8002950:	3718      	adds	r7, #24
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}
 8002956:	bf00      	nop
 8002958:	00010002 	.word	0x00010002

0800295c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b088      	sub	sp, #32
 8002960:	af02      	add	r7, sp, #8
 8002962:	60f8      	str	r0, [r7, #12]
 8002964:	4608      	mov	r0, r1
 8002966:	4611      	mov	r1, r2
 8002968:	461a      	mov	r2, r3
 800296a:	4603      	mov	r3, r0
 800296c:	817b      	strh	r3, [r7, #10]
 800296e:	460b      	mov	r3, r1
 8002970:	813b      	strh	r3, [r7, #8]
 8002972:	4613      	mov	r3, r2
 8002974:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	681a      	ldr	r2, [r3, #0]
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002984:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	681a      	ldr	r2, [r3, #0]
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002994:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002998:	9300      	str	r3, [sp, #0]
 800299a:	6a3b      	ldr	r3, [r7, #32]
 800299c:	2200      	movs	r2, #0
 800299e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80029a2:	68f8      	ldr	r0, [r7, #12]
 80029a4:	f000 f8c2 	bl	8002b2c <I2C_WaitOnFlagUntilTimeout>
 80029a8:	4603      	mov	r3, r0
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d00d      	beq.n	80029ca <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80029bc:	d103      	bne.n	80029c6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80029c4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80029c6:	2303      	movs	r3, #3
 80029c8:	e0aa      	b.n	8002b20 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80029ca:	897b      	ldrh	r3, [r7, #10]
 80029cc:	b2db      	uxtb	r3, r3
 80029ce:	461a      	mov	r2, r3
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80029d8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80029da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029dc:	6a3a      	ldr	r2, [r7, #32]
 80029de:	4952      	ldr	r1, [pc, #328]	; (8002b28 <I2C_RequestMemoryRead+0x1cc>)
 80029e0:	68f8      	ldr	r0, [r7, #12]
 80029e2:	f000 f91d 	bl	8002c20 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80029e6:	4603      	mov	r3, r0
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d001      	beq.n	80029f0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80029ec:	2301      	movs	r3, #1
 80029ee:	e097      	b.n	8002b20 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029f0:	2300      	movs	r3, #0
 80029f2:	617b      	str	r3, [r7, #20]
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	695b      	ldr	r3, [r3, #20]
 80029fa:	617b      	str	r3, [r7, #20]
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	699b      	ldr	r3, [r3, #24]
 8002a02:	617b      	str	r3, [r7, #20]
 8002a04:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a08:	6a39      	ldr	r1, [r7, #32]
 8002a0a:	68f8      	ldr	r0, [r7, #12]
 8002a0c:	f000 f9a8 	bl	8002d60 <I2C_WaitOnTXEFlagUntilTimeout>
 8002a10:	4603      	mov	r3, r0
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d00d      	beq.n	8002a32 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a1a:	2b04      	cmp	r3, #4
 8002a1c:	d107      	bne.n	8002a2e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	681a      	ldr	r2, [r3, #0]
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a2c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	e076      	b.n	8002b20 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002a32:	88fb      	ldrh	r3, [r7, #6]
 8002a34:	2b01      	cmp	r3, #1
 8002a36:	d105      	bne.n	8002a44 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002a38:	893b      	ldrh	r3, [r7, #8]
 8002a3a:	b2da      	uxtb	r2, r3
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	611a      	str	r2, [r3, #16]
 8002a42:	e021      	b.n	8002a88 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002a44:	893b      	ldrh	r3, [r7, #8]
 8002a46:	0a1b      	lsrs	r3, r3, #8
 8002a48:	b29b      	uxth	r3, r3
 8002a4a:	b2da      	uxtb	r2, r3
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a54:	6a39      	ldr	r1, [r7, #32]
 8002a56:	68f8      	ldr	r0, [r7, #12]
 8002a58:	f000 f982 	bl	8002d60 <I2C_WaitOnTXEFlagUntilTimeout>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d00d      	beq.n	8002a7e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a66:	2b04      	cmp	r3, #4
 8002a68:	d107      	bne.n	8002a7a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	681a      	ldr	r2, [r3, #0]
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a78:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e050      	b.n	8002b20 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002a7e:	893b      	ldrh	r3, [r7, #8]
 8002a80:	b2da      	uxtb	r2, r3
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a8a:	6a39      	ldr	r1, [r7, #32]
 8002a8c:	68f8      	ldr	r0, [r7, #12]
 8002a8e:	f000 f967 	bl	8002d60 <I2C_WaitOnTXEFlagUntilTimeout>
 8002a92:	4603      	mov	r3, r0
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d00d      	beq.n	8002ab4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a9c:	2b04      	cmp	r3, #4
 8002a9e:	d107      	bne.n	8002ab0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	681a      	ldr	r2, [r3, #0]
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002aae:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	e035      	b.n	8002b20 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	681a      	ldr	r2, [r3, #0]
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ac2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac6:	9300      	str	r3, [sp, #0]
 8002ac8:	6a3b      	ldr	r3, [r7, #32]
 8002aca:	2200      	movs	r2, #0
 8002acc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002ad0:	68f8      	ldr	r0, [r7, #12]
 8002ad2:	f000 f82b 	bl	8002b2c <I2C_WaitOnFlagUntilTimeout>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d00d      	beq.n	8002af8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ae6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002aea:	d103      	bne.n	8002af4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002af2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002af4:	2303      	movs	r3, #3
 8002af6:	e013      	b.n	8002b20 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002af8:	897b      	ldrh	r3, [r7, #10]
 8002afa:	b2db      	uxtb	r3, r3
 8002afc:	f043 0301 	orr.w	r3, r3, #1
 8002b00:	b2da      	uxtb	r2, r3
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b0a:	6a3a      	ldr	r2, [r7, #32]
 8002b0c:	4906      	ldr	r1, [pc, #24]	; (8002b28 <I2C_RequestMemoryRead+0x1cc>)
 8002b0e:	68f8      	ldr	r0, [r7, #12]
 8002b10:	f000 f886 	bl	8002c20 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b14:	4603      	mov	r3, r0
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d001      	beq.n	8002b1e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e000      	b.n	8002b20 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002b1e:	2300      	movs	r3, #0
}
 8002b20:	4618      	mov	r0, r3
 8002b22:	3718      	adds	r7, #24
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bd80      	pop	{r7, pc}
 8002b28:	00010002 	.word	0x00010002

08002b2c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b084      	sub	sp, #16
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	60f8      	str	r0, [r7, #12]
 8002b34:	60b9      	str	r1, [r7, #8]
 8002b36:	603b      	str	r3, [r7, #0]
 8002b38:	4613      	mov	r3, r2
 8002b3a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b3c:	e048      	b.n	8002bd0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b44:	d044      	beq.n	8002bd0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b46:	f7fe fd07 	bl	8001558 <HAL_GetTick>
 8002b4a:	4602      	mov	r2, r0
 8002b4c:	69bb      	ldr	r3, [r7, #24]
 8002b4e:	1ad3      	subs	r3, r2, r3
 8002b50:	683a      	ldr	r2, [r7, #0]
 8002b52:	429a      	cmp	r2, r3
 8002b54:	d302      	bcc.n	8002b5c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d139      	bne.n	8002bd0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002b5c:	68bb      	ldr	r3, [r7, #8]
 8002b5e:	0c1b      	lsrs	r3, r3, #16
 8002b60:	b2db      	uxtb	r3, r3
 8002b62:	2b01      	cmp	r3, #1
 8002b64:	d10d      	bne.n	8002b82 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	695b      	ldr	r3, [r3, #20]
 8002b6c:	43da      	mvns	r2, r3
 8002b6e:	68bb      	ldr	r3, [r7, #8]
 8002b70:	4013      	ands	r3, r2
 8002b72:	b29b      	uxth	r3, r3
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	bf0c      	ite	eq
 8002b78:	2301      	moveq	r3, #1
 8002b7a:	2300      	movne	r3, #0
 8002b7c:	b2db      	uxtb	r3, r3
 8002b7e:	461a      	mov	r2, r3
 8002b80:	e00c      	b.n	8002b9c <I2C_WaitOnFlagUntilTimeout+0x70>
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	699b      	ldr	r3, [r3, #24]
 8002b88:	43da      	mvns	r2, r3
 8002b8a:	68bb      	ldr	r3, [r7, #8]
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	b29b      	uxth	r3, r3
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	bf0c      	ite	eq
 8002b94:	2301      	moveq	r3, #1
 8002b96:	2300      	movne	r3, #0
 8002b98:	b2db      	uxtb	r3, r3
 8002b9a:	461a      	mov	r2, r3
 8002b9c:	79fb      	ldrb	r3, [r7, #7]
 8002b9e:	429a      	cmp	r2, r3
 8002ba0:	d116      	bne.n	8002bd0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	2220      	movs	r2, #32
 8002bac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bbc:	f043 0220 	orr.w	r2, r3, #32
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002bcc:	2301      	movs	r3, #1
 8002bce:	e023      	b.n	8002c18 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002bd0:	68bb      	ldr	r3, [r7, #8]
 8002bd2:	0c1b      	lsrs	r3, r3, #16
 8002bd4:	b2db      	uxtb	r3, r3
 8002bd6:	2b01      	cmp	r3, #1
 8002bd8:	d10d      	bne.n	8002bf6 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	695b      	ldr	r3, [r3, #20]
 8002be0:	43da      	mvns	r2, r3
 8002be2:	68bb      	ldr	r3, [r7, #8]
 8002be4:	4013      	ands	r3, r2
 8002be6:	b29b      	uxth	r3, r3
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	bf0c      	ite	eq
 8002bec:	2301      	moveq	r3, #1
 8002bee:	2300      	movne	r3, #0
 8002bf0:	b2db      	uxtb	r3, r3
 8002bf2:	461a      	mov	r2, r3
 8002bf4:	e00c      	b.n	8002c10 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	699b      	ldr	r3, [r3, #24]
 8002bfc:	43da      	mvns	r2, r3
 8002bfe:	68bb      	ldr	r3, [r7, #8]
 8002c00:	4013      	ands	r3, r2
 8002c02:	b29b      	uxth	r3, r3
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	bf0c      	ite	eq
 8002c08:	2301      	moveq	r3, #1
 8002c0a:	2300      	movne	r3, #0
 8002c0c:	b2db      	uxtb	r3, r3
 8002c0e:	461a      	mov	r2, r3
 8002c10:	79fb      	ldrb	r3, [r7, #7]
 8002c12:	429a      	cmp	r2, r3
 8002c14:	d093      	beq.n	8002b3e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002c16:	2300      	movs	r3, #0
}
 8002c18:	4618      	mov	r0, r3
 8002c1a:	3710      	adds	r7, #16
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bd80      	pop	{r7, pc}

08002c20 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b084      	sub	sp, #16
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	60f8      	str	r0, [r7, #12]
 8002c28:	60b9      	str	r1, [r7, #8]
 8002c2a:	607a      	str	r2, [r7, #4]
 8002c2c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002c2e:	e071      	b.n	8002d14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	695b      	ldr	r3, [r3, #20]
 8002c36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c3e:	d123      	bne.n	8002c88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	681a      	ldr	r2, [r3, #0]
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c4e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002c58:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	2220      	movs	r2, #32
 8002c64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c74:	f043 0204 	orr.w	r2, r3, #4
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	2200      	movs	r2, #0
 8002c80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002c84:	2301      	movs	r3, #1
 8002c86:	e067      	b.n	8002d58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c8e:	d041      	beq.n	8002d14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c90:	f7fe fc62 	bl	8001558 <HAL_GetTick>
 8002c94:	4602      	mov	r2, r0
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	1ad3      	subs	r3, r2, r3
 8002c9a:	687a      	ldr	r2, [r7, #4]
 8002c9c:	429a      	cmp	r2, r3
 8002c9e:	d302      	bcc.n	8002ca6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d136      	bne.n	8002d14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002ca6:	68bb      	ldr	r3, [r7, #8]
 8002ca8:	0c1b      	lsrs	r3, r3, #16
 8002caa:	b2db      	uxtb	r3, r3
 8002cac:	2b01      	cmp	r3, #1
 8002cae:	d10c      	bne.n	8002cca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	695b      	ldr	r3, [r3, #20]
 8002cb6:	43da      	mvns	r2, r3
 8002cb8:	68bb      	ldr	r3, [r7, #8]
 8002cba:	4013      	ands	r3, r2
 8002cbc:	b29b      	uxth	r3, r3
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	bf14      	ite	ne
 8002cc2:	2301      	movne	r3, #1
 8002cc4:	2300      	moveq	r3, #0
 8002cc6:	b2db      	uxtb	r3, r3
 8002cc8:	e00b      	b.n	8002ce2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	699b      	ldr	r3, [r3, #24]
 8002cd0:	43da      	mvns	r2, r3
 8002cd2:	68bb      	ldr	r3, [r7, #8]
 8002cd4:	4013      	ands	r3, r2
 8002cd6:	b29b      	uxth	r3, r3
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	bf14      	ite	ne
 8002cdc:	2301      	movne	r3, #1
 8002cde:	2300      	moveq	r3, #0
 8002ce0:	b2db      	uxtb	r3, r3
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d016      	beq.n	8002d14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	2220      	movs	r2, #32
 8002cf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d00:	f043 0220 	orr.w	r2, r3, #32
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002d10:	2301      	movs	r3, #1
 8002d12:	e021      	b.n	8002d58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002d14:	68bb      	ldr	r3, [r7, #8]
 8002d16:	0c1b      	lsrs	r3, r3, #16
 8002d18:	b2db      	uxtb	r3, r3
 8002d1a:	2b01      	cmp	r3, #1
 8002d1c:	d10c      	bne.n	8002d38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	695b      	ldr	r3, [r3, #20]
 8002d24:	43da      	mvns	r2, r3
 8002d26:	68bb      	ldr	r3, [r7, #8]
 8002d28:	4013      	ands	r3, r2
 8002d2a:	b29b      	uxth	r3, r3
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	bf14      	ite	ne
 8002d30:	2301      	movne	r3, #1
 8002d32:	2300      	moveq	r3, #0
 8002d34:	b2db      	uxtb	r3, r3
 8002d36:	e00b      	b.n	8002d50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	699b      	ldr	r3, [r3, #24]
 8002d3e:	43da      	mvns	r2, r3
 8002d40:	68bb      	ldr	r3, [r7, #8]
 8002d42:	4013      	ands	r3, r2
 8002d44:	b29b      	uxth	r3, r3
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	bf14      	ite	ne
 8002d4a:	2301      	movne	r3, #1
 8002d4c:	2300      	moveq	r3, #0
 8002d4e:	b2db      	uxtb	r3, r3
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	f47f af6d 	bne.w	8002c30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002d56:	2300      	movs	r3, #0
}
 8002d58:	4618      	mov	r0, r3
 8002d5a:	3710      	adds	r7, #16
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bd80      	pop	{r7, pc}

08002d60 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b084      	sub	sp, #16
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	60f8      	str	r0, [r7, #12]
 8002d68:	60b9      	str	r1, [r7, #8]
 8002d6a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002d6c:	e034      	b.n	8002dd8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002d6e:	68f8      	ldr	r0, [r7, #12]
 8002d70:	f000 f8e3 	bl	8002f3a <I2C_IsAcknowledgeFailed>
 8002d74:	4603      	mov	r3, r0
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d001      	beq.n	8002d7e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	e034      	b.n	8002de8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d7e:	68bb      	ldr	r3, [r7, #8]
 8002d80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d84:	d028      	beq.n	8002dd8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d86:	f7fe fbe7 	bl	8001558 <HAL_GetTick>
 8002d8a:	4602      	mov	r2, r0
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	1ad3      	subs	r3, r2, r3
 8002d90:	68ba      	ldr	r2, [r7, #8]
 8002d92:	429a      	cmp	r2, r3
 8002d94:	d302      	bcc.n	8002d9c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002d96:	68bb      	ldr	r3, [r7, #8]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d11d      	bne.n	8002dd8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	695b      	ldr	r3, [r3, #20]
 8002da2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002da6:	2b80      	cmp	r3, #128	; 0x80
 8002da8:	d016      	beq.n	8002dd8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	2200      	movs	r2, #0
 8002dae:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	2220      	movs	r2, #32
 8002db4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc4:	f043 0220 	orr.w	r2, r3, #32
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	2200      	movs	r2, #0
 8002dd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	e007      	b.n	8002de8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	695b      	ldr	r3, [r3, #20]
 8002dde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002de2:	2b80      	cmp	r3, #128	; 0x80
 8002de4:	d1c3      	bne.n	8002d6e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002de6:	2300      	movs	r3, #0
}
 8002de8:	4618      	mov	r0, r3
 8002dea:	3710      	adds	r7, #16
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}

08002df0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b084      	sub	sp, #16
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	60f8      	str	r0, [r7, #12]
 8002df8:	60b9      	str	r1, [r7, #8]
 8002dfa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002dfc:	e034      	b.n	8002e68 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002dfe:	68f8      	ldr	r0, [r7, #12]
 8002e00:	f000 f89b 	bl	8002f3a <I2C_IsAcknowledgeFailed>
 8002e04:	4603      	mov	r3, r0
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d001      	beq.n	8002e0e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e034      	b.n	8002e78 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e0e:	68bb      	ldr	r3, [r7, #8]
 8002e10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e14:	d028      	beq.n	8002e68 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e16:	f7fe fb9f 	bl	8001558 <HAL_GetTick>
 8002e1a:	4602      	mov	r2, r0
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	1ad3      	subs	r3, r2, r3
 8002e20:	68ba      	ldr	r2, [r7, #8]
 8002e22:	429a      	cmp	r2, r3
 8002e24:	d302      	bcc.n	8002e2c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002e26:	68bb      	ldr	r3, [r7, #8]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d11d      	bne.n	8002e68 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	695b      	ldr	r3, [r3, #20]
 8002e32:	f003 0304 	and.w	r3, r3, #4
 8002e36:	2b04      	cmp	r3, #4
 8002e38:	d016      	beq.n	8002e68 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	2220      	movs	r2, #32
 8002e44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e54:	f043 0220 	orr.w	r2, r3, #32
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	2200      	movs	r2, #0
 8002e60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002e64:	2301      	movs	r3, #1
 8002e66:	e007      	b.n	8002e78 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	695b      	ldr	r3, [r3, #20]
 8002e6e:	f003 0304 	and.w	r3, r3, #4
 8002e72:	2b04      	cmp	r3, #4
 8002e74:	d1c3      	bne.n	8002dfe <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002e76:	2300      	movs	r3, #0
}
 8002e78:	4618      	mov	r0, r3
 8002e7a:	3710      	adds	r7, #16
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bd80      	pop	{r7, pc}

08002e80 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b084      	sub	sp, #16
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	60f8      	str	r0, [r7, #12]
 8002e88:	60b9      	str	r1, [r7, #8]
 8002e8a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002e8c:	e049      	b.n	8002f22 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	695b      	ldr	r3, [r3, #20]
 8002e94:	f003 0310 	and.w	r3, r3, #16
 8002e98:	2b10      	cmp	r3, #16
 8002e9a:	d119      	bne.n	8002ed0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f06f 0210 	mvn.w	r2, #16
 8002ea4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	2220      	movs	r2, #32
 8002eb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	e030      	b.n	8002f32 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ed0:	f7fe fb42 	bl	8001558 <HAL_GetTick>
 8002ed4:	4602      	mov	r2, r0
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	1ad3      	subs	r3, r2, r3
 8002eda:	68ba      	ldr	r2, [r7, #8]
 8002edc:	429a      	cmp	r2, r3
 8002ede:	d302      	bcc.n	8002ee6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d11d      	bne.n	8002f22 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	695b      	ldr	r3, [r3, #20]
 8002eec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ef0:	2b40      	cmp	r3, #64	; 0x40
 8002ef2:	d016      	beq.n	8002f22 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	2220      	movs	r2, #32
 8002efe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	2200      	movs	r2, #0
 8002f06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f0e:	f043 0220 	orr.w	r2, r3, #32
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	2200      	movs	r2, #0
 8002f1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	e007      	b.n	8002f32 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	695b      	ldr	r3, [r3, #20]
 8002f28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f2c:	2b40      	cmp	r3, #64	; 0x40
 8002f2e:	d1ae      	bne.n	8002e8e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002f30:	2300      	movs	r3, #0
}
 8002f32:	4618      	mov	r0, r3
 8002f34:	3710      	adds	r7, #16
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}

08002f3a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002f3a:	b480      	push	{r7}
 8002f3c:	b083      	sub	sp, #12
 8002f3e:	af00      	add	r7, sp, #0
 8002f40:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	695b      	ldr	r3, [r3, #20]
 8002f48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f50:	d11b      	bne.n	8002f8a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002f5a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2220      	movs	r2, #32
 8002f66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f76:	f043 0204 	orr.w	r2, r3, #4
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2200      	movs	r2, #0
 8002f82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002f86:	2301      	movs	r3, #1
 8002f88:	e000      	b.n	8002f8c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002f8a:	2300      	movs	r3, #0
}
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	370c      	adds	r7, #12
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bc80      	pop	{r7}
 8002f94:	4770      	bx	lr
	...

08002f98 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b086      	sub	sp, #24
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d101      	bne.n	8002faa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e272      	b.n	8003490 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f003 0301 	and.w	r3, r3, #1
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	f000 8087 	beq.w	80030c6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002fb8:	4b92      	ldr	r3, [pc, #584]	; (8003204 <HAL_RCC_OscConfig+0x26c>)
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	f003 030c 	and.w	r3, r3, #12
 8002fc0:	2b04      	cmp	r3, #4
 8002fc2:	d00c      	beq.n	8002fde <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002fc4:	4b8f      	ldr	r3, [pc, #572]	; (8003204 <HAL_RCC_OscConfig+0x26c>)
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	f003 030c 	and.w	r3, r3, #12
 8002fcc:	2b08      	cmp	r3, #8
 8002fce:	d112      	bne.n	8002ff6 <HAL_RCC_OscConfig+0x5e>
 8002fd0:	4b8c      	ldr	r3, [pc, #560]	; (8003204 <HAL_RCC_OscConfig+0x26c>)
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fdc:	d10b      	bne.n	8002ff6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fde:	4b89      	ldr	r3, [pc, #548]	; (8003204 <HAL_RCC_OscConfig+0x26c>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d06c      	beq.n	80030c4 <HAL_RCC_OscConfig+0x12c>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d168      	bne.n	80030c4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	e24c      	b.n	8003490 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ffe:	d106      	bne.n	800300e <HAL_RCC_OscConfig+0x76>
 8003000:	4b80      	ldr	r3, [pc, #512]	; (8003204 <HAL_RCC_OscConfig+0x26c>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a7f      	ldr	r2, [pc, #508]	; (8003204 <HAL_RCC_OscConfig+0x26c>)
 8003006:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800300a:	6013      	str	r3, [r2, #0]
 800300c:	e02e      	b.n	800306c <HAL_RCC_OscConfig+0xd4>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d10c      	bne.n	8003030 <HAL_RCC_OscConfig+0x98>
 8003016:	4b7b      	ldr	r3, [pc, #492]	; (8003204 <HAL_RCC_OscConfig+0x26c>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4a7a      	ldr	r2, [pc, #488]	; (8003204 <HAL_RCC_OscConfig+0x26c>)
 800301c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003020:	6013      	str	r3, [r2, #0]
 8003022:	4b78      	ldr	r3, [pc, #480]	; (8003204 <HAL_RCC_OscConfig+0x26c>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a77      	ldr	r2, [pc, #476]	; (8003204 <HAL_RCC_OscConfig+0x26c>)
 8003028:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800302c:	6013      	str	r3, [r2, #0]
 800302e:	e01d      	b.n	800306c <HAL_RCC_OscConfig+0xd4>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003038:	d10c      	bne.n	8003054 <HAL_RCC_OscConfig+0xbc>
 800303a:	4b72      	ldr	r3, [pc, #456]	; (8003204 <HAL_RCC_OscConfig+0x26c>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4a71      	ldr	r2, [pc, #452]	; (8003204 <HAL_RCC_OscConfig+0x26c>)
 8003040:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003044:	6013      	str	r3, [r2, #0]
 8003046:	4b6f      	ldr	r3, [pc, #444]	; (8003204 <HAL_RCC_OscConfig+0x26c>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a6e      	ldr	r2, [pc, #440]	; (8003204 <HAL_RCC_OscConfig+0x26c>)
 800304c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003050:	6013      	str	r3, [r2, #0]
 8003052:	e00b      	b.n	800306c <HAL_RCC_OscConfig+0xd4>
 8003054:	4b6b      	ldr	r3, [pc, #428]	; (8003204 <HAL_RCC_OscConfig+0x26c>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a6a      	ldr	r2, [pc, #424]	; (8003204 <HAL_RCC_OscConfig+0x26c>)
 800305a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800305e:	6013      	str	r3, [r2, #0]
 8003060:	4b68      	ldr	r3, [pc, #416]	; (8003204 <HAL_RCC_OscConfig+0x26c>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a67      	ldr	r2, [pc, #412]	; (8003204 <HAL_RCC_OscConfig+0x26c>)
 8003066:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800306a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d013      	beq.n	800309c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003074:	f7fe fa70 	bl	8001558 <HAL_GetTick>
 8003078:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800307a:	e008      	b.n	800308e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800307c:	f7fe fa6c 	bl	8001558 <HAL_GetTick>
 8003080:	4602      	mov	r2, r0
 8003082:	693b      	ldr	r3, [r7, #16]
 8003084:	1ad3      	subs	r3, r2, r3
 8003086:	2b64      	cmp	r3, #100	; 0x64
 8003088:	d901      	bls.n	800308e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800308a:	2303      	movs	r3, #3
 800308c:	e200      	b.n	8003490 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800308e:	4b5d      	ldr	r3, [pc, #372]	; (8003204 <HAL_RCC_OscConfig+0x26c>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003096:	2b00      	cmp	r3, #0
 8003098:	d0f0      	beq.n	800307c <HAL_RCC_OscConfig+0xe4>
 800309a:	e014      	b.n	80030c6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800309c:	f7fe fa5c 	bl	8001558 <HAL_GetTick>
 80030a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030a2:	e008      	b.n	80030b6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030a4:	f7fe fa58 	bl	8001558 <HAL_GetTick>
 80030a8:	4602      	mov	r2, r0
 80030aa:	693b      	ldr	r3, [r7, #16]
 80030ac:	1ad3      	subs	r3, r2, r3
 80030ae:	2b64      	cmp	r3, #100	; 0x64
 80030b0:	d901      	bls.n	80030b6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80030b2:	2303      	movs	r3, #3
 80030b4:	e1ec      	b.n	8003490 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030b6:	4b53      	ldr	r3, [pc, #332]	; (8003204 <HAL_RCC_OscConfig+0x26c>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d1f0      	bne.n	80030a4 <HAL_RCC_OscConfig+0x10c>
 80030c2:	e000      	b.n	80030c6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f003 0302 	and.w	r3, r3, #2
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d063      	beq.n	800319a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80030d2:	4b4c      	ldr	r3, [pc, #304]	; (8003204 <HAL_RCC_OscConfig+0x26c>)
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	f003 030c 	and.w	r3, r3, #12
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d00b      	beq.n	80030f6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80030de:	4b49      	ldr	r3, [pc, #292]	; (8003204 <HAL_RCC_OscConfig+0x26c>)
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	f003 030c 	and.w	r3, r3, #12
 80030e6:	2b08      	cmp	r3, #8
 80030e8:	d11c      	bne.n	8003124 <HAL_RCC_OscConfig+0x18c>
 80030ea:	4b46      	ldr	r3, [pc, #280]	; (8003204 <HAL_RCC_OscConfig+0x26c>)
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d116      	bne.n	8003124 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030f6:	4b43      	ldr	r3, [pc, #268]	; (8003204 <HAL_RCC_OscConfig+0x26c>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f003 0302 	and.w	r3, r3, #2
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d005      	beq.n	800310e <HAL_RCC_OscConfig+0x176>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	691b      	ldr	r3, [r3, #16]
 8003106:	2b01      	cmp	r3, #1
 8003108:	d001      	beq.n	800310e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800310a:	2301      	movs	r3, #1
 800310c:	e1c0      	b.n	8003490 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800310e:	4b3d      	ldr	r3, [pc, #244]	; (8003204 <HAL_RCC_OscConfig+0x26c>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	695b      	ldr	r3, [r3, #20]
 800311a:	00db      	lsls	r3, r3, #3
 800311c:	4939      	ldr	r1, [pc, #228]	; (8003204 <HAL_RCC_OscConfig+0x26c>)
 800311e:	4313      	orrs	r3, r2
 8003120:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003122:	e03a      	b.n	800319a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	691b      	ldr	r3, [r3, #16]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d020      	beq.n	800316e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800312c:	4b36      	ldr	r3, [pc, #216]	; (8003208 <HAL_RCC_OscConfig+0x270>)
 800312e:	2201      	movs	r2, #1
 8003130:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003132:	f7fe fa11 	bl	8001558 <HAL_GetTick>
 8003136:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003138:	e008      	b.n	800314c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800313a:	f7fe fa0d 	bl	8001558 <HAL_GetTick>
 800313e:	4602      	mov	r2, r0
 8003140:	693b      	ldr	r3, [r7, #16]
 8003142:	1ad3      	subs	r3, r2, r3
 8003144:	2b02      	cmp	r3, #2
 8003146:	d901      	bls.n	800314c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003148:	2303      	movs	r3, #3
 800314a:	e1a1      	b.n	8003490 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800314c:	4b2d      	ldr	r3, [pc, #180]	; (8003204 <HAL_RCC_OscConfig+0x26c>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f003 0302 	and.w	r3, r3, #2
 8003154:	2b00      	cmp	r3, #0
 8003156:	d0f0      	beq.n	800313a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003158:	4b2a      	ldr	r3, [pc, #168]	; (8003204 <HAL_RCC_OscConfig+0x26c>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	695b      	ldr	r3, [r3, #20]
 8003164:	00db      	lsls	r3, r3, #3
 8003166:	4927      	ldr	r1, [pc, #156]	; (8003204 <HAL_RCC_OscConfig+0x26c>)
 8003168:	4313      	orrs	r3, r2
 800316a:	600b      	str	r3, [r1, #0]
 800316c:	e015      	b.n	800319a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800316e:	4b26      	ldr	r3, [pc, #152]	; (8003208 <HAL_RCC_OscConfig+0x270>)
 8003170:	2200      	movs	r2, #0
 8003172:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003174:	f7fe f9f0 	bl	8001558 <HAL_GetTick>
 8003178:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800317a:	e008      	b.n	800318e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800317c:	f7fe f9ec 	bl	8001558 <HAL_GetTick>
 8003180:	4602      	mov	r2, r0
 8003182:	693b      	ldr	r3, [r7, #16]
 8003184:	1ad3      	subs	r3, r2, r3
 8003186:	2b02      	cmp	r3, #2
 8003188:	d901      	bls.n	800318e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800318a:	2303      	movs	r3, #3
 800318c:	e180      	b.n	8003490 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800318e:	4b1d      	ldr	r3, [pc, #116]	; (8003204 <HAL_RCC_OscConfig+0x26c>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f003 0302 	and.w	r3, r3, #2
 8003196:	2b00      	cmp	r3, #0
 8003198:	d1f0      	bne.n	800317c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f003 0308 	and.w	r3, r3, #8
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d03a      	beq.n	800321c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	699b      	ldr	r3, [r3, #24]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d019      	beq.n	80031e2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031ae:	4b17      	ldr	r3, [pc, #92]	; (800320c <HAL_RCC_OscConfig+0x274>)
 80031b0:	2201      	movs	r2, #1
 80031b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031b4:	f7fe f9d0 	bl	8001558 <HAL_GetTick>
 80031b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031ba:	e008      	b.n	80031ce <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031bc:	f7fe f9cc 	bl	8001558 <HAL_GetTick>
 80031c0:	4602      	mov	r2, r0
 80031c2:	693b      	ldr	r3, [r7, #16]
 80031c4:	1ad3      	subs	r3, r2, r3
 80031c6:	2b02      	cmp	r3, #2
 80031c8:	d901      	bls.n	80031ce <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80031ca:	2303      	movs	r3, #3
 80031cc:	e160      	b.n	8003490 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031ce:	4b0d      	ldr	r3, [pc, #52]	; (8003204 <HAL_RCC_OscConfig+0x26c>)
 80031d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d2:	f003 0302 	and.w	r3, r3, #2
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d0f0      	beq.n	80031bc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80031da:	2001      	movs	r0, #1
 80031dc:	f000 face 	bl	800377c <RCC_Delay>
 80031e0:	e01c      	b.n	800321c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031e2:	4b0a      	ldr	r3, [pc, #40]	; (800320c <HAL_RCC_OscConfig+0x274>)
 80031e4:	2200      	movs	r2, #0
 80031e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031e8:	f7fe f9b6 	bl	8001558 <HAL_GetTick>
 80031ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031ee:	e00f      	b.n	8003210 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031f0:	f7fe f9b2 	bl	8001558 <HAL_GetTick>
 80031f4:	4602      	mov	r2, r0
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	1ad3      	subs	r3, r2, r3
 80031fa:	2b02      	cmp	r3, #2
 80031fc:	d908      	bls.n	8003210 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80031fe:	2303      	movs	r3, #3
 8003200:	e146      	b.n	8003490 <HAL_RCC_OscConfig+0x4f8>
 8003202:	bf00      	nop
 8003204:	40021000 	.word	0x40021000
 8003208:	42420000 	.word	0x42420000
 800320c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003210:	4b92      	ldr	r3, [pc, #584]	; (800345c <HAL_RCC_OscConfig+0x4c4>)
 8003212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003214:	f003 0302 	and.w	r3, r3, #2
 8003218:	2b00      	cmp	r3, #0
 800321a:	d1e9      	bne.n	80031f0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f003 0304 	and.w	r3, r3, #4
 8003224:	2b00      	cmp	r3, #0
 8003226:	f000 80a6 	beq.w	8003376 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800322a:	2300      	movs	r3, #0
 800322c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800322e:	4b8b      	ldr	r3, [pc, #556]	; (800345c <HAL_RCC_OscConfig+0x4c4>)
 8003230:	69db      	ldr	r3, [r3, #28]
 8003232:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003236:	2b00      	cmp	r3, #0
 8003238:	d10d      	bne.n	8003256 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800323a:	4b88      	ldr	r3, [pc, #544]	; (800345c <HAL_RCC_OscConfig+0x4c4>)
 800323c:	69db      	ldr	r3, [r3, #28]
 800323e:	4a87      	ldr	r2, [pc, #540]	; (800345c <HAL_RCC_OscConfig+0x4c4>)
 8003240:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003244:	61d3      	str	r3, [r2, #28]
 8003246:	4b85      	ldr	r3, [pc, #532]	; (800345c <HAL_RCC_OscConfig+0x4c4>)
 8003248:	69db      	ldr	r3, [r3, #28]
 800324a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800324e:	60bb      	str	r3, [r7, #8]
 8003250:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003252:	2301      	movs	r3, #1
 8003254:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003256:	4b82      	ldr	r3, [pc, #520]	; (8003460 <HAL_RCC_OscConfig+0x4c8>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800325e:	2b00      	cmp	r3, #0
 8003260:	d118      	bne.n	8003294 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003262:	4b7f      	ldr	r3, [pc, #508]	; (8003460 <HAL_RCC_OscConfig+0x4c8>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4a7e      	ldr	r2, [pc, #504]	; (8003460 <HAL_RCC_OscConfig+0x4c8>)
 8003268:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800326c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800326e:	f7fe f973 	bl	8001558 <HAL_GetTick>
 8003272:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003274:	e008      	b.n	8003288 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003276:	f7fe f96f 	bl	8001558 <HAL_GetTick>
 800327a:	4602      	mov	r2, r0
 800327c:	693b      	ldr	r3, [r7, #16]
 800327e:	1ad3      	subs	r3, r2, r3
 8003280:	2b64      	cmp	r3, #100	; 0x64
 8003282:	d901      	bls.n	8003288 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003284:	2303      	movs	r3, #3
 8003286:	e103      	b.n	8003490 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003288:	4b75      	ldr	r3, [pc, #468]	; (8003460 <HAL_RCC_OscConfig+0x4c8>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003290:	2b00      	cmp	r3, #0
 8003292:	d0f0      	beq.n	8003276 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	68db      	ldr	r3, [r3, #12]
 8003298:	2b01      	cmp	r3, #1
 800329a:	d106      	bne.n	80032aa <HAL_RCC_OscConfig+0x312>
 800329c:	4b6f      	ldr	r3, [pc, #444]	; (800345c <HAL_RCC_OscConfig+0x4c4>)
 800329e:	6a1b      	ldr	r3, [r3, #32]
 80032a0:	4a6e      	ldr	r2, [pc, #440]	; (800345c <HAL_RCC_OscConfig+0x4c4>)
 80032a2:	f043 0301 	orr.w	r3, r3, #1
 80032a6:	6213      	str	r3, [r2, #32]
 80032a8:	e02d      	b.n	8003306 <HAL_RCC_OscConfig+0x36e>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	68db      	ldr	r3, [r3, #12]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d10c      	bne.n	80032cc <HAL_RCC_OscConfig+0x334>
 80032b2:	4b6a      	ldr	r3, [pc, #424]	; (800345c <HAL_RCC_OscConfig+0x4c4>)
 80032b4:	6a1b      	ldr	r3, [r3, #32]
 80032b6:	4a69      	ldr	r2, [pc, #420]	; (800345c <HAL_RCC_OscConfig+0x4c4>)
 80032b8:	f023 0301 	bic.w	r3, r3, #1
 80032bc:	6213      	str	r3, [r2, #32]
 80032be:	4b67      	ldr	r3, [pc, #412]	; (800345c <HAL_RCC_OscConfig+0x4c4>)
 80032c0:	6a1b      	ldr	r3, [r3, #32]
 80032c2:	4a66      	ldr	r2, [pc, #408]	; (800345c <HAL_RCC_OscConfig+0x4c4>)
 80032c4:	f023 0304 	bic.w	r3, r3, #4
 80032c8:	6213      	str	r3, [r2, #32]
 80032ca:	e01c      	b.n	8003306 <HAL_RCC_OscConfig+0x36e>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	68db      	ldr	r3, [r3, #12]
 80032d0:	2b05      	cmp	r3, #5
 80032d2:	d10c      	bne.n	80032ee <HAL_RCC_OscConfig+0x356>
 80032d4:	4b61      	ldr	r3, [pc, #388]	; (800345c <HAL_RCC_OscConfig+0x4c4>)
 80032d6:	6a1b      	ldr	r3, [r3, #32]
 80032d8:	4a60      	ldr	r2, [pc, #384]	; (800345c <HAL_RCC_OscConfig+0x4c4>)
 80032da:	f043 0304 	orr.w	r3, r3, #4
 80032de:	6213      	str	r3, [r2, #32]
 80032e0:	4b5e      	ldr	r3, [pc, #376]	; (800345c <HAL_RCC_OscConfig+0x4c4>)
 80032e2:	6a1b      	ldr	r3, [r3, #32]
 80032e4:	4a5d      	ldr	r2, [pc, #372]	; (800345c <HAL_RCC_OscConfig+0x4c4>)
 80032e6:	f043 0301 	orr.w	r3, r3, #1
 80032ea:	6213      	str	r3, [r2, #32]
 80032ec:	e00b      	b.n	8003306 <HAL_RCC_OscConfig+0x36e>
 80032ee:	4b5b      	ldr	r3, [pc, #364]	; (800345c <HAL_RCC_OscConfig+0x4c4>)
 80032f0:	6a1b      	ldr	r3, [r3, #32]
 80032f2:	4a5a      	ldr	r2, [pc, #360]	; (800345c <HAL_RCC_OscConfig+0x4c4>)
 80032f4:	f023 0301 	bic.w	r3, r3, #1
 80032f8:	6213      	str	r3, [r2, #32]
 80032fa:	4b58      	ldr	r3, [pc, #352]	; (800345c <HAL_RCC_OscConfig+0x4c4>)
 80032fc:	6a1b      	ldr	r3, [r3, #32]
 80032fe:	4a57      	ldr	r2, [pc, #348]	; (800345c <HAL_RCC_OscConfig+0x4c4>)
 8003300:	f023 0304 	bic.w	r3, r3, #4
 8003304:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	68db      	ldr	r3, [r3, #12]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d015      	beq.n	800333a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800330e:	f7fe f923 	bl	8001558 <HAL_GetTick>
 8003312:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003314:	e00a      	b.n	800332c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003316:	f7fe f91f 	bl	8001558 <HAL_GetTick>
 800331a:	4602      	mov	r2, r0
 800331c:	693b      	ldr	r3, [r7, #16]
 800331e:	1ad3      	subs	r3, r2, r3
 8003320:	f241 3288 	movw	r2, #5000	; 0x1388
 8003324:	4293      	cmp	r3, r2
 8003326:	d901      	bls.n	800332c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003328:	2303      	movs	r3, #3
 800332a:	e0b1      	b.n	8003490 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800332c:	4b4b      	ldr	r3, [pc, #300]	; (800345c <HAL_RCC_OscConfig+0x4c4>)
 800332e:	6a1b      	ldr	r3, [r3, #32]
 8003330:	f003 0302 	and.w	r3, r3, #2
 8003334:	2b00      	cmp	r3, #0
 8003336:	d0ee      	beq.n	8003316 <HAL_RCC_OscConfig+0x37e>
 8003338:	e014      	b.n	8003364 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800333a:	f7fe f90d 	bl	8001558 <HAL_GetTick>
 800333e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003340:	e00a      	b.n	8003358 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003342:	f7fe f909 	bl	8001558 <HAL_GetTick>
 8003346:	4602      	mov	r2, r0
 8003348:	693b      	ldr	r3, [r7, #16]
 800334a:	1ad3      	subs	r3, r2, r3
 800334c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003350:	4293      	cmp	r3, r2
 8003352:	d901      	bls.n	8003358 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003354:	2303      	movs	r3, #3
 8003356:	e09b      	b.n	8003490 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003358:	4b40      	ldr	r3, [pc, #256]	; (800345c <HAL_RCC_OscConfig+0x4c4>)
 800335a:	6a1b      	ldr	r3, [r3, #32]
 800335c:	f003 0302 	and.w	r3, r3, #2
 8003360:	2b00      	cmp	r3, #0
 8003362:	d1ee      	bne.n	8003342 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003364:	7dfb      	ldrb	r3, [r7, #23]
 8003366:	2b01      	cmp	r3, #1
 8003368:	d105      	bne.n	8003376 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800336a:	4b3c      	ldr	r3, [pc, #240]	; (800345c <HAL_RCC_OscConfig+0x4c4>)
 800336c:	69db      	ldr	r3, [r3, #28]
 800336e:	4a3b      	ldr	r2, [pc, #236]	; (800345c <HAL_RCC_OscConfig+0x4c4>)
 8003370:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003374:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	69db      	ldr	r3, [r3, #28]
 800337a:	2b00      	cmp	r3, #0
 800337c:	f000 8087 	beq.w	800348e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003380:	4b36      	ldr	r3, [pc, #216]	; (800345c <HAL_RCC_OscConfig+0x4c4>)
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	f003 030c 	and.w	r3, r3, #12
 8003388:	2b08      	cmp	r3, #8
 800338a:	d061      	beq.n	8003450 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	69db      	ldr	r3, [r3, #28]
 8003390:	2b02      	cmp	r3, #2
 8003392:	d146      	bne.n	8003422 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003394:	4b33      	ldr	r3, [pc, #204]	; (8003464 <HAL_RCC_OscConfig+0x4cc>)
 8003396:	2200      	movs	r2, #0
 8003398:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800339a:	f7fe f8dd 	bl	8001558 <HAL_GetTick>
 800339e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80033a0:	e008      	b.n	80033b4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033a2:	f7fe f8d9 	bl	8001558 <HAL_GetTick>
 80033a6:	4602      	mov	r2, r0
 80033a8:	693b      	ldr	r3, [r7, #16]
 80033aa:	1ad3      	subs	r3, r2, r3
 80033ac:	2b02      	cmp	r3, #2
 80033ae:	d901      	bls.n	80033b4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80033b0:	2303      	movs	r3, #3
 80033b2:	e06d      	b.n	8003490 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80033b4:	4b29      	ldr	r3, [pc, #164]	; (800345c <HAL_RCC_OscConfig+0x4c4>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d1f0      	bne.n	80033a2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6a1b      	ldr	r3, [r3, #32]
 80033c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033c8:	d108      	bne.n	80033dc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80033ca:	4b24      	ldr	r3, [pc, #144]	; (800345c <HAL_RCC_OscConfig+0x4c4>)
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	689b      	ldr	r3, [r3, #8]
 80033d6:	4921      	ldr	r1, [pc, #132]	; (800345c <HAL_RCC_OscConfig+0x4c4>)
 80033d8:	4313      	orrs	r3, r2
 80033da:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80033dc:	4b1f      	ldr	r3, [pc, #124]	; (800345c <HAL_RCC_OscConfig+0x4c4>)
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6a19      	ldr	r1, [r3, #32]
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ec:	430b      	orrs	r3, r1
 80033ee:	491b      	ldr	r1, [pc, #108]	; (800345c <HAL_RCC_OscConfig+0x4c4>)
 80033f0:	4313      	orrs	r3, r2
 80033f2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80033f4:	4b1b      	ldr	r3, [pc, #108]	; (8003464 <HAL_RCC_OscConfig+0x4cc>)
 80033f6:	2201      	movs	r2, #1
 80033f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033fa:	f7fe f8ad 	bl	8001558 <HAL_GetTick>
 80033fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003400:	e008      	b.n	8003414 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003402:	f7fe f8a9 	bl	8001558 <HAL_GetTick>
 8003406:	4602      	mov	r2, r0
 8003408:	693b      	ldr	r3, [r7, #16]
 800340a:	1ad3      	subs	r3, r2, r3
 800340c:	2b02      	cmp	r3, #2
 800340e:	d901      	bls.n	8003414 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003410:	2303      	movs	r3, #3
 8003412:	e03d      	b.n	8003490 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003414:	4b11      	ldr	r3, [pc, #68]	; (800345c <HAL_RCC_OscConfig+0x4c4>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800341c:	2b00      	cmp	r3, #0
 800341e:	d0f0      	beq.n	8003402 <HAL_RCC_OscConfig+0x46a>
 8003420:	e035      	b.n	800348e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003422:	4b10      	ldr	r3, [pc, #64]	; (8003464 <HAL_RCC_OscConfig+0x4cc>)
 8003424:	2200      	movs	r2, #0
 8003426:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003428:	f7fe f896 	bl	8001558 <HAL_GetTick>
 800342c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800342e:	e008      	b.n	8003442 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003430:	f7fe f892 	bl	8001558 <HAL_GetTick>
 8003434:	4602      	mov	r2, r0
 8003436:	693b      	ldr	r3, [r7, #16]
 8003438:	1ad3      	subs	r3, r2, r3
 800343a:	2b02      	cmp	r3, #2
 800343c:	d901      	bls.n	8003442 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800343e:	2303      	movs	r3, #3
 8003440:	e026      	b.n	8003490 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003442:	4b06      	ldr	r3, [pc, #24]	; (800345c <HAL_RCC_OscConfig+0x4c4>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800344a:	2b00      	cmp	r3, #0
 800344c:	d1f0      	bne.n	8003430 <HAL_RCC_OscConfig+0x498>
 800344e:	e01e      	b.n	800348e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	69db      	ldr	r3, [r3, #28]
 8003454:	2b01      	cmp	r3, #1
 8003456:	d107      	bne.n	8003468 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003458:	2301      	movs	r3, #1
 800345a:	e019      	b.n	8003490 <HAL_RCC_OscConfig+0x4f8>
 800345c:	40021000 	.word	0x40021000
 8003460:	40007000 	.word	0x40007000
 8003464:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003468:	4b0b      	ldr	r3, [pc, #44]	; (8003498 <HAL_RCC_OscConfig+0x500>)
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6a1b      	ldr	r3, [r3, #32]
 8003478:	429a      	cmp	r2, r3
 800347a:	d106      	bne.n	800348a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003486:	429a      	cmp	r2, r3
 8003488:	d001      	beq.n	800348e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800348a:	2301      	movs	r3, #1
 800348c:	e000      	b.n	8003490 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800348e:	2300      	movs	r3, #0
}
 8003490:	4618      	mov	r0, r3
 8003492:	3718      	adds	r7, #24
 8003494:	46bd      	mov	sp, r7
 8003496:	bd80      	pop	{r7, pc}
 8003498:	40021000 	.word	0x40021000

0800349c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b084      	sub	sp, #16
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
 80034a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d101      	bne.n	80034b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80034ac:	2301      	movs	r3, #1
 80034ae:	e0d0      	b.n	8003652 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80034b0:	4b6a      	ldr	r3, [pc, #424]	; (800365c <HAL_RCC_ClockConfig+0x1c0>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f003 0307 	and.w	r3, r3, #7
 80034b8:	683a      	ldr	r2, [r7, #0]
 80034ba:	429a      	cmp	r2, r3
 80034bc:	d910      	bls.n	80034e0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034be:	4b67      	ldr	r3, [pc, #412]	; (800365c <HAL_RCC_ClockConfig+0x1c0>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f023 0207 	bic.w	r2, r3, #7
 80034c6:	4965      	ldr	r1, [pc, #404]	; (800365c <HAL_RCC_ClockConfig+0x1c0>)
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	4313      	orrs	r3, r2
 80034cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034ce:	4b63      	ldr	r3, [pc, #396]	; (800365c <HAL_RCC_ClockConfig+0x1c0>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f003 0307 	and.w	r3, r3, #7
 80034d6:	683a      	ldr	r2, [r7, #0]
 80034d8:	429a      	cmp	r2, r3
 80034da:	d001      	beq.n	80034e0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80034dc:	2301      	movs	r3, #1
 80034de:	e0b8      	b.n	8003652 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f003 0302 	and.w	r3, r3, #2
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d020      	beq.n	800352e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f003 0304 	and.w	r3, r3, #4
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d005      	beq.n	8003504 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80034f8:	4b59      	ldr	r3, [pc, #356]	; (8003660 <HAL_RCC_ClockConfig+0x1c4>)
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	4a58      	ldr	r2, [pc, #352]	; (8003660 <HAL_RCC_ClockConfig+0x1c4>)
 80034fe:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003502:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f003 0308 	and.w	r3, r3, #8
 800350c:	2b00      	cmp	r3, #0
 800350e:	d005      	beq.n	800351c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003510:	4b53      	ldr	r3, [pc, #332]	; (8003660 <HAL_RCC_ClockConfig+0x1c4>)
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	4a52      	ldr	r2, [pc, #328]	; (8003660 <HAL_RCC_ClockConfig+0x1c4>)
 8003516:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800351a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800351c:	4b50      	ldr	r3, [pc, #320]	; (8003660 <HAL_RCC_ClockConfig+0x1c4>)
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	689b      	ldr	r3, [r3, #8]
 8003528:	494d      	ldr	r1, [pc, #308]	; (8003660 <HAL_RCC_ClockConfig+0x1c4>)
 800352a:	4313      	orrs	r3, r2
 800352c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f003 0301 	and.w	r3, r3, #1
 8003536:	2b00      	cmp	r3, #0
 8003538:	d040      	beq.n	80035bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	2b01      	cmp	r3, #1
 8003540:	d107      	bne.n	8003552 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003542:	4b47      	ldr	r3, [pc, #284]	; (8003660 <HAL_RCC_ClockConfig+0x1c4>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800354a:	2b00      	cmp	r3, #0
 800354c:	d115      	bne.n	800357a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800354e:	2301      	movs	r3, #1
 8003550:	e07f      	b.n	8003652 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	2b02      	cmp	r3, #2
 8003558:	d107      	bne.n	800356a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800355a:	4b41      	ldr	r3, [pc, #260]	; (8003660 <HAL_RCC_ClockConfig+0x1c4>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003562:	2b00      	cmp	r3, #0
 8003564:	d109      	bne.n	800357a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003566:	2301      	movs	r3, #1
 8003568:	e073      	b.n	8003652 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800356a:	4b3d      	ldr	r3, [pc, #244]	; (8003660 <HAL_RCC_ClockConfig+0x1c4>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f003 0302 	and.w	r3, r3, #2
 8003572:	2b00      	cmp	r3, #0
 8003574:	d101      	bne.n	800357a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003576:	2301      	movs	r3, #1
 8003578:	e06b      	b.n	8003652 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800357a:	4b39      	ldr	r3, [pc, #228]	; (8003660 <HAL_RCC_ClockConfig+0x1c4>)
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	f023 0203 	bic.w	r2, r3, #3
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	4936      	ldr	r1, [pc, #216]	; (8003660 <HAL_RCC_ClockConfig+0x1c4>)
 8003588:	4313      	orrs	r3, r2
 800358a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800358c:	f7fd ffe4 	bl	8001558 <HAL_GetTick>
 8003590:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003592:	e00a      	b.n	80035aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003594:	f7fd ffe0 	bl	8001558 <HAL_GetTick>
 8003598:	4602      	mov	r2, r0
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	1ad3      	subs	r3, r2, r3
 800359e:	f241 3288 	movw	r2, #5000	; 0x1388
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d901      	bls.n	80035aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80035a6:	2303      	movs	r3, #3
 80035a8:	e053      	b.n	8003652 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035aa:	4b2d      	ldr	r3, [pc, #180]	; (8003660 <HAL_RCC_ClockConfig+0x1c4>)
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	f003 020c 	and.w	r2, r3, #12
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	009b      	lsls	r3, r3, #2
 80035b8:	429a      	cmp	r2, r3
 80035ba:	d1eb      	bne.n	8003594 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80035bc:	4b27      	ldr	r3, [pc, #156]	; (800365c <HAL_RCC_ClockConfig+0x1c0>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f003 0307 	and.w	r3, r3, #7
 80035c4:	683a      	ldr	r2, [r7, #0]
 80035c6:	429a      	cmp	r2, r3
 80035c8:	d210      	bcs.n	80035ec <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035ca:	4b24      	ldr	r3, [pc, #144]	; (800365c <HAL_RCC_ClockConfig+0x1c0>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f023 0207 	bic.w	r2, r3, #7
 80035d2:	4922      	ldr	r1, [pc, #136]	; (800365c <HAL_RCC_ClockConfig+0x1c0>)
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	4313      	orrs	r3, r2
 80035d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035da:	4b20      	ldr	r3, [pc, #128]	; (800365c <HAL_RCC_ClockConfig+0x1c0>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f003 0307 	and.w	r3, r3, #7
 80035e2:	683a      	ldr	r2, [r7, #0]
 80035e4:	429a      	cmp	r2, r3
 80035e6:	d001      	beq.n	80035ec <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80035e8:	2301      	movs	r3, #1
 80035ea:	e032      	b.n	8003652 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f003 0304 	and.w	r3, r3, #4
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d008      	beq.n	800360a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80035f8:	4b19      	ldr	r3, [pc, #100]	; (8003660 <HAL_RCC_ClockConfig+0x1c4>)
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	68db      	ldr	r3, [r3, #12]
 8003604:	4916      	ldr	r1, [pc, #88]	; (8003660 <HAL_RCC_ClockConfig+0x1c4>)
 8003606:	4313      	orrs	r3, r2
 8003608:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f003 0308 	and.w	r3, r3, #8
 8003612:	2b00      	cmp	r3, #0
 8003614:	d009      	beq.n	800362a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003616:	4b12      	ldr	r3, [pc, #72]	; (8003660 <HAL_RCC_ClockConfig+0x1c4>)
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	691b      	ldr	r3, [r3, #16]
 8003622:	00db      	lsls	r3, r3, #3
 8003624:	490e      	ldr	r1, [pc, #56]	; (8003660 <HAL_RCC_ClockConfig+0x1c4>)
 8003626:	4313      	orrs	r3, r2
 8003628:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800362a:	f000 f821 	bl	8003670 <HAL_RCC_GetSysClockFreq>
 800362e:	4602      	mov	r2, r0
 8003630:	4b0b      	ldr	r3, [pc, #44]	; (8003660 <HAL_RCC_ClockConfig+0x1c4>)
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	091b      	lsrs	r3, r3, #4
 8003636:	f003 030f 	and.w	r3, r3, #15
 800363a:	490a      	ldr	r1, [pc, #40]	; (8003664 <HAL_RCC_ClockConfig+0x1c8>)
 800363c:	5ccb      	ldrb	r3, [r1, r3]
 800363e:	fa22 f303 	lsr.w	r3, r2, r3
 8003642:	4a09      	ldr	r2, [pc, #36]	; (8003668 <HAL_RCC_ClockConfig+0x1cc>)
 8003644:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003646:	4b09      	ldr	r3, [pc, #36]	; (800366c <HAL_RCC_ClockConfig+0x1d0>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4618      	mov	r0, r3
 800364c:	f7fd ff42 	bl	80014d4 <HAL_InitTick>

  return HAL_OK;
 8003650:	2300      	movs	r3, #0
}
 8003652:	4618      	mov	r0, r3
 8003654:	3710      	adds	r7, #16
 8003656:	46bd      	mov	sp, r7
 8003658:	bd80      	pop	{r7, pc}
 800365a:	bf00      	nop
 800365c:	40022000 	.word	0x40022000
 8003660:	40021000 	.word	0x40021000
 8003664:	08006274 	.word	0x08006274
 8003668:	20000000 	.word	0x20000000
 800366c:	20000004 	.word	0x20000004

08003670 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003670:	b480      	push	{r7}
 8003672:	b087      	sub	sp, #28
 8003674:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003676:	2300      	movs	r3, #0
 8003678:	60fb      	str	r3, [r7, #12]
 800367a:	2300      	movs	r3, #0
 800367c:	60bb      	str	r3, [r7, #8]
 800367e:	2300      	movs	r3, #0
 8003680:	617b      	str	r3, [r7, #20]
 8003682:	2300      	movs	r3, #0
 8003684:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003686:	2300      	movs	r3, #0
 8003688:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800368a:	4b1e      	ldr	r3, [pc, #120]	; (8003704 <HAL_RCC_GetSysClockFreq+0x94>)
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	f003 030c 	and.w	r3, r3, #12
 8003696:	2b04      	cmp	r3, #4
 8003698:	d002      	beq.n	80036a0 <HAL_RCC_GetSysClockFreq+0x30>
 800369a:	2b08      	cmp	r3, #8
 800369c:	d003      	beq.n	80036a6 <HAL_RCC_GetSysClockFreq+0x36>
 800369e:	e027      	b.n	80036f0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80036a0:	4b19      	ldr	r3, [pc, #100]	; (8003708 <HAL_RCC_GetSysClockFreq+0x98>)
 80036a2:	613b      	str	r3, [r7, #16]
      break;
 80036a4:	e027      	b.n	80036f6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	0c9b      	lsrs	r3, r3, #18
 80036aa:	f003 030f 	and.w	r3, r3, #15
 80036ae:	4a17      	ldr	r2, [pc, #92]	; (800370c <HAL_RCC_GetSysClockFreq+0x9c>)
 80036b0:	5cd3      	ldrb	r3, [r2, r3]
 80036b2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d010      	beq.n	80036e0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80036be:	4b11      	ldr	r3, [pc, #68]	; (8003704 <HAL_RCC_GetSysClockFreq+0x94>)
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	0c5b      	lsrs	r3, r3, #17
 80036c4:	f003 0301 	and.w	r3, r3, #1
 80036c8:	4a11      	ldr	r2, [pc, #68]	; (8003710 <HAL_RCC_GetSysClockFreq+0xa0>)
 80036ca:	5cd3      	ldrb	r3, [r2, r3]
 80036cc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	4a0d      	ldr	r2, [pc, #52]	; (8003708 <HAL_RCC_GetSysClockFreq+0x98>)
 80036d2:	fb03 f202 	mul.w	r2, r3, r2
 80036d6:	68bb      	ldr	r3, [r7, #8]
 80036d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80036dc:	617b      	str	r3, [r7, #20]
 80036de:	e004      	b.n	80036ea <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	4a0c      	ldr	r2, [pc, #48]	; (8003714 <HAL_RCC_GetSysClockFreq+0xa4>)
 80036e4:	fb02 f303 	mul.w	r3, r2, r3
 80036e8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80036ea:	697b      	ldr	r3, [r7, #20]
 80036ec:	613b      	str	r3, [r7, #16]
      break;
 80036ee:	e002      	b.n	80036f6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80036f0:	4b05      	ldr	r3, [pc, #20]	; (8003708 <HAL_RCC_GetSysClockFreq+0x98>)
 80036f2:	613b      	str	r3, [r7, #16]
      break;
 80036f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80036f6:	693b      	ldr	r3, [r7, #16]
}
 80036f8:	4618      	mov	r0, r3
 80036fa:	371c      	adds	r7, #28
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bc80      	pop	{r7}
 8003700:	4770      	bx	lr
 8003702:	bf00      	nop
 8003704:	40021000 	.word	0x40021000
 8003708:	007a1200 	.word	0x007a1200
 800370c:	0800628c 	.word	0x0800628c
 8003710:	0800629c 	.word	0x0800629c
 8003714:	003d0900 	.word	0x003d0900

08003718 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003718:	b480      	push	{r7}
 800371a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800371c:	4b02      	ldr	r3, [pc, #8]	; (8003728 <HAL_RCC_GetHCLKFreq+0x10>)
 800371e:	681b      	ldr	r3, [r3, #0]
}
 8003720:	4618      	mov	r0, r3
 8003722:	46bd      	mov	sp, r7
 8003724:	bc80      	pop	{r7}
 8003726:	4770      	bx	lr
 8003728:	20000000 	.word	0x20000000

0800372c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003730:	f7ff fff2 	bl	8003718 <HAL_RCC_GetHCLKFreq>
 8003734:	4602      	mov	r2, r0
 8003736:	4b05      	ldr	r3, [pc, #20]	; (800374c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	0a1b      	lsrs	r3, r3, #8
 800373c:	f003 0307 	and.w	r3, r3, #7
 8003740:	4903      	ldr	r1, [pc, #12]	; (8003750 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003742:	5ccb      	ldrb	r3, [r1, r3]
 8003744:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003748:	4618      	mov	r0, r3
 800374a:	bd80      	pop	{r7, pc}
 800374c:	40021000 	.word	0x40021000
 8003750:	08006284 	.word	0x08006284

08003754 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003758:	f7ff ffde 	bl	8003718 <HAL_RCC_GetHCLKFreq>
 800375c:	4602      	mov	r2, r0
 800375e:	4b05      	ldr	r3, [pc, #20]	; (8003774 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	0adb      	lsrs	r3, r3, #11
 8003764:	f003 0307 	and.w	r3, r3, #7
 8003768:	4903      	ldr	r1, [pc, #12]	; (8003778 <HAL_RCC_GetPCLK2Freq+0x24>)
 800376a:	5ccb      	ldrb	r3, [r1, r3]
 800376c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003770:	4618      	mov	r0, r3
 8003772:	bd80      	pop	{r7, pc}
 8003774:	40021000 	.word	0x40021000
 8003778:	08006284 	.word	0x08006284

0800377c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800377c:	b480      	push	{r7}
 800377e:	b085      	sub	sp, #20
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003784:	4b0a      	ldr	r3, [pc, #40]	; (80037b0 <RCC_Delay+0x34>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a0a      	ldr	r2, [pc, #40]	; (80037b4 <RCC_Delay+0x38>)
 800378a:	fba2 2303 	umull	r2, r3, r2, r3
 800378e:	0a5b      	lsrs	r3, r3, #9
 8003790:	687a      	ldr	r2, [r7, #4]
 8003792:	fb02 f303 	mul.w	r3, r2, r3
 8003796:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003798:	bf00      	nop
  }
  while (Delay --);
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	1e5a      	subs	r2, r3, #1
 800379e:	60fa      	str	r2, [r7, #12]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d1f9      	bne.n	8003798 <RCC_Delay+0x1c>
}
 80037a4:	bf00      	nop
 80037a6:	bf00      	nop
 80037a8:	3714      	adds	r7, #20
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bc80      	pop	{r7}
 80037ae:	4770      	bx	lr
 80037b0:	20000000 	.word	0x20000000
 80037b4:	10624dd3 	.word	0x10624dd3

080037b8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b082      	sub	sp, #8
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d101      	bne.n	80037ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80037c6:	2301      	movs	r3, #1
 80037c8:	e042      	b.n	8003850 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037d0:	b2db      	uxtb	r3, r3
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d106      	bne.n	80037e4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2200      	movs	r2, #0
 80037da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80037de:	6878      	ldr	r0, [r7, #4]
 80037e0:	f7fd fb70 	bl	8000ec4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2224      	movs	r2, #36	; 0x24
 80037e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	68da      	ldr	r2, [r3, #12]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80037fa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80037fc:	6878      	ldr	r0, [r7, #4]
 80037fe:	f000 fa8f 	bl	8003d20 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	691a      	ldr	r2, [r3, #16]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003810:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	695a      	ldr	r2, [r3, #20]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003820:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	68da      	ldr	r2, [r3, #12]
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003830:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2200      	movs	r2, #0
 8003836:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2220      	movs	r2, #32
 800383c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2220      	movs	r2, #32
 8003844:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2200      	movs	r2, #0
 800384c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800384e:	2300      	movs	r3, #0
}
 8003850:	4618      	mov	r0, r3
 8003852:	3708      	adds	r7, #8
 8003854:	46bd      	mov	sp, r7
 8003856:	bd80      	pop	{r7, pc}

08003858 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b084      	sub	sp, #16
 800385c:	af00      	add	r7, sp, #0
 800385e:	60f8      	str	r0, [r7, #12]
 8003860:	60b9      	str	r1, [r7, #8]
 8003862:	4613      	mov	r3, r2
 8003864:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800386c:	b2db      	uxtb	r3, r3
 800386e:	2b20      	cmp	r3, #32
 8003870:	d112      	bne.n	8003898 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003872:	68bb      	ldr	r3, [r7, #8]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d002      	beq.n	800387e <HAL_UART_Receive_DMA+0x26>
 8003878:	88fb      	ldrh	r3, [r7, #6]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d101      	bne.n	8003882 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800387e:	2301      	movs	r3, #1
 8003880:	e00b      	b.n	800389a <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	2200      	movs	r2, #0
 8003886:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8003888:	88fb      	ldrh	r3, [r7, #6]
 800388a:	461a      	mov	r2, r3
 800388c:	68b9      	ldr	r1, [r7, #8]
 800388e:	68f8      	ldr	r0, [r7, #12]
 8003890:	f000 f922 	bl	8003ad8 <UART_Start_Receive_DMA>
 8003894:	4603      	mov	r3, r0
 8003896:	e000      	b.n	800389a <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003898:	2302      	movs	r3, #2
  }
}
 800389a:	4618      	mov	r0, r3
 800389c:	3710      	adds	r7, #16
 800389e:	46bd      	mov	sp, r7
 80038a0:	bd80      	pop	{r7, pc}

080038a2 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80038a2:	b480      	push	{r7}
 80038a4:	b083      	sub	sp, #12
 80038a6:	af00      	add	r7, sp, #0
 80038a8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80038aa:	bf00      	nop
 80038ac:	370c      	adds	r7, #12
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bc80      	pop	{r7}
 80038b2:	4770      	bx	lr

080038b4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80038b4:	b480      	push	{r7}
 80038b6:	b083      	sub	sp, #12
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80038bc:	bf00      	nop
 80038be:	370c      	adds	r7, #12
 80038c0:	46bd      	mov	sp, r7
 80038c2:	bc80      	pop	{r7}
 80038c4:	4770      	bx	lr

080038c6 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80038c6:	b480      	push	{r7}
 80038c8:	b083      	sub	sp, #12
 80038ca:	af00      	add	r7, sp, #0
 80038cc:	6078      	str	r0, [r7, #4]
 80038ce:	460b      	mov	r3, r1
 80038d0:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80038d2:	bf00      	nop
 80038d4:	370c      	adds	r7, #12
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bc80      	pop	{r7}
 80038da:	4770      	bx	lr

080038dc <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b09c      	sub	sp, #112	; 0x70
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e8:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f003 0320 	and.w	r3, r3, #32
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d172      	bne.n	80039de <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80038f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038fa:	2200      	movs	r2, #0
 80038fc:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80038fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	330c      	adds	r3, #12
 8003904:	64fb      	str	r3, [r7, #76]	; 0x4c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003906:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003908:	e853 3f00 	ldrex	r3, [r3]
 800390c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800390e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003910:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003914:	66bb      	str	r3, [r7, #104]	; 0x68
 8003916:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	330c      	adds	r3, #12
 800391c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800391e:	65ba      	str	r2, [r7, #88]	; 0x58
 8003920:	657b      	str	r3, [r7, #84]	; 0x54
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003922:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003924:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003926:	e841 2300 	strex	r3, r2, [r1]
 800392a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800392c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800392e:	2b00      	cmp	r3, #0
 8003930:	d1e5      	bne.n	80038fe <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003932:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	3314      	adds	r3, #20
 8003938:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800393a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800393c:	e853 3f00 	ldrex	r3, [r3]
 8003940:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003942:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003944:	f023 0301 	bic.w	r3, r3, #1
 8003948:	667b      	str	r3, [r7, #100]	; 0x64
 800394a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	3314      	adds	r3, #20
 8003950:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003952:	647a      	str	r2, [r7, #68]	; 0x44
 8003954:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003956:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003958:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800395a:	e841 2300 	strex	r3, r2, [r1]
 800395e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003960:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003962:	2b00      	cmp	r3, #0
 8003964:	d1e5      	bne.n	8003932 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003966:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	3314      	adds	r3, #20
 800396c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800396e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003970:	e853 3f00 	ldrex	r3, [r3]
 8003974:	623b      	str	r3, [r7, #32]
   return(result);
 8003976:	6a3b      	ldr	r3, [r7, #32]
 8003978:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800397c:	663b      	str	r3, [r7, #96]	; 0x60
 800397e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	3314      	adds	r3, #20
 8003984:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003986:	633a      	str	r2, [r7, #48]	; 0x30
 8003988:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800398a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800398c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800398e:	e841 2300 	strex	r3, r2, [r1]
 8003992:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003996:	2b00      	cmp	r3, #0
 8003998:	d1e5      	bne.n	8003966 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800399a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800399c:	2220      	movs	r2, #32
 800399e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80039a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039a6:	2b01      	cmp	r3, #1
 80039a8:	d119      	bne.n	80039de <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	330c      	adds	r3, #12
 80039b0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039b2:	693b      	ldr	r3, [r7, #16]
 80039b4:	e853 3f00 	ldrex	r3, [r3]
 80039b8:	60fb      	str	r3, [r7, #12]
   return(result);
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	f023 0310 	bic.w	r3, r3, #16
 80039c0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80039c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	330c      	adds	r3, #12
 80039c8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80039ca:	61fa      	str	r2, [r7, #28]
 80039cc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039ce:	69b9      	ldr	r1, [r7, #24]
 80039d0:	69fa      	ldr	r2, [r7, #28]
 80039d2:	e841 2300 	strex	r3, r2, [r1]
 80039d6:	617b      	str	r3, [r7, #20]
   return(result);
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d1e5      	bne.n	80039aa <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80039de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039e0:	2200      	movs	r2, #0
 80039e2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80039e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039e8:	2b01      	cmp	r3, #1
 80039ea:	d106      	bne.n	80039fa <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80039ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039ee:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80039f0:	4619      	mov	r1, r3
 80039f2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80039f4:	f7ff ff67 	bl	80038c6 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80039f8:	e002      	b.n	8003a00 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80039fa:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80039fc:	f7fd f834 	bl	8000a68 <HAL_UART_RxCpltCallback>
}
 8003a00:	bf00      	nop
 8003a02:	3770      	adds	r7, #112	; 0x70
 8003a04:	46bd      	mov	sp, r7
 8003a06:	bd80      	pop	{r7, pc}

08003a08 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b084      	sub	sp, #16
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a14:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	2201      	movs	r2, #1
 8003a1a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a20:	2b01      	cmp	r3, #1
 8003a22:	d108      	bne.n	8003a36 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003a28:	085b      	lsrs	r3, r3, #1
 8003a2a:	b29b      	uxth	r3, r3
 8003a2c:	4619      	mov	r1, r3
 8003a2e:	68f8      	ldr	r0, [r7, #12]
 8003a30:	f7ff ff49 	bl	80038c6 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003a34:	e002      	b.n	8003a3c <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8003a36:	68f8      	ldr	r0, [r7, #12]
 8003a38:	f7ff ff33 	bl	80038a2 <HAL_UART_RxHalfCpltCallback>
}
 8003a3c:	bf00      	nop
 8003a3e:	3710      	adds	r7, #16
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bd80      	pop	{r7, pc}

08003a44 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b084      	sub	sp, #16
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a54:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003a56:	68bb      	ldr	r3, [r7, #8]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	695b      	ldr	r3, [r3, #20]
 8003a5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	bf14      	ite	ne
 8003a64:	2301      	movne	r3, #1
 8003a66:	2300      	moveq	r3, #0
 8003a68:	b2db      	uxtb	r3, r3
 8003a6a:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003a6c:	68bb      	ldr	r3, [r7, #8]
 8003a6e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a72:	b2db      	uxtb	r3, r3
 8003a74:	2b21      	cmp	r3, #33	; 0x21
 8003a76:	d108      	bne.n	8003a8a <UART_DMAError+0x46>
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d005      	beq.n	8003a8a <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8003a7e:	68bb      	ldr	r3, [r7, #8]
 8003a80:	2200      	movs	r2, #0
 8003a82:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8003a84:	68b8      	ldr	r0, [r7, #8]
 8003a86:	f000 f8c1 	bl	8003c0c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003a8a:	68bb      	ldr	r3, [r7, #8]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	695b      	ldr	r3, [r3, #20]
 8003a90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	bf14      	ite	ne
 8003a98:	2301      	movne	r3, #1
 8003a9a:	2300      	moveq	r3, #0
 8003a9c:	b2db      	uxtb	r3, r3
 8003a9e:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003aa6:	b2db      	uxtb	r3, r3
 8003aa8:	2b22      	cmp	r3, #34	; 0x22
 8003aaa:	d108      	bne.n	8003abe <UART_DMAError+0x7a>
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d005      	beq.n	8003abe <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8003ab2:	68bb      	ldr	r3, [r7, #8]
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8003ab8:	68b8      	ldr	r0, [r7, #8]
 8003aba:	f000 f8ce 	bl	8003c5a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003abe:	68bb      	ldr	r3, [r7, #8]
 8003ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ac2:	f043 0210 	orr.w	r2, r3, #16
 8003ac6:	68bb      	ldr	r3, [r7, #8]
 8003ac8:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003aca:	68b8      	ldr	r0, [r7, #8]
 8003acc:	f7ff fef2 	bl	80038b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003ad0:	bf00      	nop
 8003ad2:	3710      	adds	r7, #16
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	bd80      	pop	{r7, pc}

08003ad8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b098      	sub	sp, #96	; 0x60
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	60f8      	str	r0, [r7, #12]
 8003ae0:	60b9      	str	r1, [r7, #8]
 8003ae2:	4613      	mov	r3, r2
 8003ae4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8003ae6:	68ba      	ldr	r2, [r7, #8]
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	88fa      	ldrh	r2, [r7, #6]
 8003af0:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	2200      	movs	r2, #0
 8003af6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	2222      	movs	r2, #34	; 0x22
 8003afc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b04:	4a3e      	ldr	r2, [pc, #248]	; (8003c00 <UART_Start_Receive_DMA+0x128>)
 8003b06:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b0c:	4a3d      	ldr	r2, [pc, #244]	; (8003c04 <UART_Start_Receive_DMA+0x12c>)
 8003b0e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b14:	4a3c      	ldr	r2, [pc, #240]	; (8003c08 <UART_Start_Receive_DMA+0x130>)
 8003b16:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8003b20:	f107 0308 	add.w	r3, r7, #8
 8003b24:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	3304      	adds	r3, #4
 8003b30:	4619      	mov	r1, r3
 8003b32:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b34:	681a      	ldr	r2, [r3, #0]
 8003b36:	88fb      	ldrh	r3, [r7, #6]
 8003b38:	f7fd fea4 	bl	8001884 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	613b      	str	r3, [r7, #16]
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	613b      	str	r3, [r7, #16]
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	613b      	str	r3, [r7, #16]
 8003b50:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	691b      	ldr	r3, [r3, #16]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d019      	beq.n	8003b8e <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	330c      	adds	r3, #12
 8003b60:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b64:	e853 3f00 	ldrex	r3, [r3]
 8003b68:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003b6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b70:	65bb      	str	r3, [r7, #88]	; 0x58
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	330c      	adds	r3, #12
 8003b78:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003b7a:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003b7c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b7e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8003b80:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003b82:	e841 2300 	strex	r3, r2, [r1]
 8003b86:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8003b88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d1e5      	bne.n	8003b5a <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	3314      	adds	r3, #20
 8003b94:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b98:	e853 3f00 	ldrex	r3, [r3]
 8003b9c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003b9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ba0:	f043 0301 	orr.w	r3, r3, #1
 8003ba4:	657b      	str	r3, [r7, #84]	; 0x54
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	3314      	adds	r3, #20
 8003bac:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003bae:	63ba      	str	r2, [r7, #56]	; 0x38
 8003bb0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bb2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003bb4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003bb6:	e841 2300 	strex	r3, r2, [r1]
 8003bba:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003bbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d1e5      	bne.n	8003b8e <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	3314      	adds	r3, #20
 8003bc8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bca:	69bb      	ldr	r3, [r7, #24]
 8003bcc:	e853 3f00 	ldrex	r3, [r3]
 8003bd0:	617b      	str	r3, [r7, #20]
   return(result);
 8003bd2:	697b      	ldr	r3, [r7, #20]
 8003bd4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003bd8:	653b      	str	r3, [r7, #80]	; 0x50
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	3314      	adds	r3, #20
 8003be0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003be2:	627a      	str	r2, [r7, #36]	; 0x24
 8003be4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003be6:	6a39      	ldr	r1, [r7, #32]
 8003be8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bea:	e841 2300 	strex	r3, r2, [r1]
 8003bee:	61fb      	str	r3, [r7, #28]
   return(result);
 8003bf0:	69fb      	ldr	r3, [r7, #28]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d1e5      	bne.n	8003bc2 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8003bf6:	2300      	movs	r3, #0
}
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	3760      	adds	r7, #96	; 0x60
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	bd80      	pop	{r7, pc}
 8003c00:	080038dd 	.word	0x080038dd
 8003c04:	08003a09 	.word	0x08003a09
 8003c08:	08003a45 	.word	0x08003a45

08003c0c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	b089      	sub	sp, #36	; 0x24
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	330c      	adds	r3, #12
 8003c1a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	e853 3f00 	ldrex	r3, [r3]
 8003c22:	60bb      	str	r3, [r7, #8]
   return(result);
 8003c24:	68bb      	ldr	r3, [r7, #8]
 8003c26:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003c2a:	61fb      	str	r3, [r7, #28]
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	330c      	adds	r3, #12
 8003c32:	69fa      	ldr	r2, [r7, #28]
 8003c34:	61ba      	str	r2, [r7, #24]
 8003c36:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c38:	6979      	ldr	r1, [r7, #20]
 8003c3a:	69ba      	ldr	r2, [r7, #24]
 8003c3c:	e841 2300 	strex	r3, r2, [r1]
 8003c40:	613b      	str	r3, [r7, #16]
   return(result);
 8003c42:	693b      	ldr	r3, [r7, #16]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d1e5      	bne.n	8003c14 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2220      	movs	r2, #32
 8003c4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 8003c50:	bf00      	nop
 8003c52:	3724      	adds	r7, #36	; 0x24
 8003c54:	46bd      	mov	sp, r7
 8003c56:	bc80      	pop	{r7}
 8003c58:	4770      	bx	lr

08003c5a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003c5a:	b480      	push	{r7}
 8003c5c:	b095      	sub	sp, #84	; 0x54
 8003c5e:	af00      	add	r7, sp, #0
 8003c60:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	330c      	adds	r3, #12
 8003c68:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c6c:	e853 3f00 	ldrex	r3, [r3]
 8003c70:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003c72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c74:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003c78:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	330c      	adds	r3, #12
 8003c80:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003c82:	643a      	str	r2, [r7, #64]	; 0x40
 8003c84:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c86:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003c88:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003c8a:	e841 2300 	strex	r3, r2, [r1]
 8003c8e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003c90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d1e5      	bne.n	8003c62 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	3314      	adds	r3, #20
 8003c9c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c9e:	6a3b      	ldr	r3, [r7, #32]
 8003ca0:	e853 3f00 	ldrex	r3, [r3]
 8003ca4:	61fb      	str	r3, [r7, #28]
   return(result);
 8003ca6:	69fb      	ldr	r3, [r7, #28]
 8003ca8:	f023 0301 	bic.w	r3, r3, #1
 8003cac:	64bb      	str	r3, [r7, #72]	; 0x48
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	3314      	adds	r3, #20
 8003cb4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003cb6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003cb8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003cbc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003cbe:	e841 2300 	strex	r3, r2, [r1]
 8003cc2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d1e5      	bne.n	8003c96 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cce:	2b01      	cmp	r3, #1
 8003cd0:	d119      	bne.n	8003d06 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	330c      	adds	r3, #12
 8003cd8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	e853 3f00 	ldrex	r3, [r3]
 8003ce0:	60bb      	str	r3, [r7, #8]
   return(result);
 8003ce2:	68bb      	ldr	r3, [r7, #8]
 8003ce4:	f023 0310 	bic.w	r3, r3, #16
 8003ce8:	647b      	str	r3, [r7, #68]	; 0x44
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	330c      	adds	r3, #12
 8003cf0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003cf2:	61ba      	str	r2, [r7, #24]
 8003cf4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cf6:	6979      	ldr	r1, [r7, #20]
 8003cf8:	69ba      	ldr	r2, [r7, #24]
 8003cfa:	e841 2300 	strex	r3, r2, [r1]
 8003cfe:	613b      	str	r3, [r7, #16]
   return(result);
 8003d00:	693b      	ldr	r3, [r7, #16]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d1e5      	bne.n	8003cd2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2220      	movs	r2, #32
 8003d0a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2200      	movs	r2, #0
 8003d12:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003d14:	bf00      	nop
 8003d16:	3754      	adds	r7, #84	; 0x54
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	bc80      	pop	{r7}
 8003d1c:	4770      	bx	lr
	...

08003d20 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b084      	sub	sp, #16
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	691b      	ldr	r3, [r3, #16]
 8003d2e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	68da      	ldr	r2, [r3, #12]
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	430a      	orrs	r2, r1
 8003d3c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	689a      	ldr	r2, [r3, #8]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	691b      	ldr	r3, [r3, #16]
 8003d46:	431a      	orrs	r2, r3
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	695b      	ldr	r3, [r3, #20]
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	68db      	ldr	r3, [r3, #12]
 8003d56:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003d5a:	f023 030c 	bic.w	r3, r3, #12
 8003d5e:	687a      	ldr	r2, [r7, #4]
 8003d60:	6812      	ldr	r2, [r2, #0]
 8003d62:	68b9      	ldr	r1, [r7, #8]
 8003d64:	430b      	orrs	r3, r1
 8003d66:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	695b      	ldr	r3, [r3, #20]
 8003d6e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	699a      	ldr	r2, [r3, #24]
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	430a      	orrs	r2, r1
 8003d7c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4a2c      	ldr	r2, [pc, #176]	; (8003e34 <UART_SetConfig+0x114>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d103      	bne.n	8003d90 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003d88:	f7ff fce4 	bl	8003754 <HAL_RCC_GetPCLK2Freq>
 8003d8c:	60f8      	str	r0, [r7, #12]
 8003d8e:	e002      	b.n	8003d96 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003d90:	f7ff fccc 	bl	800372c <HAL_RCC_GetPCLK1Freq>
 8003d94:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003d96:	68fa      	ldr	r2, [r7, #12]
 8003d98:	4613      	mov	r3, r2
 8003d9a:	009b      	lsls	r3, r3, #2
 8003d9c:	4413      	add	r3, r2
 8003d9e:	009a      	lsls	r2, r3, #2
 8003da0:	441a      	add	r2, r3
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	685b      	ldr	r3, [r3, #4]
 8003da6:	009b      	lsls	r3, r3, #2
 8003da8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dac:	4a22      	ldr	r2, [pc, #136]	; (8003e38 <UART_SetConfig+0x118>)
 8003dae:	fba2 2303 	umull	r2, r3, r2, r3
 8003db2:	095b      	lsrs	r3, r3, #5
 8003db4:	0119      	lsls	r1, r3, #4
 8003db6:	68fa      	ldr	r2, [r7, #12]
 8003db8:	4613      	mov	r3, r2
 8003dba:	009b      	lsls	r3, r3, #2
 8003dbc:	4413      	add	r3, r2
 8003dbe:	009a      	lsls	r2, r3, #2
 8003dc0:	441a      	add	r2, r3
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	009b      	lsls	r3, r3, #2
 8003dc8:	fbb2 f2f3 	udiv	r2, r2, r3
 8003dcc:	4b1a      	ldr	r3, [pc, #104]	; (8003e38 <UART_SetConfig+0x118>)
 8003dce:	fba3 0302 	umull	r0, r3, r3, r2
 8003dd2:	095b      	lsrs	r3, r3, #5
 8003dd4:	2064      	movs	r0, #100	; 0x64
 8003dd6:	fb00 f303 	mul.w	r3, r0, r3
 8003dda:	1ad3      	subs	r3, r2, r3
 8003ddc:	011b      	lsls	r3, r3, #4
 8003dde:	3332      	adds	r3, #50	; 0x32
 8003de0:	4a15      	ldr	r2, [pc, #84]	; (8003e38 <UART_SetConfig+0x118>)
 8003de2:	fba2 2303 	umull	r2, r3, r2, r3
 8003de6:	095b      	lsrs	r3, r3, #5
 8003de8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003dec:	4419      	add	r1, r3
 8003dee:	68fa      	ldr	r2, [r7, #12]
 8003df0:	4613      	mov	r3, r2
 8003df2:	009b      	lsls	r3, r3, #2
 8003df4:	4413      	add	r3, r2
 8003df6:	009a      	lsls	r2, r3, #2
 8003df8:	441a      	add	r2, r3
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	685b      	ldr	r3, [r3, #4]
 8003dfe:	009b      	lsls	r3, r3, #2
 8003e00:	fbb2 f2f3 	udiv	r2, r2, r3
 8003e04:	4b0c      	ldr	r3, [pc, #48]	; (8003e38 <UART_SetConfig+0x118>)
 8003e06:	fba3 0302 	umull	r0, r3, r3, r2
 8003e0a:	095b      	lsrs	r3, r3, #5
 8003e0c:	2064      	movs	r0, #100	; 0x64
 8003e0e:	fb00 f303 	mul.w	r3, r0, r3
 8003e12:	1ad3      	subs	r3, r2, r3
 8003e14:	011b      	lsls	r3, r3, #4
 8003e16:	3332      	adds	r3, #50	; 0x32
 8003e18:	4a07      	ldr	r2, [pc, #28]	; (8003e38 <UART_SetConfig+0x118>)
 8003e1a:	fba2 2303 	umull	r2, r3, r2, r3
 8003e1e:	095b      	lsrs	r3, r3, #5
 8003e20:	f003 020f 	and.w	r2, r3, #15
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	440a      	add	r2, r1
 8003e2a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003e2c:	bf00      	nop
 8003e2e:	3710      	adds	r7, #16
 8003e30:	46bd      	mov	sp, r7
 8003e32:	bd80      	pop	{r7, pc}
 8003e34:	40013800 	.word	0x40013800
 8003e38:	51eb851f 	.word	0x51eb851f

08003e3c <writeReg>:

//---------------------------------------------------------
// I2C communication Functions
//---------------------------------------------------------
// Write an 8-bit register
void writeReg(uint8_t reg, uint8_t value) {
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b086      	sub	sp, #24
 8003e40:	af04      	add	r7, sp, #16
 8003e42:	4603      	mov	r3, r0
 8003e44:	460a      	mov	r2, r1
 8003e46:	71fb      	strb	r3, [r7, #7]
 8003e48:	4613      	mov	r3, r2
 8003e4a:	71bb      	strb	r3, [r7, #6]

  msgBuffer[0] = value; // Assign the value to the buffer.
 8003e4c:	4a0c      	ldr	r2, [pc, #48]	; (8003e80 <writeReg+0x44>)
 8003e4e:	79bb      	ldrb	r3, [r7, #6]
 8003e50:	7013      	strb	r3, [r2, #0]
  i2cStat = HAL_I2C_Mem_Write(&VL53L0X_I2C_Handler, g_i2cAddr | I2C_WRITE, reg, 1, msgBuffer, 1, I2C_TIMEOUT);
 8003e52:	4b0c      	ldr	r3, [pc, #48]	; (8003e84 <writeReg+0x48>)
 8003e54:	781b      	ldrb	r3, [r3, #0]
 8003e56:	b299      	uxth	r1, r3
 8003e58:	79fb      	ldrb	r3, [r7, #7]
 8003e5a:	b29a      	uxth	r2, r3
 8003e5c:	2364      	movs	r3, #100	; 0x64
 8003e5e:	9302      	str	r3, [sp, #8]
 8003e60:	2301      	movs	r3, #1
 8003e62:	9301      	str	r3, [sp, #4]
 8003e64:	4b06      	ldr	r3, [pc, #24]	; (8003e80 <writeReg+0x44>)
 8003e66:	9300      	str	r3, [sp, #0]
 8003e68:	2301      	movs	r3, #1
 8003e6a:	4807      	ldr	r0, [pc, #28]	; (8003e88 <writeReg+0x4c>)
 8003e6c:	f7fe f97e 	bl	800216c <HAL_I2C_Mem_Write>
 8003e70:	4603      	mov	r3, r0
 8003e72:	461a      	mov	r2, r3
 8003e74:	4b05      	ldr	r3, [pc, #20]	; (8003e8c <writeReg+0x50>)
 8003e76:	701a      	strb	r2, [r3, #0]
}
 8003e78:	bf00      	nop
 8003e7a:	3708      	adds	r7, #8
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	bd80      	pop	{r7, pc}
 8003e80:	20000460 	.word	0x20000460
 8003e84:	20000009 	.word	0x20000009
 8003e88:	2000040c 	.word	0x2000040c
 8003e8c:	20000464 	.word	0x20000464

08003e90 <writeReg16Bit>:

// Write a 16-bit register
void writeReg16Bit(uint8_t reg, uint16_t value){
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b086      	sub	sp, #24
 8003e94:	af04      	add	r7, sp, #16
 8003e96:	4603      	mov	r3, r0
 8003e98:	460a      	mov	r2, r1
 8003e9a:	71fb      	strb	r3, [r7, #7]
 8003e9c:	4613      	mov	r3, r2
 8003e9e:	80bb      	strh	r3, [r7, #4]
 8003ea0:	88ba      	ldrh	r2, [r7, #4]

  memcpy(msgBuffer, &value, 2); // Assign the value to the buffer.
 8003ea2:	4b0c      	ldr	r3, [pc, #48]	; (8003ed4 <writeReg16Bit+0x44>)
 8003ea4:	801a      	strh	r2, [r3, #0]
  i2cStat = HAL_I2C_Mem_Write(&VL53L0X_I2C_Handler, g_i2cAddr | I2C_WRITE, reg, 1, msgBuffer, 2, I2C_TIMEOUT);
 8003ea6:	4b0c      	ldr	r3, [pc, #48]	; (8003ed8 <writeReg16Bit+0x48>)
 8003ea8:	781b      	ldrb	r3, [r3, #0]
 8003eaa:	b299      	uxth	r1, r3
 8003eac:	79fb      	ldrb	r3, [r7, #7]
 8003eae:	b29a      	uxth	r2, r3
 8003eb0:	2364      	movs	r3, #100	; 0x64
 8003eb2:	9302      	str	r3, [sp, #8]
 8003eb4:	2302      	movs	r3, #2
 8003eb6:	9301      	str	r3, [sp, #4]
 8003eb8:	4b06      	ldr	r3, [pc, #24]	; (8003ed4 <writeReg16Bit+0x44>)
 8003eba:	9300      	str	r3, [sp, #0]
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	4807      	ldr	r0, [pc, #28]	; (8003edc <writeReg16Bit+0x4c>)
 8003ec0:	f7fe f954 	bl	800216c <HAL_I2C_Mem_Write>
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	461a      	mov	r2, r3
 8003ec8:	4b05      	ldr	r3, [pc, #20]	; (8003ee0 <writeReg16Bit+0x50>)
 8003eca:	701a      	strb	r2, [r3, #0]
}
 8003ecc:	bf00      	nop
 8003ece:	3708      	adds	r7, #8
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	bd80      	pop	{r7, pc}
 8003ed4:	20000460 	.word	0x20000460
 8003ed8:	20000009 	.word	0x20000009
 8003edc:	2000040c 	.word	0x2000040c
 8003ee0:	20000464 	.word	0x20000464

08003ee4 <readReg>:
  memcpy(msgBuffer, &value, 4); // Assign the value to the buffer.
  i2cStat = HAL_I2C_Mem_Write(&VL53L0X_I2C_Handler, g_i2cAddr | I2C_WRITE, reg, 1, msgBuffer, 4, I2C_TIMEOUT);
}

// Read an 8-bit register
uint8_t readReg(uint8_t reg) {
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b088      	sub	sp, #32
 8003ee8:	af04      	add	r7, sp, #16
 8003eea:	4603      	mov	r3, r0
 8003eec:	71fb      	strb	r3, [r7, #7]
  uint8_t value;

  i2cStat = HAL_I2C_Mem_Read(&VL53L0X_I2C_Handler, g_i2cAddr | I2C_READ, reg, 1, msgBuffer, 1, I2C_TIMEOUT);
 8003eee:	4b0f      	ldr	r3, [pc, #60]	; (8003f2c <readReg+0x48>)
 8003ef0:	781b      	ldrb	r3, [r3, #0]
 8003ef2:	f043 0301 	orr.w	r3, r3, #1
 8003ef6:	b2db      	uxtb	r3, r3
 8003ef8:	b299      	uxth	r1, r3
 8003efa:	79fb      	ldrb	r3, [r7, #7]
 8003efc:	b29a      	uxth	r2, r3
 8003efe:	2364      	movs	r3, #100	; 0x64
 8003f00:	9302      	str	r3, [sp, #8]
 8003f02:	2301      	movs	r3, #1
 8003f04:	9301      	str	r3, [sp, #4]
 8003f06:	4b0a      	ldr	r3, [pc, #40]	; (8003f30 <readReg+0x4c>)
 8003f08:	9300      	str	r3, [sp, #0]
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	4809      	ldr	r0, [pc, #36]	; (8003f34 <readReg+0x50>)
 8003f0e:	f7fe fa27 	bl	8002360 <HAL_I2C_Mem_Read>
 8003f12:	4603      	mov	r3, r0
 8003f14:	461a      	mov	r2, r3
 8003f16:	4b08      	ldr	r3, [pc, #32]	; (8003f38 <readReg+0x54>)
 8003f18:	701a      	strb	r2, [r3, #0]
  value = msgBuffer[0];
 8003f1a:	4b05      	ldr	r3, [pc, #20]	; (8003f30 <readReg+0x4c>)
 8003f1c:	781b      	ldrb	r3, [r3, #0]
 8003f1e:	73fb      	strb	r3, [r7, #15]

  return value;
 8003f20:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f22:	4618      	mov	r0, r3
 8003f24:	3710      	adds	r7, #16
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bd80      	pop	{r7, pc}
 8003f2a:	bf00      	nop
 8003f2c:	20000009 	.word	0x20000009
 8003f30:	20000460 	.word	0x20000460
 8003f34:	2000040c 	.word	0x2000040c
 8003f38:	20000464 	.word	0x20000464

08003f3c <readReg16Bit>:

// Read a 16-bit register
uint16_t readReg16Bit(uint8_t reg) {
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b088      	sub	sp, #32
 8003f40:	af04      	add	r7, sp, #16
 8003f42:	4603      	mov	r3, r0
 8003f44:	71fb      	strb	r3, [r7, #7]
  uint16_t value;

  i2cStat = HAL_I2C_Mem_Read(&VL53L0X_I2C_Handler, g_i2cAddr | I2C_READ, reg, 1, msgBuffer, 2, I2C_TIMEOUT);
 8003f46:	4b0f      	ldr	r3, [pc, #60]	; (8003f84 <readReg16Bit+0x48>)
 8003f48:	781b      	ldrb	r3, [r3, #0]
 8003f4a:	f043 0301 	orr.w	r3, r3, #1
 8003f4e:	b2db      	uxtb	r3, r3
 8003f50:	b299      	uxth	r1, r3
 8003f52:	79fb      	ldrb	r3, [r7, #7]
 8003f54:	b29a      	uxth	r2, r3
 8003f56:	2364      	movs	r3, #100	; 0x64
 8003f58:	9302      	str	r3, [sp, #8]
 8003f5a:	2302      	movs	r3, #2
 8003f5c:	9301      	str	r3, [sp, #4]
 8003f5e:	4b0a      	ldr	r3, [pc, #40]	; (8003f88 <readReg16Bit+0x4c>)
 8003f60:	9300      	str	r3, [sp, #0]
 8003f62:	2301      	movs	r3, #1
 8003f64:	4809      	ldr	r0, [pc, #36]	; (8003f8c <readReg16Bit+0x50>)
 8003f66:	f7fe f9fb 	bl	8002360 <HAL_I2C_Mem_Read>
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	461a      	mov	r2, r3
 8003f6e:	4b08      	ldr	r3, [pc, #32]	; (8003f90 <readReg16Bit+0x54>)
 8003f70:	701a      	strb	r2, [r3, #0]
 8003f72:	4b05      	ldr	r3, [pc, #20]	; (8003f88 <readReg16Bit+0x4c>)
 8003f74:	881b      	ldrh	r3, [r3, #0]
  memcpy(&value, msgBuffer, 2);
 8003f76:	81fb      	strh	r3, [r7, #14]

  return value;
 8003f78:	89fb      	ldrh	r3, [r7, #14]
}
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	3710      	adds	r7, #16
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bd80      	pop	{r7, pc}
 8003f82:	bf00      	nop
 8003f84:	20000009 	.word	0x20000009
 8003f88:	20000460 	.word	0x20000460
 8003f8c:	2000040c 	.word	0x2000040c
 8003f90:	20000464 	.word	0x20000464

08003f94 <writeMulti>:
  return value;
}

// Write an arbitrary number of bytes from the given array to the sensor,
// starting at the given register
void writeMulti(uint8_t reg, uint8_t const *src, uint8_t count){
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b086      	sub	sp, #24
 8003f98:	af04      	add	r7, sp, #16
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	6039      	str	r1, [r7, #0]
 8003f9e:	71fb      	strb	r3, [r7, #7]
 8003fa0:	4613      	mov	r3, r2
 8003fa2:	71bb      	strb	r3, [r7, #6]
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	461a      	mov	r2, r3

  memcpy(msgBuffer, src, 4);
 8003faa:	4b0d      	ldr	r3, [pc, #52]	; (8003fe0 <writeMulti+0x4c>)
 8003fac:	601a      	str	r2, [r3, #0]
  i2cStat = HAL_I2C_Mem_Write(&VL53L0X_I2C_Handler, g_i2cAddr | I2C_WRITE, reg, 1, msgBuffer, count, I2C_TIMEOUT);
 8003fae:	4b0d      	ldr	r3, [pc, #52]	; (8003fe4 <writeMulti+0x50>)
 8003fb0:	781b      	ldrb	r3, [r3, #0]
 8003fb2:	b299      	uxth	r1, r3
 8003fb4:	79fb      	ldrb	r3, [r7, #7]
 8003fb6:	b29a      	uxth	r2, r3
 8003fb8:	79bb      	ldrb	r3, [r7, #6]
 8003fba:	b29b      	uxth	r3, r3
 8003fbc:	2064      	movs	r0, #100	; 0x64
 8003fbe:	9002      	str	r0, [sp, #8]
 8003fc0:	9301      	str	r3, [sp, #4]
 8003fc2:	4b07      	ldr	r3, [pc, #28]	; (8003fe0 <writeMulti+0x4c>)
 8003fc4:	9300      	str	r3, [sp, #0]
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	4807      	ldr	r0, [pc, #28]	; (8003fe8 <writeMulti+0x54>)
 8003fca:	f7fe f8cf 	bl	800216c <HAL_I2C_Mem_Write>
 8003fce:	4603      	mov	r3, r0
 8003fd0:	461a      	mov	r2, r3
 8003fd2:	4b06      	ldr	r3, [pc, #24]	; (8003fec <writeMulti+0x58>)
 8003fd4:	701a      	strb	r2, [r3, #0]
}
 8003fd6:	bf00      	nop
 8003fd8:	3708      	adds	r7, #8
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	bd80      	pop	{r7, pc}
 8003fde:	bf00      	nop
 8003fe0:	20000460 	.word	0x20000460
 8003fe4:	20000009 	.word	0x20000009
 8003fe8:	2000040c 	.word	0x2000040c
 8003fec:	20000464 	.word	0x20000464

08003ff0 <readMulti>:

// Read an arbitrary number of bytes from the sensor, starting at the given
// register, into the given array
void readMulti(uint8_t reg, uint8_t * dst, uint8_t count) {
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b086      	sub	sp, #24
 8003ff4:	af04      	add	r7, sp, #16
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	6039      	str	r1, [r7, #0]
 8003ffa:	71fb      	strb	r3, [r7, #7]
 8003ffc:	4613      	mov	r3, r2
 8003ffe:	71bb      	strb	r3, [r7, #6]

	i2cStat = HAL_I2C_Mem_Read(&VL53L0X_I2C_Handler, g_i2cAddr | I2C_READ, reg, 1, dst, count, I2C_TIMEOUT);
 8004000:	4b0d      	ldr	r3, [pc, #52]	; (8004038 <readMulti+0x48>)
 8004002:	781b      	ldrb	r3, [r3, #0]
 8004004:	f043 0301 	orr.w	r3, r3, #1
 8004008:	b2db      	uxtb	r3, r3
 800400a:	b299      	uxth	r1, r3
 800400c:	79fb      	ldrb	r3, [r7, #7]
 800400e:	b29a      	uxth	r2, r3
 8004010:	79bb      	ldrb	r3, [r7, #6]
 8004012:	b29b      	uxth	r3, r3
 8004014:	2064      	movs	r0, #100	; 0x64
 8004016:	9002      	str	r0, [sp, #8]
 8004018:	9301      	str	r3, [sp, #4]
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	9300      	str	r3, [sp, #0]
 800401e:	2301      	movs	r3, #1
 8004020:	4806      	ldr	r0, [pc, #24]	; (800403c <readMulti+0x4c>)
 8004022:	f7fe f99d 	bl	8002360 <HAL_I2C_Mem_Read>
 8004026:	4603      	mov	r3, r0
 8004028:	461a      	mov	r2, r3
 800402a:	4b05      	ldr	r3, [pc, #20]	; (8004040 <readMulti+0x50>)
 800402c:	701a      	strb	r2, [r3, #0]
}
 800402e:	bf00      	nop
 8004030:	3708      	adds	r7, #8
 8004032:	46bd      	mov	sp, r7
 8004034:	bd80      	pop	{r7, pc}
 8004036:	bf00      	nop
 8004038:	20000009 	.word	0x20000009
 800403c:	2000040c 	.word	0x2000040c
 8004040:	20000464 	.word	0x20000464

08004044 <initVL53L0X>:
// (VL53L0X_PerformRefSpadManagement()), since the API user manual says that it
// is performed by ST on the bare modules; it seems like that should work well
// enough unless a cover glass is added.
// If io_2v8 (optional) is true or not given, the sensor is configured for 2V8
// mode.
bool initVL53L0X(bool io_2v8, I2C_HandleTypeDef *handler){
 8004044:	b580      	push	{r7, lr}
 8004046:	b086      	sub	sp, #24
 8004048:	af00      	add	r7, sp, #0
 800404a:	4603      	mov	r3, r0
 800404c:	6039      	str	r1, [r7, #0]
 800404e:	71fb      	strb	r3, [r7, #7]
  // VL53L0X_DataInit() begin

  // Handler
  memcpy(&VL53L0X_I2C_Handler, handler, sizeof(*handler));
 8004050:	2254      	movs	r2, #84	; 0x54
 8004052:	6839      	ldr	r1, [r7, #0]
 8004054:	4854      	ldr	r0, [pc, #336]	; (80041a8 <initVL53L0X+0x164>)
 8004056:	f001 fbf3 	bl	8005840 <memcpy>

  // Reset the message buffer.
  msgBuffer[0] = 0;
 800405a:	4b54      	ldr	r3, [pc, #336]	; (80041ac <initVL53L0X+0x168>)
 800405c:	2200      	movs	r2, #0
 800405e:	701a      	strb	r2, [r3, #0]
  msgBuffer[1] = 0;
 8004060:	4b52      	ldr	r3, [pc, #328]	; (80041ac <initVL53L0X+0x168>)
 8004062:	2200      	movs	r2, #0
 8004064:	705a      	strb	r2, [r3, #1]
  msgBuffer[2] = 0;
 8004066:	4b51      	ldr	r3, [pc, #324]	; (80041ac <initVL53L0X+0x168>)
 8004068:	2200      	movs	r2, #0
 800406a:	709a      	strb	r2, [r3, #2]
  msgBuffer[3] = 0;
 800406c:	4b4f      	ldr	r3, [pc, #316]	; (80041ac <initVL53L0X+0x168>)
 800406e:	2200      	movs	r2, #0
 8004070:	70da      	strb	r2, [r3, #3]

  // sensor uses 1V8 mode for I/O by default; switch to 2V8 mode if necessary
  if (io_2v8)
 8004072:	79fb      	ldrb	r3, [r7, #7]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d00a      	beq.n	800408e <initVL53L0X+0x4a>
  {
    writeReg(VHV_CONFIG_PAD_SCL_SDA__EXTSUP_HV,
      readReg(VHV_CONFIG_PAD_SCL_SDA__EXTSUP_HV) | 0x01); // set bit 0
 8004078:	2089      	movs	r0, #137	; 0x89
 800407a:	f7ff ff33 	bl	8003ee4 <readReg>
 800407e:	4603      	mov	r3, r0
    writeReg(VHV_CONFIG_PAD_SCL_SDA__EXTSUP_HV,
 8004080:	f043 0301 	orr.w	r3, r3, #1
 8004084:	b2db      	uxtb	r3, r3
 8004086:	4619      	mov	r1, r3
 8004088:	2089      	movs	r0, #137	; 0x89
 800408a:	f7ff fed7 	bl	8003e3c <writeReg>
  }

  // "Set I2C standard mode"
  writeReg(0x88, 0x00);
 800408e:	2100      	movs	r1, #0
 8004090:	2088      	movs	r0, #136	; 0x88
 8004092:	f7ff fed3 	bl	8003e3c <writeReg>

  writeReg(0x80, 0x01);
 8004096:	2101      	movs	r1, #1
 8004098:	2080      	movs	r0, #128	; 0x80
 800409a:	f7ff fecf 	bl	8003e3c <writeReg>
  writeReg(0xFF, 0x01);
 800409e:	2101      	movs	r1, #1
 80040a0:	20ff      	movs	r0, #255	; 0xff
 80040a2:	f7ff fecb 	bl	8003e3c <writeReg>
  writeReg(0x00, 0x00);
 80040a6:	2100      	movs	r1, #0
 80040a8:	2000      	movs	r0, #0
 80040aa:	f7ff fec7 	bl	8003e3c <writeReg>
  g_stopVariable = readReg(0x91);
 80040ae:	2091      	movs	r0, #145	; 0x91
 80040b0:	f7ff ff18 	bl	8003ee4 <readReg>
 80040b4:	4603      	mov	r3, r0
 80040b6:	461a      	mov	r2, r3
 80040b8:	4b3d      	ldr	r3, [pc, #244]	; (80041b0 <initVL53L0X+0x16c>)
 80040ba:	701a      	strb	r2, [r3, #0]
  writeReg(0x00, 0x01);
 80040bc:	2101      	movs	r1, #1
 80040be:	2000      	movs	r0, #0
 80040c0:	f7ff febc 	bl	8003e3c <writeReg>
  writeReg(0xFF, 0x00);
 80040c4:	2100      	movs	r1, #0
 80040c6:	20ff      	movs	r0, #255	; 0xff
 80040c8:	f7ff feb8 	bl	8003e3c <writeReg>
  writeReg(0x80, 0x00);
 80040cc:	2100      	movs	r1, #0
 80040ce:	2080      	movs	r0, #128	; 0x80
 80040d0:	f7ff feb4 	bl	8003e3c <writeReg>

  // disable SIGNAL_RATE_MSRC (bit 1) and SIGNAL_RATE_PRE_RANGE (bit 4) limit checks
  writeReg(MSRC_CONFIG_CONTROL, readReg(MSRC_CONFIG_CONTROL) | 0x12);
 80040d4:	2060      	movs	r0, #96	; 0x60
 80040d6:	f7ff ff05 	bl	8003ee4 <readReg>
 80040da:	4603      	mov	r3, r0
 80040dc:	f043 0312 	orr.w	r3, r3, #18
 80040e0:	b2db      	uxtb	r3, r3
 80040e2:	4619      	mov	r1, r3
 80040e4:	2060      	movs	r0, #96	; 0x60
 80040e6:	f7ff fea9 	bl	8003e3c <writeReg>

  // set final range signal rate limit to 0.25 MCPS (million counts per second)
  setSignalRateLimit(0.25);
 80040ea:	f04f 507a 	mov.w	r0, #1048576000	; 0x3e800000
 80040ee:	f000 fa07 	bl	8004500 <setSignalRateLimit>

  writeReg(SYSTEM_SEQUENCE_CONFIG, 0xFF);
 80040f2:	21ff      	movs	r1, #255	; 0xff
 80040f4:	2001      	movs	r0, #1
 80040f6:	f7ff fea1 	bl	8003e3c <writeReg>

  // VL53L0X_StaticInit() begin

  uint8_t spad_count;
  bool spad_type_is_aperture;
  if (!getSpadInfo(&spad_count, &spad_type_is_aperture)) { return false; }
 80040fa:	f107 0213 	add.w	r2, r7, #19
 80040fe:	f107 0314 	add.w	r3, r7, #20
 8004102:	4611      	mov	r1, r2
 8004104:	4618      	mov	r0, r3
 8004106:	f000 fd6b 	bl	8004be0 <getSpadInfo>
 800410a:	4603      	mov	r3, r0
 800410c:	2b00      	cmp	r3, #0
 800410e:	d101      	bne.n	8004114 <initVL53L0X+0xd0>
 8004110:	2300      	movs	r3, #0
 8004112:	e1ee      	b.n	80044f2 <initVL53L0X+0x4ae>

  // The SPAD map (RefGoodSpadMap) is read by VL53L0X_get_info_from_device() in
  // the API, but the same data seems to be more easily readable from
  // GLOBAL_CONFIG_SPAD_ENABLES_REF_0 through _6, so read it from there
  uint8_t ref_spad_map[6];
  readMulti(GLOBAL_CONFIG_SPAD_ENABLES_REF_0, ref_spad_map, 6);
 8004114:	f107 030c 	add.w	r3, r7, #12
 8004118:	2206      	movs	r2, #6
 800411a:	4619      	mov	r1, r3
 800411c:	20b0      	movs	r0, #176	; 0xb0
 800411e:	f7ff ff67 	bl	8003ff0 <readMulti>

  // -- VL53L0X_set_reference_spads() begin (assume NVM values are valid)

  writeReg(0xFF, 0x01);
 8004122:	2101      	movs	r1, #1
 8004124:	20ff      	movs	r0, #255	; 0xff
 8004126:	f7ff fe89 	bl	8003e3c <writeReg>
  writeReg(DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);
 800412a:	2100      	movs	r1, #0
 800412c:	204f      	movs	r0, #79	; 0x4f
 800412e:	f7ff fe85 	bl	8003e3c <writeReg>
  writeReg(DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);
 8004132:	212c      	movs	r1, #44	; 0x2c
 8004134:	204e      	movs	r0, #78	; 0x4e
 8004136:	f7ff fe81 	bl	8003e3c <writeReg>
  writeReg(0xFF, 0x00);
 800413a:	2100      	movs	r1, #0
 800413c:	20ff      	movs	r0, #255	; 0xff
 800413e:	f7ff fe7d 	bl	8003e3c <writeReg>
  writeReg(GLOBAL_CONFIG_REF_EN_START_SELECT, 0xB4);
 8004142:	21b4      	movs	r1, #180	; 0xb4
 8004144:	20b6      	movs	r0, #182	; 0xb6
 8004146:	f7ff fe79 	bl	8003e3c <writeReg>

  uint8_t first_spad_to_enable = spad_type_is_aperture ? 12 : 0; // 12 is the first aperture spad
 800414a:	7cfb      	ldrb	r3, [r7, #19]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d001      	beq.n	8004154 <initVL53L0X+0x110>
 8004150:	230c      	movs	r3, #12
 8004152:	e000      	b.n	8004156 <initVL53L0X+0x112>
 8004154:	2300      	movs	r3, #0
 8004156:	757b      	strb	r3, [r7, #21]
  uint8_t spads_enabled = 0;
 8004158:	2300      	movs	r3, #0
 800415a:	75fb      	strb	r3, [r7, #23]

  for (uint8_t i = 0; i < 48; i++) {
 800415c:	2300      	movs	r3, #0
 800415e:	75bb      	strb	r3, [r7, #22]
 8004160:	e03f      	b.n	80041e2 <initVL53L0X+0x19e>
    if (i < first_spad_to_enable || spads_enabled == spad_count) {
 8004162:	7dba      	ldrb	r2, [r7, #22]
 8004164:	7d7b      	ldrb	r3, [r7, #21]
 8004166:	429a      	cmp	r2, r3
 8004168:	d303      	bcc.n	8004172 <initVL53L0X+0x12e>
 800416a:	7d3b      	ldrb	r3, [r7, #20]
 800416c:	7dfa      	ldrb	r2, [r7, #23]
 800416e:	429a      	cmp	r2, r3
 8004170:	d120      	bne.n	80041b4 <initVL53L0X+0x170>
      // This bit is lower than the first one that should be enabled, or
      // (reference_spad_count) bits have already been enabled, so zero this bit
      ref_spad_map[i / 8] &= ~(1 << (i % 8));
 8004172:	7dbb      	ldrb	r3, [r7, #22]
 8004174:	08db      	lsrs	r3, r3, #3
 8004176:	b2d8      	uxtb	r0, r3
 8004178:	4603      	mov	r3, r0
 800417a:	3318      	adds	r3, #24
 800417c:	443b      	add	r3, r7
 800417e:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8004182:	b25a      	sxtb	r2, r3
 8004184:	7dbb      	ldrb	r3, [r7, #22]
 8004186:	f003 0307 	and.w	r3, r3, #7
 800418a:	2101      	movs	r1, #1
 800418c:	fa01 f303 	lsl.w	r3, r1, r3
 8004190:	b25b      	sxtb	r3, r3
 8004192:	43db      	mvns	r3, r3
 8004194:	b25b      	sxtb	r3, r3
 8004196:	4013      	ands	r3, r2
 8004198:	b25a      	sxtb	r2, r3
 800419a:	4603      	mov	r3, r0
 800419c:	b2d2      	uxtb	r2, r2
 800419e:	3318      	adds	r3, #24
 80041a0:	443b      	add	r3, r7
 80041a2:	f803 2c0c 	strb.w	r2, [r3, #-12]
 80041a6:	e019      	b.n	80041dc <initVL53L0X+0x198>
 80041a8:	2000040c 	.word	0x2000040c
 80041ac:	20000460 	.word	0x20000460
 80041b0:	20000406 	.word	0x20000406
    }
    else if ((ref_spad_map[i / 8] >> (i % 8)) & 0x1){
 80041b4:	7dbb      	ldrb	r3, [r7, #22]
 80041b6:	08db      	lsrs	r3, r3, #3
 80041b8:	b2db      	uxtb	r3, r3
 80041ba:	3318      	adds	r3, #24
 80041bc:	443b      	add	r3, r7
 80041be:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80041c2:	461a      	mov	r2, r3
 80041c4:	7dbb      	ldrb	r3, [r7, #22]
 80041c6:	f003 0307 	and.w	r3, r3, #7
 80041ca:	fa42 f303 	asr.w	r3, r2, r3
 80041ce:	f003 0301 	and.w	r3, r3, #1
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d002      	beq.n	80041dc <initVL53L0X+0x198>
      spads_enabled++;
 80041d6:	7dfb      	ldrb	r3, [r7, #23]
 80041d8:	3301      	adds	r3, #1
 80041da:	75fb      	strb	r3, [r7, #23]
  for (uint8_t i = 0; i < 48; i++) {
 80041dc:	7dbb      	ldrb	r3, [r7, #22]
 80041de:	3301      	adds	r3, #1
 80041e0:	75bb      	strb	r3, [r7, #22]
 80041e2:	7dbb      	ldrb	r3, [r7, #22]
 80041e4:	2b2f      	cmp	r3, #47	; 0x2f
 80041e6:	d9bc      	bls.n	8004162 <initVL53L0X+0x11e>
    }
  }

  writeMulti(GLOBAL_CONFIG_SPAD_ENABLES_REF_0, ref_spad_map, 6);
 80041e8:	f107 030c 	add.w	r3, r7, #12
 80041ec:	2206      	movs	r2, #6
 80041ee:	4619      	mov	r1, r3
 80041f0:	20b0      	movs	r0, #176	; 0xb0
 80041f2:	f7ff fecf 	bl	8003f94 <writeMulti>
  // -- VL53L0X_set_reference_spads() end

  // -- VL53L0X_load_tuning_settings() begin
  // DefaultTuningSettings from vl53l0x_tuning.h

  writeReg(0xFF, 0x01);
 80041f6:	2101      	movs	r1, #1
 80041f8:	20ff      	movs	r0, #255	; 0xff
 80041fa:	f7ff fe1f 	bl	8003e3c <writeReg>
  writeReg(0x00, 0x00);
 80041fe:	2100      	movs	r1, #0
 8004200:	2000      	movs	r0, #0
 8004202:	f7ff fe1b 	bl	8003e3c <writeReg>

  writeReg(0xFF, 0x00);
 8004206:	2100      	movs	r1, #0
 8004208:	20ff      	movs	r0, #255	; 0xff
 800420a:	f7ff fe17 	bl	8003e3c <writeReg>
  writeReg(0x09, 0x00);
 800420e:	2100      	movs	r1, #0
 8004210:	2009      	movs	r0, #9
 8004212:	f7ff fe13 	bl	8003e3c <writeReg>
  writeReg(0x10, 0x00);
 8004216:	2100      	movs	r1, #0
 8004218:	2010      	movs	r0, #16
 800421a:	f7ff fe0f 	bl	8003e3c <writeReg>
  writeReg(0x11, 0x00);
 800421e:	2100      	movs	r1, #0
 8004220:	2011      	movs	r0, #17
 8004222:	f7ff fe0b 	bl	8003e3c <writeReg>

  writeReg(0x24, 0x01);
 8004226:	2101      	movs	r1, #1
 8004228:	2024      	movs	r0, #36	; 0x24
 800422a:	f7ff fe07 	bl	8003e3c <writeReg>
  writeReg(0x25, 0xFF);
 800422e:	21ff      	movs	r1, #255	; 0xff
 8004230:	2025      	movs	r0, #37	; 0x25
 8004232:	f7ff fe03 	bl	8003e3c <writeReg>
  writeReg(0x75, 0x00);
 8004236:	2100      	movs	r1, #0
 8004238:	2075      	movs	r0, #117	; 0x75
 800423a:	f7ff fdff 	bl	8003e3c <writeReg>

  writeReg(0xFF, 0x01);
 800423e:	2101      	movs	r1, #1
 8004240:	20ff      	movs	r0, #255	; 0xff
 8004242:	f7ff fdfb 	bl	8003e3c <writeReg>
  writeReg(0x4E, 0x2C);
 8004246:	212c      	movs	r1, #44	; 0x2c
 8004248:	204e      	movs	r0, #78	; 0x4e
 800424a:	f7ff fdf7 	bl	8003e3c <writeReg>
  writeReg(0x48, 0x00);
 800424e:	2100      	movs	r1, #0
 8004250:	2048      	movs	r0, #72	; 0x48
 8004252:	f7ff fdf3 	bl	8003e3c <writeReg>
  writeReg(0x30, 0x20);
 8004256:	2120      	movs	r1, #32
 8004258:	2030      	movs	r0, #48	; 0x30
 800425a:	f7ff fdef 	bl	8003e3c <writeReg>

  writeReg(0xFF, 0x00);
 800425e:	2100      	movs	r1, #0
 8004260:	20ff      	movs	r0, #255	; 0xff
 8004262:	f7ff fdeb 	bl	8003e3c <writeReg>
  writeReg(0x30, 0x09);
 8004266:	2109      	movs	r1, #9
 8004268:	2030      	movs	r0, #48	; 0x30
 800426a:	f7ff fde7 	bl	8003e3c <writeReg>
  writeReg(0x54, 0x00);
 800426e:	2100      	movs	r1, #0
 8004270:	2054      	movs	r0, #84	; 0x54
 8004272:	f7ff fde3 	bl	8003e3c <writeReg>
  writeReg(0x31, 0x04);
 8004276:	2104      	movs	r1, #4
 8004278:	2031      	movs	r0, #49	; 0x31
 800427a:	f7ff fddf 	bl	8003e3c <writeReg>
  writeReg(0x32, 0x03);
 800427e:	2103      	movs	r1, #3
 8004280:	2032      	movs	r0, #50	; 0x32
 8004282:	f7ff fddb 	bl	8003e3c <writeReg>
  writeReg(0x40, 0x83);
 8004286:	2183      	movs	r1, #131	; 0x83
 8004288:	2040      	movs	r0, #64	; 0x40
 800428a:	f7ff fdd7 	bl	8003e3c <writeReg>
  writeReg(0x46, 0x25);
 800428e:	2125      	movs	r1, #37	; 0x25
 8004290:	2046      	movs	r0, #70	; 0x46
 8004292:	f7ff fdd3 	bl	8003e3c <writeReg>
  writeReg(0x60, 0x00);
 8004296:	2100      	movs	r1, #0
 8004298:	2060      	movs	r0, #96	; 0x60
 800429a:	f7ff fdcf 	bl	8003e3c <writeReg>
  writeReg(0x27, 0x00);
 800429e:	2100      	movs	r1, #0
 80042a0:	2027      	movs	r0, #39	; 0x27
 80042a2:	f7ff fdcb 	bl	8003e3c <writeReg>
  writeReg(0x50, 0x06);
 80042a6:	2106      	movs	r1, #6
 80042a8:	2050      	movs	r0, #80	; 0x50
 80042aa:	f7ff fdc7 	bl	8003e3c <writeReg>
  writeReg(0x51, 0x00);
 80042ae:	2100      	movs	r1, #0
 80042b0:	2051      	movs	r0, #81	; 0x51
 80042b2:	f7ff fdc3 	bl	8003e3c <writeReg>
  writeReg(0x52, 0x96);
 80042b6:	2196      	movs	r1, #150	; 0x96
 80042b8:	2052      	movs	r0, #82	; 0x52
 80042ba:	f7ff fdbf 	bl	8003e3c <writeReg>
  writeReg(0x56, 0x08);
 80042be:	2108      	movs	r1, #8
 80042c0:	2056      	movs	r0, #86	; 0x56
 80042c2:	f7ff fdbb 	bl	8003e3c <writeReg>
  writeReg(0x57, 0x30);
 80042c6:	2130      	movs	r1, #48	; 0x30
 80042c8:	2057      	movs	r0, #87	; 0x57
 80042ca:	f7ff fdb7 	bl	8003e3c <writeReg>
  writeReg(0x61, 0x00);
 80042ce:	2100      	movs	r1, #0
 80042d0:	2061      	movs	r0, #97	; 0x61
 80042d2:	f7ff fdb3 	bl	8003e3c <writeReg>
  writeReg(0x62, 0x00);
 80042d6:	2100      	movs	r1, #0
 80042d8:	2062      	movs	r0, #98	; 0x62
 80042da:	f7ff fdaf 	bl	8003e3c <writeReg>
  writeReg(0x64, 0x00);
 80042de:	2100      	movs	r1, #0
 80042e0:	2064      	movs	r0, #100	; 0x64
 80042e2:	f7ff fdab 	bl	8003e3c <writeReg>
  writeReg(0x65, 0x00);
 80042e6:	2100      	movs	r1, #0
 80042e8:	2065      	movs	r0, #101	; 0x65
 80042ea:	f7ff fda7 	bl	8003e3c <writeReg>
  writeReg(0x66, 0xA0);
 80042ee:	21a0      	movs	r1, #160	; 0xa0
 80042f0:	2066      	movs	r0, #102	; 0x66
 80042f2:	f7ff fda3 	bl	8003e3c <writeReg>

  writeReg(0xFF, 0x01);
 80042f6:	2101      	movs	r1, #1
 80042f8:	20ff      	movs	r0, #255	; 0xff
 80042fa:	f7ff fd9f 	bl	8003e3c <writeReg>
  writeReg(0x22, 0x32);
 80042fe:	2132      	movs	r1, #50	; 0x32
 8004300:	2022      	movs	r0, #34	; 0x22
 8004302:	f7ff fd9b 	bl	8003e3c <writeReg>
  writeReg(0x47, 0x14);
 8004306:	2114      	movs	r1, #20
 8004308:	2047      	movs	r0, #71	; 0x47
 800430a:	f7ff fd97 	bl	8003e3c <writeReg>
  writeReg(0x49, 0xFF);
 800430e:	21ff      	movs	r1, #255	; 0xff
 8004310:	2049      	movs	r0, #73	; 0x49
 8004312:	f7ff fd93 	bl	8003e3c <writeReg>
  writeReg(0x4A, 0x00);
 8004316:	2100      	movs	r1, #0
 8004318:	204a      	movs	r0, #74	; 0x4a
 800431a:	f7ff fd8f 	bl	8003e3c <writeReg>

  writeReg(0xFF, 0x00);
 800431e:	2100      	movs	r1, #0
 8004320:	20ff      	movs	r0, #255	; 0xff
 8004322:	f7ff fd8b 	bl	8003e3c <writeReg>
  writeReg(0x7A, 0x0A);
 8004326:	210a      	movs	r1, #10
 8004328:	207a      	movs	r0, #122	; 0x7a
 800432a:	f7ff fd87 	bl	8003e3c <writeReg>
  writeReg(0x7B, 0x00);
 800432e:	2100      	movs	r1, #0
 8004330:	207b      	movs	r0, #123	; 0x7b
 8004332:	f7ff fd83 	bl	8003e3c <writeReg>
  writeReg(0x78, 0x21);
 8004336:	2121      	movs	r1, #33	; 0x21
 8004338:	2078      	movs	r0, #120	; 0x78
 800433a:	f7ff fd7f 	bl	8003e3c <writeReg>

  writeReg(0xFF, 0x01);
 800433e:	2101      	movs	r1, #1
 8004340:	20ff      	movs	r0, #255	; 0xff
 8004342:	f7ff fd7b 	bl	8003e3c <writeReg>
  writeReg(0x23, 0x34);
 8004346:	2134      	movs	r1, #52	; 0x34
 8004348:	2023      	movs	r0, #35	; 0x23
 800434a:	f7ff fd77 	bl	8003e3c <writeReg>
  writeReg(0x42, 0x00);
 800434e:	2100      	movs	r1, #0
 8004350:	2042      	movs	r0, #66	; 0x42
 8004352:	f7ff fd73 	bl	8003e3c <writeReg>
  writeReg(0x44, 0xFF);
 8004356:	21ff      	movs	r1, #255	; 0xff
 8004358:	2044      	movs	r0, #68	; 0x44
 800435a:	f7ff fd6f 	bl	8003e3c <writeReg>
  writeReg(0x45, 0x26);
 800435e:	2126      	movs	r1, #38	; 0x26
 8004360:	2045      	movs	r0, #69	; 0x45
 8004362:	f7ff fd6b 	bl	8003e3c <writeReg>
  writeReg(0x46, 0x05);
 8004366:	2105      	movs	r1, #5
 8004368:	2046      	movs	r0, #70	; 0x46
 800436a:	f7ff fd67 	bl	8003e3c <writeReg>
  writeReg(0x40, 0x40);
 800436e:	2140      	movs	r1, #64	; 0x40
 8004370:	2040      	movs	r0, #64	; 0x40
 8004372:	f7ff fd63 	bl	8003e3c <writeReg>
  writeReg(0x0E, 0x06);
 8004376:	2106      	movs	r1, #6
 8004378:	200e      	movs	r0, #14
 800437a:	f7ff fd5f 	bl	8003e3c <writeReg>
  writeReg(0x20, 0x1A);
 800437e:	211a      	movs	r1, #26
 8004380:	2020      	movs	r0, #32
 8004382:	f7ff fd5b 	bl	8003e3c <writeReg>
  writeReg(0x43, 0x40);
 8004386:	2140      	movs	r1, #64	; 0x40
 8004388:	2043      	movs	r0, #67	; 0x43
 800438a:	f7ff fd57 	bl	8003e3c <writeReg>

  writeReg(0xFF, 0x00);
 800438e:	2100      	movs	r1, #0
 8004390:	20ff      	movs	r0, #255	; 0xff
 8004392:	f7ff fd53 	bl	8003e3c <writeReg>
  writeReg(0x34, 0x03);
 8004396:	2103      	movs	r1, #3
 8004398:	2034      	movs	r0, #52	; 0x34
 800439a:	f7ff fd4f 	bl	8003e3c <writeReg>
  writeReg(0x35, 0x44);
 800439e:	2144      	movs	r1, #68	; 0x44
 80043a0:	2035      	movs	r0, #53	; 0x35
 80043a2:	f7ff fd4b 	bl	8003e3c <writeReg>

  writeReg(0xFF, 0x01);
 80043a6:	2101      	movs	r1, #1
 80043a8:	20ff      	movs	r0, #255	; 0xff
 80043aa:	f7ff fd47 	bl	8003e3c <writeReg>
  writeReg(0x31, 0x04);
 80043ae:	2104      	movs	r1, #4
 80043b0:	2031      	movs	r0, #49	; 0x31
 80043b2:	f7ff fd43 	bl	8003e3c <writeReg>
  writeReg(0x4B, 0x09);
 80043b6:	2109      	movs	r1, #9
 80043b8:	204b      	movs	r0, #75	; 0x4b
 80043ba:	f7ff fd3f 	bl	8003e3c <writeReg>
  writeReg(0x4C, 0x05);
 80043be:	2105      	movs	r1, #5
 80043c0:	204c      	movs	r0, #76	; 0x4c
 80043c2:	f7ff fd3b 	bl	8003e3c <writeReg>
  writeReg(0x4D, 0x04);
 80043c6:	2104      	movs	r1, #4
 80043c8:	204d      	movs	r0, #77	; 0x4d
 80043ca:	f7ff fd37 	bl	8003e3c <writeReg>

  writeReg(0xFF, 0x00);
 80043ce:	2100      	movs	r1, #0
 80043d0:	20ff      	movs	r0, #255	; 0xff
 80043d2:	f7ff fd33 	bl	8003e3c <writeReg>
  writeReg(0x44, 0x00);
 80043d6:	2100      	movs	r1, #0
 80043d8:	2044      	movs	r0, #68	; 0x44
 80043da:	f7ff fd2f 	bl	8003e3c <writeReg>
  writeReg(0x45, 0x20);
 80043de:	2120      	movs	r1, #32
 80043e0:	2045      	movs	r0, #69	; 0x45
 80043e2:	f7ff fd2b 	bl	8003e3c <writeReg>
  writeReg(0x47, 0x08);
 80043e6:	2108      	movs	r1, #8
 80043e8:	2047      	movs	r0, #71	; 0x47
 80043ea:	f7ff fd27 	bl	8003e3c <writeReg>
  writeReg(0x48, 0x28);
 80043ee:	2128      	movs	r1, #40	; 0x28
 80043f0:	2048      	movs	r0, #72	; 0x48
 80043f2:	f7ff fd23 	bl	8003e3c <writeReg>
  writeReg(0x67, 0x00);
 80043f6:	2100      	movs	r1, #0
 80043f8:	2067      	movs	r0, #103	; 0x67
 80043fa:	f7ff fd1f 	bl	8003e3c <writeReg>
  writeReg(0x70, 0x04);
 80043fe:	2104      	movs	r1, #4
 8004400:	2070      	movs	r0, #112	; 0x70
 8004402:	f7ff fd1b 	bl	8003e3c <writeReg>
  writeReg(0x71, 0x01);
 8004406:	2101      	movs	r1, #1
 8004408:	2071      	movs	r0, #113	; 0x71
 800440a:	f7ff fd17 	bl	8003e3c <writeReg>
  writeReg(0x72, 0xFE);
 800440e:	21fe      	movs	r1, #254	; 0xfe
 8004410:	2072      	movs	r0, #114	; 0x72
 8004412:	f7ff fd13 	bl	8003e3c <writeReg>
  writeReg(0x76, 0x00);
 8004416:	2100      	movs	r1, #0
 8004418:	2076      	movs	r0, #118	; 0x76
 800441a:	f7ff fd0f 	bl	8003e3c <writeReg>
  writeReg(0x77, 0x00);
 800441e:	2100      	movs	r1, #0
 8004420:	2077      	movs	r0, #119	; 0x77
 8004422:	f7ff fd0b 	bl	8003e3c <writeReg>

  writeReg(0xFF, 0x01);
 8004426:	2101      	movs	r1, #1
 8004428:	20ff      	movs	r0, #255	; 0xff
 800442a:	f7ff fd07 	bl	8003e3c <writeReg>
  writeReg(0x0D, 0x01);
 800442e:	2101      	movs	r1, #1
 8004430:	200d      	movs	r0, #13
 8004432:	f7ff fd03 	bl	8003e3c <writeReg>

  writeReg(0xFF, 0x00);
 8004436:	2100      	movs	r1, #0
 8004438:	20ff      	movs	r0, #255	; 0xff
 800443a:	f7ff fcff 	bl	8003e3c <writeReg>
  writeReg(0x80, 0x01);
 800443e:	2101      	movs	r1, #1
 8004440:	2080      	movs	r0, #128	; 0x80
 8004442:	f7ff fcfb 	bl	8003e3c <writeReg>
  writeReg(0x01, 0xF8);
 8004446:	21f8      	movs	r1, #248	; 0xf8
 8004448:	2001      	movs	r0, #1
 800444a:	f7ff fcf7 	bl	8003e3c <writeReg>

  writeReg(0xFF, 0x01);
 800444e:	2101      	movs	r1, #1
 8004450:	20ff      	movs	r0, #255	; 0xff
 8004452:	f7ff fcf3 	bl	8003e3c <writeReg>
  writeReg(0x8E, 0x01);
 8004456:	2101      	movs	r1, #1
 8004458:	208e      	movs	r0, #142	; 0x8e
 800445a:	f7ff fcef 	bl	8003e3c <writeReg>
  writeReg(0x00, 0x01);
 800445e:	2101      	movs	r1, #1
 8004460:	2000      	movs	r0, #0
 8004462:	f7ff fceb 	bl	8003e3c <writeReg>
  writeReg(0xFF, 0x00);
 8004466:	2100      	movs	r1, #0
 8004468:	20ff      	movs	r0, #255	; 0xff
 800446a:	f7ff fce7 	bl	8003e3c <writeReg>
  writeReg(0x80, 0x00);
 800446e:	2100      	movs	r1, #0
 8004470:	2080      	movs	r0, #128	; 0x80
 8004472:	f7ff fce3 	bl	8003e3c <writeReg>
  // -- VL53L0X_load_tuning_settings() end

  // "Set interrupt config to new sample ready"
  // -- VL53L0X_SetGpioConfig() begin

  writeReg(SYSTEM_INTERRUPT_CONFIG_GPIO, 0x04);
 8004476:	2104      	movs	r1, #4
 8004478:	200a      	movs	r0, #10
 800447a:	f7ff fcdf 	bl	8003e3c <writeReg>
  writeReg(GPIO_HV_MUX_ACTIVE_HIGH, readReg(GPIO_HV_MUX_ACTIVE_HIGH) & ~0x10); // active low
 800447e:	2084      	movs	r0, #132	; 0x84
 8004480:	f7ff fd30 	bl	8003ee4 <readReg>
 8004484:	4603      	mov	r3, r0
 8004486:	f023 0310 	bic.w	r3, r3, #16
 800448a:	b2db      	uxtb	r3, r3
 800448c:	4619      	mov	r1, r3
 800448e:	2084      	movs	r0, #132	; 0x84
 8004490:	f7ff fcd4 	bl	8003e3c <writeReg>
  writeReg(SYSTEM_INTERRUPT_CLEAR, 0x01);
 8004494:	2101      	movs	r1, #1
 8004496:	200b      	movs	r0, #11
 8004498:	f7ff fcd0 	bl	8003e3c <writeReg>

  // -- VL53L0X_SetGpioConfig() end

  g_measTimBudUs = getMeasurementTimingBudget();
 800449c:	f000 f8fc 	bl	8004698 <getMeasurementTimingBudget>
 80044a0:	4603      	mov	r3, r0
 80044a2:	4a16      	ldr	r2, [pc, #88]	; (80044fc <initVL53L0X+0x4b8>)
 80044a4:	6013      	str	r3, [r2, #0]
  // "Disable MSRC and TCC by default"
  // MSRC = Minimum Signal Rate Check
  // TCC = Target CentreCheck
  // -- VL53L0X_SetSequenceStepEnable() begin

  writeReg(SYSTEM_SEQUENCE_CONFIG, 0xE8);
 80044a6:	21e8      	movs	r1, #232	; 0xe8
 80044a8:	2001      	movs	r0, #1
 80044aa:	f7ff fcc7 	bl	8003e3c <writeReg>

  // -- VL53L0X_SetSequenceStepEnable() end

  // "Recalculate timing budget"
  setMeasurementTimingBudget(g_measTimBudUs);
 80044ae:	4b13      	ldr	r3, [pc, #76]	; (80044fc <initVL53L0X+0x4b8>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4618      	mov	r0, r3
 80044b4:	f000 f858 	bl	8004568 <setMeasurementTimingBudget>

  // VL53L0X_PerformRefCalibration() begin (VL53L0X_perform_ref_calibration())

  // -- VL53L0X_perform_vhv_calibration() begin

  writeReg(SYSTEM_SEQUENCE_CONFIG, 0x01);
 80044b8:	2101      	movs	r1, #1
 80044ba:	2001      	movs	r0, #1
 80044bc:	f7ff fcbe 	bl	8003e3c <writeReg>
  if (!performSingleRefCalibration(0x40)) { return false; }
 80044c0:	2040      	movs	r0, #64	; 0x40
 80044c2:	f000 fd45 	bl	8004f50 <performSingleRefCalibration>
 80044c6:	4603      	mov	r3, r0
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d101      	bne.n	80044d0 <initVL53L0X+0x48c>
 80044cc:	2300      	movs	r3, #0
 80044ce:	e010      	b.n	80044f2 <initVL53L0X+0x4ae>

  // -- VL53L0X_perform_vhv_calibration() end

  // -- VL53L0X_perform_phase_calibration() begin

  writeReg(SYSTEM_SEQUENCE_CONFIG, 0x02);
 80044d0:	2102      	movs	r1, #2
 80044d2:	2001      	movs	r0, #1
 80044d4:	f7ff fcb2 	bl	8003e3c <writeReg>
  if (!performSingleRefCalibration(0x00)) { return false; }
 80044d8:	2000      	movs	r0, #0
 80044da:	f000 fd39 	bl	8004f50 <performSingleRefCalibration>
 80044de:	4603      	mov	r3, r0
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d101      	bne.n	80044e8 <initVL53L0X+0x4a4>
 80044e4:	2300      	movs	r3, #0
 80044e6:	e004      	b.n	80044f2 <initVL53L0X+0x4ae>

  // -- VL53L0X_perform_phase_calibration() end

  // "restore the previous Sequence Config"
  writeReg(SYSTEM_SEQUENCE_CONFIG, 0xE8);
 80044e8:	21e8      	movs	r1, #232	; 0xe8
 80044ea:	2001      	movs	r0, #1
 80044ec:	f7ff fca6 	bl	8003e3c <writeReg>

  // VL53L0X_PerformRefCalibration() end

  return true;
 80044f0:	2301      	movs	r3, #1
}
 80044f2:	4618      	mov	r0, r3
 80044f4:	3718      	adds	r7, #24
 80044f6:	46bd      	mov	sp, r7
 80044f8:	bd80      	pop	{r7, pc}
 80044fa:	bf00      	nop
 80044fc:	20000408 	.word	0x20000408

08004500 <setSignalRateLimit>:
// Setting a lower limit increases the potential range of the sensor but also
// seems to increase the likelihood of getting an inaccurate reading because of
// unwanted reflections from objects other than the intended target.
// Defaults to 0.25 MCPS as initialized by the ST API and this library.
bool setSignalRateLimit(float limit_Mcps)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b082      	sub	sp, #8
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
  if (limit_Mcps < 0 || limit_Mcps > 511.99) { return false; }
 8004508:	f04f 0100 	mov.w	r1, #0
 800450c:	6878      	ldr	r0, [r7, #4]
 800450e:	f7fc fa21 	bl	8000954 <__aeabi_fcmplt>
 8004512:	4603      	mov	r3, r0
 8004514:	2b00      	cmp	r3, #0
 8004516:	d10a      	bne.n	800452e <setSignalRateLimit+0x2e>
 8004518:	6878      	ldr	r0, [r7, #4]
 800451a:	f7fb ff7d 	bl	8000418 <__aeabi_f2d>
 800451e:	a310      	add	r3, pc, #64	; (adr r3, 8004560 <setSignalRateLimit+0x60>)
 8004520:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004524:	f7fc f84e 	bl	80005c4 <__aeabi_dcmpgt>
 8004528:	4603      	mov	r3, r0
 800452a:	2b00      	cmp	r3, #0
 800452c:	d001      	beq.n	8004532 <setSignalRateLimit+0x32>
 800452e:	2300      	movs	r3, #0
 8004530:	e00f      	b.n	8004552 <setSignalRateLimit+0x52>

  // Q9.7 fixed point format (9 integer bits, 7 fractional bits)
  writeReg16Bit(FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT, limit_Mcps * (1 << 7));
 8004532:	f04f 4186 	mov.w	r1, #1124073472	; 0x43000000
 8004536:	6878      	ldr	r0, [r7, #4]
 8004538:	f7fc f86e 	bl	8000618 <__aeabi_fmul>
 800453c:	4603      	mov	r3, r0
 800453e:	4618      	mov	r0, r3
 8004540:	f7fc fa30 	bl	80009a4 <__aeabi_f2uiz>
 8004544:	4603      	mov	r3, r0
 8004546:	b29b      	uxth	r3, r3
 8004548:	4619      	mov	r1, r3
 800454a:	2044      	movs	r0, #68	; 0x44
 800454c:	f7ff fca0 	bl	8003e90 <writeReg16Bit>
  return true;
 8004550:	2301      	movs	r3, #1
}
 8004552:	4618      	mov	r0, r3
 8004554:	3708      	adds	r7, #8
 8004556:	46bd      	mov	sp, r7
 8004558:	bd80      	pop	{r7, pc}
 800455a:	bf00      	nop
 800455c:	f3af 8000 	nop.w
 8004560:	0a3d70a4 	.word	0x0a3d70a4
 8004564:	407fffd7 	.word	0x407fffd7

08004568 <setMeasurementTimingBudget>:
// budget allows for more accurate measurements. Increasing the budget by a
// factor of N decreases the range measurement standard deviation by a factor of
// sqrt(N). Defaults to about 33 milliseconds; the minimum is 20 ms.
// based on VL53L0X_set_measurement_timing_budget_micro_seconds()
bool setMeasurementTimingBudget(uint32_t budget_us)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b092      	sub	sp, #72	; 0x48
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
  SequenceStepEnables enables;
  SequenceStepTimeouts timeouts;

  uint16_t const StartOverhead      = 1320; // note that this is different than the value in get_
 8004570:	f44f 63a5 	mov.w	r3, #1320	; 0x528
 8004574:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  uint16_t const EndOverhead        = 960;
 8004578:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800457c:	87fb      	strh	r3, [r7, #62]	; 0x3e
  uint16_t const MsrcOverhead       = 660;
 800457e:	f44f 7325 	mov.w	r3, #660	; 0x294
 8004582:	87bb      	strh	r3, [r7, #60]	; 0x3c
  uint16_t const TccOverhead        = 590;
 8004584:	f240 234e 	movw	r3, #590	; 0x24e
 8004588:	877b      	strh	r3, [r7, #58]	; 0x3a
  uint16_t const DssOverhead        = 690;
 800458a:	f240 23b2 	movw	r3, #690	; 0x2b2
 800458e:	873b      	strh	r3, [r7, #56]	; 0x38
  uint16_t const PreRangeOverhead   = 660;
 8004590:	f44f 7325 	mov.w	r3, #660	; 0x294
 8004594:	86fb      	strh	r3, [r7, #54]	; 0x36
  uint16_t const FinalRangeOverhead = 550;
 8004596:	f240 2326 	movw	r3, #550	; 0x226
 800459a:	86bb      	strh	r3, [r7, #52]	; 0x34

  uint32_t const MinTimingBudget = 20000;
 800459c:	f644 6320 	movw	r3, #20000	; 0x4e20
 80045a0:	633b      	str	r3, [r7, #48]	; 0x30

  if (budget_us < MinTimingBudget) { return false; }
 80045a2:	687a      	ldr	r2, [r7, #4]
 80045a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045a6:	429a      	cmp	r2, r3
 80045a8:	d201      	bcs.n	80045ae <setMeasurementTimingBudget+0x46>
 80045aa:	2300      	movs	r3, #0
 80045ac:	e06e      	b.n	800468c <setMeasurementTimingBudget+0x124>

  uint32_t used_budget_us = StartOverhead + EndOverhead;
 80045ae:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80045b2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80045b4:	4413      	add	r3, r2
 80045b6:	647b      	str	r3, [r7, #68]	; 0x44

  getSequenceStepEnables(&enables);
 80045b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80045bc:	4618      	mov	r0, r3
 80045be:	f000 fba3 	bl	8004d08 <getSequenceStepEnables>
  getSequenceStepTimeouts(&enables, &timeouts);
 80045c2:	f107 020c 	add.w	r2, r7, #12
 80045c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80045ca:	4611      	mov	r1, r2
 80045cc:	4618      	mov	r0, r3
 80045ce:	f000 fbcd 	bl	8004d6c <getSequenceStepTimeouts>

  if (enables.tcc)
 80045d2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d005      	beq.n	80045e6 <setMeasurementTimingBudget+0x7e>
  {
    used_budget_us += (timeouts.msrc_dss_tcc_us + TccOverhead);
 80045da:	69ba      	ldr	r2, [r7, #24]
 80045dc:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80045de:	4413      	add	r3, r2
 80045e0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80045e2:	4413      	add	r3, r2
 80045e4:	647b      	str	r3, [r7, #68]	; 0x44
  }

  if (enables.dss)
 80045e6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d007      	beq.n	80045fe <setMeasurementTimingBudget+0x96>
  {
    used_budget_us += 2 * (timeouts.msrc_dss_tcc_us + DssOverhead);
 80045ee:	69ba      	ldr	r2, [r7, #24]
 80045f0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80045f2:	4413      	add	r3, r2
 80045f4:	005b      	lsls	r3, r3, #1
 80045f6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80045f8:	4413      	add	r3, r2
 80045fa:	647b      	str	r3, [r7, #68]	; 0x44
 80045fc:	e009      	b.n	8004612 <setMeasurementTimingBudget+0xaa>
  }
  else if (enables.msrc)
 80045fe:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8004602:	2b00      	cmp	r3, #0
 8004604:	d005      	beq.n	8004612 <setMeasurementTimingBudget+0xaa>
  {
    used_budget_us += (timeouts.msrc_dss_tcc_us + MsrcOverhead);
 8004606:	69ba      	ldr	r2, [r7, #24]
 8004608:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800460a:	4413      	add	r3, r2
 800460c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800460e:	4413      	add	r3, r2
 8004610:	647b      	str	r3, [r7, #68]	; 0x44
  }

  if (enables.pre_range)
 8004612:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004616:	2b00      	cmp	r3, #0
 8004618:	d005      	beq.n	8004626 <setMeasurementTimingBudget+0xbe>
  {
    used_budget_us += (timeouts.pre_range_us + PreRangeOverhead);
 800461a:	69fa      	ldr	r2, [r7, #28]
 800461c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800461e:	4413      	add	r3, r2
 8004620:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004622:	4413      	add	r3, r2
 8004624:	647b      	str	r3, [r7, #68]	; 0x44
  }

  if (enables.final_range)
 8004626:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800462a:	2b00      	cmp	r3, #0
 800462c:	d02d      	beq.n	800468a <setMeasurementTimingBudget+0x122>
  {
    used_budget_us += FinalRangeOverhead;
 800462e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004630:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004632:	4413      	add	r3, r2
 8004634:	647b      	str	r3, [r7, #68]	; 0x44
    // budget and the sum of all other timeouts within the sequence.
    // If there is no room for the final range timeout, then an error
    // will be set. Otherwise the remaining time will be applied to
    // the final range."

    if (used_budget_us > budget_us)
 8004636:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	429a      	cmp	r2, r3
 800463c:	d901      	bls.n	8004642 <setMeasurementTimingBudget+0xda>
    {
      // "Requested timeout too big."
      return false;
 800463e:	2300      	movs	r3, #0
 8004640:	e024      	b.n	800468c <setMeasurementTimingBudget+0x124>
    }

    uint32_t final_range_timeout_us = budget_us - used_budget_us;
 8004642:	687a      	ldr	r2, [r7, #4]
 8004644:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004646:	1ad3      	subs	r3, r2, r3
 8004648:	62fb      	str	r3, [r7, #44]	; 0x2c
    //  timeouts must be expressed in macro periods MClks
    //  because they have different vcsel periods."

    uint16_t final_range_timeout_mclks =
      timeoutMicrosecondsToMclks(final_range_timeout_us,
                                 timeouts.final_range_vcsel_period_pclks);
 800464a:	89fb      	ldrh	r3, [r7, #14]
      timeoutMicrosecondsToMclks(final_range_timeout_us,
 800464c:	b2db      	uxtb	r3, r3
 800464e:	4619      	mov	r1, r3
 8004650:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004652:	f000 fc57 	bl	8004f04 <timeoutMicrosecondsToMclks>
 8004656:	4603      	mov	r3, r0
    uint16_t final_range_timeout_mclks =
 8004658:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

    if (enables.pre_range)
 800465c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004660:	2b00      	cmp	r3, #0
 8004662:	d005      	beq.n	8004670 <setMeasurementTimingBudget+0x108>
    {
      final_range_timeout_mclks += timeouts.pre_range_mclks;
 8004664:	8a7a      	ldrh	r2, [r7, #18]
 8004666:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800466a:	4413      	add	r3, r2
 800466c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    }

    writeReg16Bit(FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
 8004670:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8004674:	4618      	mov	r0, r3
 8004676:	f000 fbf2 	bl	8004e5e <encodeTimeout>
 800467a:	4603      	mov	r3, r0
 800467c:	4619      	mov	r1, r3
 800467e:	2071      	movs	r0, #113	; 0x71
 8004680:	f7ff fc06 	bl	8003e90 <writeReg16Bit>
      encodeTimeout(final_range_timeout_mclks));

    // set_sequence_step_timeout() end

    g_measTimBudUs = budget_us; // store for internal reuse
 8004684:	4a03      	ldr	r2, [pc, #12]	; (8004694 <setMeasurementTimingBudget+0x12c>)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6013      	str	r3, [r2, #0]
  }
  return true;
 800468a:	2301      	movs	r3, #1
}
 800468c:	4618      	mov	r0, r3
 800468e:	3748      	adds	r7, #72	; 0x48
 8004690:	46bd      	mov	sp, r7
 8004692:	bd80      	pop	{r7, pc}
 8004694:	20000408 	.word	0x20000408

08004698 <getMeasurementTimingBudget>:

// Get the measurement timing budget in microseconds
// based on VL53L0X_get_measurement_timing_budget_micro_seconds()
// in us
uint32_t getMeasurementTimingBudget(void)
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b08c      	sub	sp, #48	; 0x30
 800469c:	af00      	add	r7, sp, #0
  SequenceStepEnables enables;
  SequenceStepTimeouts timeouts;

  uint16_t const StartOverhead     = 1910; // note that this is different than the value in set_
 800469e:	f240 7376 	movw	r3, #1910	; 0x776
 80046a2:	857b      	strh	r3, [r7, #42]	; 0x2a
  uint16_t const EndOverhead        = 960;
 80046a4:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80046a8:	853b      	strh	r3, [r7, #40]	; 0x28
  uint16_t const MsrcOverhead       = 660;
 80046aa:	f44f 7325 	mov.w	r3, #660	; 0x294
 80046ae:	84fb      	strh	r3, [r7, #38]	; 0x26
  uint16_t const TccOverhead        = 590;
 80046b0:	f240 234e 	movw	r3, #590	; 0x24e
 80046b4:	84bb      	strh	r3, [r7, #36]	; 0x24
  uint16_t const DssOverhead        = 690;
 80046b6:	f240 23b2 	movw	r3, #690	; 0x2b2
 80046ba:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t const PreRangeOverhead   = 660;
 80046bc:	f44f 7325 	mov.w	r3, #660	; 0x294
 80046c0:	843b      	strh	r3, [r7, #32]
  uint16_t const FinalRangeOverhead = 550;
 80046c2:	f240 2326 	movw	r3, #550	; 0x226
 80046c6:	83fb      	strh	r3, [r7, #30]

  // "Start and end overhead times always present"
  uint32_t budget_us = StartOverhead + EndOverhead;
 80046c8:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 80046ca:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80046cc:	4413      	add	r3, r2
 80046ce:	62fb      	str	r3, [r7, #44]	; 0x2c

  getSequenceStepEnables(&enables);
 80046d0:	f107 0318 	add.w	r3, r7, #24
 80046d4:	4618      	mov	r0, r3
 80046d6:	f000 fb17 	bl	8004d08 <getSequenceStepEnables>
  getSequenceStepTimeouts(&enables, &timeouts);
 80046da:	463a      	mov	r2, r7
 80046dc:	f107 0318 	add.w	r3, r7, #24
 80046e0:	4611      	mov	r1, r2
 80046e2:	4618      	mov	r0, r3
 80046e4:	f000 fb42 	bl	8004d6c <getSequenceStepTimeouts>

  if (enables.tcc)
 80046e8:	7e3b      	ldrb	r3, [r7, #24]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d005      	beq.n	80046fa <getMeasurementTimingBudget+0x62>
  {
    budget_us += (timeouts.msrc_dss_tcc_us + TccOverhead);
 80046ee:	68fa      	ldr	r2, [r7, #12]
 80046f0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80046f2:	4413      	add	r3, r2
 80046f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80046f6:	4413      	add	r3, r2
 80046f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  if (enables.dss)
 80046fa:	7ebb      	ldrb	r3, [r7, #26]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d007      	beq.n	8004710 <getMeasurementTimingBudget+0x78>
  {
    budget_us += 2 * (timeouts.msrc_dss_tcc_us + DssOverhead);
 8004700:	68fa      	ldr	r2, [r7, #12]
 8004702:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004704:	4413      	add	r3, r2
 8004706:	005b      	lsls	r3, r3, #1
 8004708:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800470a:	4413      	add	r3, r2
 800470c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800470e:	e008      	b.n	8004722 <getMeasurementTimingBudget+0x8a>
  }
  else if (enables.msrc)
 8004710:	7e7b      	ldrb	r3, [r7, #25]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d005      	beq.n	8004722 <getMeasurementTimingBudget+0x8a>
  {
    budget_us += (timeouts.msrc_dss_tcc_us + MsrcOverhead);
 8004716:	68fa      	ldr	r2, [r7, #12]
 8004718:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800471a:	4413      	add	r3, r2
 800471c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800471e:	4413      	add	r3, r2
 8004720:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  if (enables.pre_range)
 8004722:	7efb      	ldrb	r3, [r7, #27]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d005      	beq.n	8004734 <getMeasurementTimingBudget+0x9c>
  {
    budget_us += (timeouts.pre_range_us + PreRangeOverhead);
 8004728:	693a      	ldr	r2, [r7, #16]
 800472a:	8c3b      	ldrh	r3, [r7, #32]
 800472c:	4413      	add	r3, r2
 800472e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004730:	4413      	add	r3, r2
 8004732:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  if (enables.final_range)
 8004734:	7f3b      	ldrb	r3, [r7, #28]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d005      	beq.n	8004746 <getMeasurementTimingBudget+0xae>
  {
    budget_us += (timeouts.final_range_us + FinalRangeOverhead);
 800473a:	697a      	ldr	r2, [r7, #20]
 800473c:	8bfb      	ldrh	r3, [r7, #30]
 800473e:	4413      	add	r3, r2
 8004740:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004742:	4413      	add	r3, r2
 8004744:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  g_measTimBudUs = budget_us; // store for internal reuse
 8004746:	4a04      	ldr	r2, [pc, #16]	; (8004758 <getMeasurementTimingBudget+0xc0>)
 8004748:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800474a:	6013      	str	r3, [r2, #0]
  return budget_us;
 800474c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800474e:	4618      	mov	r0, r3
 8004750:	3730      	adds	r7, #48	; 0x30
 8004752:	46bd      	mov	sp, r7
 8004754:	bd80      	pop	{r7, pc}
 8004756:	bf00      	nop
 8004758:	20000408 	.word	0x20000408

0800475c <setVcselPulsePeriod>:
// Valid values are (even numbers only):
//  pre:  12 to 18 (initialized default: 14)
//  final: 8 to 14 (initialized default: 10)
// based on VL53L0X_set_vcsel_pulse_period()
bool setVcselPulsePeriod(vcselPeriodType type, uint8_t period_pclks)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b08c      	sub	sp, #48	; 0x30
 8004760:	af00      	add	r7, sp, #0
 8004762:	4603      	mov	r3, r0
 8004764:	460a      	mov	r2, r1
 8004766:	71fb      	strb	r3, [r7, #7]
 8004768:	4613      	mov	r3, r2
 800476a:	71bb      	strb	r3, [r7, #6]
  uint8_t vcsel_period_reg = encodeVcselPeriod(period_pclks);
 800476c:	79bb      	ldrb	r3, [r7, #6]
 800476e:	085b      	lsrs	r3, r3, #1
 8004770:	b2db      	uxtb	r3, r3
 8004772:	3b01      	subs	r3, #1
 8004774:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

  SequenceStepEnables enables;
  SequenceStepTimeouts timeouts;

  getSequenceStepEnables(&enables);
 8004778:	f107 0320 	add.w	r3, r7, #32
 800477c:	4618      	mov	r0, r3
 800477e:	f000 fac3 	bl	8004d08 <getSequenceStepEnables>
  getSequenceStepTimeouts(&enables, &timeouts);
 8004782:	f107 0208 	add.w	r2, r7, #8
 8004786:	f107 0320 	add.w	r3, r7, #32
 800478a:	4611      	mov	r1, r2
 800478c:	4618      	mov	r0, r3
 800478e:	f000 faed 	bl	8004d6c <getSequenceStepTimeouts>
  //
  // For the MSRC timeout, the same applies - this timeout being
  // dependant on the pre-range vcsel period."


  if (type == VcselPeriodPreRange)
 8004792:	79fb      	ldrb	r3, [r7, #7]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d15d      	bne.n	8004854 <setVcselPulsePeriod+0xf8>
  {
    // "Set phase check limits"
    switch (period_pclks)
 8004798:	79bb      	ldrb	r3, [r7, #6]
 800479a:	3b0c      	subs	r3, #12
 800479c:	2b06      	cmp	r3, #6
 800479e:	d825      	bhi.n	80047ec <setVcselPulsePeriod+0x90>
 80047a0:	a201      	add	r2, pc, #4	; (adr r2, 80047a8 <setVcselPulsePeriod+0x4c>)
 80047a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047a6:	bf00      	nop
 80047a8:	080047c5 	.word	0x080047c5
 80047ac:	080047ed 	.word	0x080047ed
 80047b0:	080047cf 	.word	0x080047cf
 80047b4:	080047ed 	.word	0x080047ed
 80047b8:	080047d9 	.word	0x080047d9
 80047bc:	080047ed 	.word	0x080047ed
 80047c0:	080047e3 	.word	0x080047e3
    {
      case 12:
        writeReg(PRE_RANGE_CONFIG_VALID_PHASE_HIGH, 0x18);
 80047c4:	2118      	movs	r1, #24
 80047c6:	2057      	movs	r0, #87	; 0x57
 80047c8:	f7ff fb38 	bl	8003e3c <writeReg>
        break;
 80047cc:	e010      	b.n	80047f0 <setVcselPulsePeriod+0x94>

      case 14:
        writeReg(PRE_RANGE_CONFIG_VALID_PHASE_HIGH, 0x30);
 80047ce:	2130      	movs	r1, #48	; 0x30
 80047d0:	2057      	movs	r0, #87	; 0x57
 80047d2:	f7ff fb33 	bl	8003e3c <writeReg>
        break;
 80047d6:	e00b      	b.n	80047f0 <setVcselPulsePeriod+0x94>

      case 16:
        writeReg(PRE_RANGE_CONFIG_VALID_PHASE_HIGH, 0x40);
 80047d8:	2140      	movs	r1, #64	; 0x40
 80047da:	2057      	movs	r0, #87	; 0x57
 80047dc:	f7ff fb2e 	bl	8003e3c <writeReg>
        break;
 80047e0:	e006      	b.n	80047f0 <setVcselPulsePeriod+0x94>

      case 18:
        writeReg(PRE_RANGE_CONFIG_VALID_PHASE_HIGH, 0x50);
 80047e2:	2150      	movs	r1, #80	; 0x50
 80047e4:	2057      	movs	r0, #87	; 0x57
 80047e6:	f7ff fb29 	bl	8003e3c <writeReg>
        break;
 80047ea:	e001      	b.n	80047f0 <setVcselPulsePeriod+0x94>

      default:
        // invalid period
        return false;
 80047ec:	2300      	movs	r3, #0
 80047ee:	e0fc      	b.n	80049ea <setVcselPulsePeriod+0x28e>
    }
    writeReg(PRE_RANGE_CONFIG_VALID_PHASE_LOW, 0x08);
 80047f0:	2108      	movs	r1, #8
 80047f2:	2056      	movs	r0, #86	; 0x56
 80047f4:	f7ff fb22 	bl	8003e3c <writeReg>

    // apply new VCSEL period
    writeReg(PRE_RANGE_CONFIG_VCSEL_PERIOD, vcsel_period_reg);
 80047f8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80047fc:	4619      	mov	r1, r3
 80047fe:	2050      	movs	r0, #80	; 0x50
 8004800:	f7ff fb1c 	bl	8003e3c <writeReg>

    // set_sequence_step_timeout() begin
    // (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE)

    uint16_t new_pre_range_timeout_mclks =
      timeoutMicrosecondsToMclks(timeouts.pre_range_us, period_pclks);
 8004804:	69bb      	ldr	r3, [r7, #24]
 8004806:	79ba      	ldrb	r2, [r7, #6]
 8004808:	4611      	mov	r1, r2
 800480a:	4618      	mov	r0, r3
 800480c:	f000 fb7a 	bl	8004f04 <timeoutMicrosecondsToMclks>
 8004810:	4603      	mov	r3, r0
    uint16_t new_pre_range_timeout_mclks =
 8004812:	857b      	strh	r3, [r7, #42]	; 0x2a

    writeReg16Bit(PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
 8004814:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004816:	4618      	mov	r0, r3
 8004818:	f000 fb21 	bl	8004e5e <encodeTimeout>
 800481c:	4603      	mov	r3, r0
 800481e:	4619      	mov	r1, r3
 8004820:	2051      	movs	r0, #81	; 0x51
 8004822:	f7ff fb35 	bl	8003e90 <writeReg16Bit>

    // set_sequence_step_timeout() begin
    // (SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)

    uint16_t new_msrc_timeout_mclks =
      timeoutMicrosecondsToMclks(timeouts.msrc_dss_tcc_us, period_pclks);
 8004826:	697b      	ldr	r3, [r7, #20]
 8004828:	79ba      	ldrb	r2, [r7, #6]
 800482a:	4611      	mov	r1, r2
 800482c:	4618      	mov	r0, r3
 800482e:	f000 fb69 	bl	8004f04 <timeoutMicrosecondsToMclks>
 8004832:	4603      	mov	r3, r0
    uint16_t new_msrc_timeout_mclks =
 8004834:	853b      	strh	r3, [r7, #40]	; 0x28

    writeReg(MSRC_CONFIG_TIMEOUT_MACROP,
 8004836:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004838:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800483c:	d804      	bhi.n	8004848 <setVcselPulsePeriod+0xec>
      (new_msrc_timeout_mclks > 256) ? 255 : (new_msrc_timeout_mclks - 1));
 800483e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004840:	b2db      	uxtb	r3, r3
    writeReg(MSRC_CONFIG_TIMEOUT_MACROP,
 8004842:	3b01      	subs	r3, #1
 8004844:	b2db      	uxtb	r3, r3
 8004846:	e000      	b.n	800484a <setVcselPulsePeriod+0xee>
 8004848:	23ff      	movs	r3, #255	; 0xff
 800484a:	4619      	mov	r1, r3
 800484c:	2046      	movs	r0, #70	; 0x46
 800484e:	f7ff faf5 	bl	8003e3c <writeReg>
 8004852:	e0b1      	b.n	80049b8 <setVcselPulsePeriod+0x25c>

    // set_sequence_step_timeout() end
  }
  else if (type == VcselPeriodFinalRange)
 8004854:	79fb      	ldrb	r3, [r7, #7]
 8004856:	2b01      	cmp	r3, #1
 8004858:	f040 80ac 	bne.w	80049b4 <setVcselPulsePeriod+0x258>
  {
    switch (period_pclks)
 800485c:	79bb      	ldrb	r3, [r7, #6]
 800485e:	3b08      	subs	r3, #8
 8004860:	2b06      	cmp	r3, #6
 8004862:	f200 8085 	bhi.w	8004970 <setVcselPulsePeriod+0x214>
 8004866:	a201      	add	r2, pc, #4	; (adr r2, 800486c <setVcselPulsePeriod+0x110>)
 8004868:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800486c:	08004889 	.word	0x08004889
 8004870:	08004971 	.word	0x08004971
 8004874:	080048c3 	.word	0x080048c3
 8004878:	08004971 	.word	0x08004971
 800487c:	080048fd 	.word	0x080048fd
 8004880:	08004971 	.word	0x08004971
 8004884:	08004937 	.word	0x08004937
    {
      case 8:
        writeReg(FINAL_RANGE_CONFIG_VALID_PHASE_HIGH, 0x10);
 8004888:	2110      	movs	r1, #16
 800488a:	2048      	movs	r0, #72	; 0x48
 800488c:	f7ff fad6 	bl	8003e3c <writeReg>
        writeReg(FINAL_RANGE_CONFIG_VALID_PHASE_LOW,  0x08);
 8004890:	2108      	movs	r1, #8
 8004892:	2047      	movs	r0, #71	; 0x47
 8004894:	f7ff fad2 	bl	8003e3c <writeReg>
        writeReg(GLOBAL_CONFIG_VCSEL_WIDTH, 0x02);
 8004898:	2102      	movs	r1, #2
 800489a:	2032      	movs	r0, #50	; 0x32
 800489c:	f7ff face 	bl	8003e3c <writeReg>
        writeReg(ALGO_PHASECAL_CONFIG_TIMEOUT, 0x0C);
 80048a0:	210c      	movs	r1, #12
 80048a2:	2030      	movs	r0, #48	; 0x30
 80048a4:	f7ff faca 	bl	8003e3c <writeReg>
        writeReg(0xFF, 0x01);
 80048a8:	2101      	movs	r1, #1
 80048aa:	20ff      	movs	r0, #255	; 0xff
 80048ac:	f7ff fac6 	bl	8003e3c <writeReg>
        writeReg(ALGO_PHASECAL_LIM, 0x30);
 80048b0:	2130      	movs	r1, #48	; 0x30
 80048b2:	2030      	movs	r0, #48	; 0x30
 80048b4:	f7ff fac2 	bl	8003e3c <writeReg>
        writeReg(0xFF, 0x00);
 80048b8:	2100      	movs	r1, #0
 80048ba:	20ff      	movs	r0, #255	; 0xff
 80048bc:	f7ff fabe 	bl	8003e3c <writeReg>
        break;
 80048c0:	e058      	b.n	8004974 <setVcselPulsePeriod+0x218>

      case 10:
        writeReg(FINAL_RANGE_CONFIG_VALID_PHASE_HIGH, 0x28);
 80048c2:	2128      	movs	r1, #40	; 0x28
 80048c4:	2048      	movs	r0, #72	; 0x48
 80048c6:	f7ff fab9 	bl	8003e3c <writeReg>
        writeReg(FINAL_RANGE_CONFIG_VALID_PHASE_LOW,  0x08);
 80048ca:	2108      	movs	r1, #8
 80048cc:	2047      	movs	r0, #71	; 0x47
 80048ce:	f7ff fab5 	bl	8003e3c <writeReg>
        writeReg(GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
 80048d2:	2103      	movs	r1, #3
 80048d4:	2032      	movs	r0, #50	; 0x32
 80048d6:	f7ff fab1 	bl	8003e3c <writeReg>
        writeReg(ALGO_PHASECAL_CONFIG_TIMEOUT, 0x09);
 80048da:	2109      	movs	r1, #9
 80048dc:	2030      	movs	r0, #48	; 0x30
 80048de:	f7ff faad 	bl	8003e3c <writeReg>
        writeReg(0xFF, 0x01);
 80048e2:	2101      	movs	r1, #1
 80048e4:	20ff      	movs	r0, #255	; 0xff
 80048e6:	f7ff faa9 	bl	8003e3c <writeReg>
        writeReg(ALGO_PHASECAL_LIM, 0x20);
 80048ea:	2120      	movs	r1, #32
 80048ec:	2030      	movs	r0, #48	; 0x30
 80048ee:	f7ff faa5 	bl	8003e3c <writeReg>
        writeReg(0xFF, 0x00);
 80048f2:	2100      	movs	r1, #0
 80048f4:	20ff      	movs	r0, #255	; 0xff
 80048f6:	f7ff faa1 	bl	8003e3c <writeReg>
        break;
 80048fa:	e03b      	b.n	8004974 <setVcselPulsePeriod+0x218>

      case 12:
        writeReg(FINAL_RANGE_CONFIG_VALID_PHASE_HIGH, 0x38);
 80048fc:	2138      	movs	r1, #56	; 0x38
 80048fe:	2048      	movs	r0, #72	; 0x48
 8004900:	f7ff fa9c 	bl	8003e3c <writeReg>
        writeReg(FINAL_RANGE_CONFIG_VALID_PHASE_LOW,  0x08);
 8004904:	2108      	movs	r1, #8
 8004906:	2047      	movs	r0, #71	; 0x47
 8004908:	f7ff fa98 	bl	8003e3c <writeReg>
        writeReg(GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
 800490c:	2103      	movs	r1, #3
 800490e:	2032      	movs	r0, #50	; 0x32
 8004910:	f7ff fa94 	bl	8003e3c <writeReg>
        writeReg(ALGO_PHASECAL_CONFIG_TIMEOUT, 0x08);
 8004914:	2108      	movs	r1, #8
 8004916:	2030      	movs	r0, #48	; 0x30
 8004918:	f7ff fa90 	bl	8003e3c <writeReg>
        writeReg(0xFF, 0x01);
 800491c:	2101      	movs	r1, #1
 800491e:	20ff      	movs	r0, #255	; 0xff
 8004920:	f7ff fa8c 	bl	8003e3c <writeReg>
        writeReg(ALGO_PHASECAL_LIM, 0x20);
 8004924:	2120      	movs	r1, #32
 8004926:	2030      	movs	r0, #48	; 0x30
 8004928:	f7ff fa88 	bl	8003e3c <writeReg>
        writeReg(0xFF, 0x00);
 800492c:	2100      	movs	r1, #0
 800492e:	20ff      	movs	r0, #255	; 0xff
 8004930:	f7ff fa84 	bl	8003e3c <writeReg>
        break;
 8004934:	e01e      	b.n	8004974 <setVcselPulsePeriod+0x218>

      case 14:
        writeReg(FINAL_RANGE_CONFIG_VALID_PHASE_HIGH, 0x48);
 8004936:	2148      	movs	r1, #72	; 0x48
 8004938:	2048      	movs	r0, #72	; 0x48
 800493a:	f7ff fa7f 	bl	8003e3c <writeReg>
        writeReg(FINAL_RANGE_CONFIG_VALID_PHASE_LOW,  0x08);
 800493e:	2108      	movs	r1, #8
 8004940:	2047      	movs	r0, #71	; 0x47
 8004942:	f7ff fa7b 	bl	8003e3c <writeReg>
        writeReg(GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
 8004946:	2103      	movs	r1, #3
 8004948:	2032      	movs	r0, #50	; 0x32
 800494a:	f7ff fa77 	bl	8003e3c <writeReg>
        writeReg(ALGO_PHASECAL_CONFIG_TIMEOUT, 0x07);
 800494e:	2107      	movs	r1, #7
 8004950:	2030      	movs	r0, #48	; 0x30
 8004952:	f7ff fa73 	bl	8003e3c <writeReg>
        writeReg(0xFF, 0x01);
 8004956:	2101      	movs	r1, #1
 8004958:	20ff      	movs	r0, #255	; 0xff
 800495a:	f7ff fa6f 	bl	8003e3c <writeReg>
        writeReg(ALGO_PHASECAL_LIM, 0x20);
 800495e:	2120      	movs	r1, #32
 8004960:	2030      	movs	r0, #48	; 0x30
 8004962:	f7ff fa6b 	bl	8003e3c <writeReg>
        writeReg(0xFF, 0x00);
 8004966:	2100      	movs	r1, #0
 8004968:	20ff      	movs	r0, #255	; 0xff
 800496a:	f7ff fa67 	bl	8003e3c <writeReg>
        break;
 800496e:	e001      	b.n	8004974 <setVcselPulsePeriod+0x218>

      default:
        // invalid period
        return false;
 8004970:	2300      	movs	r3, #0
 8004972:	e03a      	b.n	80049ea <setVcselPulsePeriod+0x28e>
    }

    // apply new VCSEL period
    writeReg(FINAL_RANGE_CONFIG_VCSEL_PERIOD, vcsel_period_reg);
 8004974:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004978:	4619      	mov	r1, r3
 800497a:	2070      	movs	r0, #112	; 0x70
 800497c:	f7ff fa5e 	bl	8003e3c <writeReg>
    //  must be added. To do this both final and pre-range
    //  timeouts must be expressed in macro periods MClks
    //  because they have different vcsel periods."

    uint16_t new_final_range_timeout_mclks =
      timeoutMicrosecondsToMclks(timeouts.final_range_us, period_pclks);
 8004980:	69fb      	ldr	r3, [r7, #28]
 8004982:	79ba      	ldrb	r2, [r7, #6]
 8004984:	4611      	mov	r1, r2
 8004986:	4618      	mov	r0, r3
 8004988:	f000 fabc 	bl	8004f04 <timeoutMicrosecondsToMclks>
 800498c:	4603      	mov	r3, r0
    uint16_t new_final_range_timeout_mclks =
 800498e:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (enables.pre_range)
 8004990:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004994:	2b00      	cmp	r3, #0
 8004996:	d003      	beq.n	80049a0 <setVcselPulsePeriod+0x244>
    {
      new_final_range_timeout_mclks += timeouts.pre_range_mclks;
 8004998:	89fa      	ldrh	r2, [r7, #14]
 800499a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800499c:	4413      	add	r3, r2
 800499e:	85fb      	strh	r3, [r7, #46]	; 0x2e
    }

    writeReg16Bit(FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
 80049a0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80049a2:	4618      	mov	r0, r3
 80049a4:	f000 fa5b 	bl	8004e5e <encodeTimeout>
 80049a8:	4603      	mov	r3, r0
 80049aa:	4619      	mov	r1, r3
 80049ac:	2071      	movs	r0, #113	; 0x71
 80049ae:	f7ff fa6f 	bl	8003e90 <writeReg16Bit>
 80049b2:	e001      	b.n	80049b8 <setVcselPulsePeriod+0x25c>
    // set_sequence_step_timeout end
  }
  else
  {
    // invalid type
    return false;
 80049b4:	2300      	movs	r3, #0
 80049b6:	e018      	b.n	80049ea <setVcselPulsePeriod+0x28e>
  }

  // "Finally, the timing budget must be re-applied"

  setMeasurementTimingBudget(g_measTimBudUs);
 80049b8:	4b0e      	ldr	r3, [pc, #56]	; (80049f4 <setVcselPulsePeriod+0x298>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4618      	mov	r0, r3
 80049be:	f7ff fdd3 	bl	8004568 <setMeasurementTimingBudget>

  // "Perform the phase calibration. This is needed after changing on vcsel period."
  // VL53L0X_perform_phase_calibration() begin

  uint8_t sequence_config = readReg(SYSTEM_SEQUENCE_CONFIG);
 80049c2:	2001      	movs	r0, #1
 80049c4:	f7ff fa8e 	bl	8003ee4 <readReg>
 80049c8:	4603      	mov	r3, r0
 80049ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  writeReg(SYSTEM_SEQUENCE_CONFIG, 0x02);
 80049ce:	2102      	movs	r1, #2
 80049d0:	2001      	movs	r0, #1
 80049d2:	f7ff fa33 	bl	8003e3c <writeReg>
  performSingleRefCalibration(0x0);
 80049d6:	2000      	movs	r0, #0
 80049d8:	f000 faba 	bl	8004f50 <performSingleRefCalibration>
  writeReg(SYSTEM_SEQUENCE_CONFIG, sequence_config);
 80049dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80049e0:	4619      	mov	r1, r3
 80049e2:	2001      	movs	r0, #1
 80049e4:	f7ff fa2a 	bl	8003e3c <writeReg>

  // VL53L0X_perform_phase_calibration() end

  return true;
 80049e8:	2301      	movs	r3, #1
}
 80049ea:	4618      	mov	r0, r3
 80049ec:	3730      	adds	r7, #48	; 0x30
 80049ee:	46bd      	mov	sp, r7
 80049f0:	bd80      	pop	{r7, pc}
 80049f2:	bf00      	nop
 80049f4:	20000408 	.word	0x20000408

080049f8 <getVcselPulsePeriod>:

// Get the VCSEL pulse period in PCLKs for the given period type.
// based on VL53L0X_get_vcsel_pulse_period()
uint8_t getVcselPulsePeriod(vcselPeriodType type)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b082      	sub	sp, #8
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	4603      	mov	r3, r0
 8004a00:	71fb      	strb	r3, [r7, #7]
  if (type == VcselPeriodPreRange)
 8004a02:	79fb      	ldrb	r3, [r7, #7]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d108      	bne.n	8004a1a <getVcselPulsePeriod+0x22>
  {
    return decodeVcselPeriod(readReg(PRE_RANGE_CONFIG_VCSEL_PERIOD));
 8004a08:	2050      	movs	r0, #80	; 0x50
 8004a0a:	f7ff fa6b 	bl	8003ee4 <readReg>
 8004a0e:	4603      	mov	r3, r0
 8004a10:	3301      	adds	r3, #1
 8004a12:	b2db      	uxtb	r3, r3
 8004a14:	005b      	lsls	r3, r3, #1
 8004a16:	b2db      	uxtb	r3, r3
 8004a18:	e00c      	b.n	8004a34 <getVcselPulsePeriod+0x3c>
  }
  else if (type == VcselPeriodFinalRange)
 8004a1a:	79fb      	ldrb	r3, [r7, #7]
 8004a1c:	2b01      	cmp	r3, #1
 8004a1e:	d108      	bne.n	8004a32 <getVcselPulsePeriod+0x3a>
  {
    return decodeVcselPeriod(readReg(FINAL_RANGE_CONFIG_VCSEL_PERIOD));
 8004a20:	2070      	movs	r0, #112	; 0x70
 8004a22:	f7ff fa5f 	bl	8003ee4 <readReg>
 8004a26:	4603      	mov	r3, r0
 8004a28:	3301      	adds	r3, #1
 8004a2a:	b2db      	uxtb	r3, r3
 8004a2c:	005b      	lsls	r3, r3, #1
 8004a2e:	b2db      	uxtb	r3, r3
 8004a30:	e000      	b.n	8004a34 <getVcselPulsePeriod+0x3c>
  }
  else { return 255; }
 8004a32:	23ff      	movs	r3, #255	; 0xff
}
 8004a34:	4618      	mov	r0, r3
 8004a36:	3708      	adds	r7, #8
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	bd80      	pop	{r7, pc}

08004a3c <readRangeContinuousMillimeters>:

// Returns a range reading in millimeters when continuous mode is active
// (readRangeSingleMillimeters() also calls this function after starting a
// single-shot range measurement)
// extraStats provides additional info for this measurment. Set to 0 if not needed.
uint16_t readRangeContinuousMillimeters( statInfo_t_VL53L0X *extraStats ) {
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b086      	sub	sp, #24
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
  uint8_t tempBuffer[12];
  uint16_t temp;
  startTimeout();
 8004a44:	f7fc fd88 	bl	8001558 <HAL_GetTick>
 8004a48:	4603      	mov	r3, r0
 8004a4a:	b29a      	uxth	r2, r3
 8004a4c:	4b33      	ldr	r3, [pc, #204]	; (8004b1c <readRangeContinuousMillimeters+0xe0>)
 8004a4e:	801a      	strh	r2, [r3, #0]
  while ((readReg(RESULT_INTERRUPT_STATUS) & 0x07) == 0) {
 8004a50:	e015      	b.n	8004a7e <readRangeContinuousMillimeters+0x42>
    if (checkTimeoutExpired())
 8004a52:	4b33      	ldr	r3, [pc, #204]	; (8004b20 <readRangeContinuousMillimeters+0xe4>)
 8004a54:	881b      	ldrh	r3, [r3, #0]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d011      	beq.n	8004a7e <readRangeContinuousMillimeters+0x42>
 8004a5a:	f7fc fd7d 	bl	8001558 <HAL_GetTick>
 8004a5e:	4603      	mov	r3, r0
 8004a60:	b29b      	uxth	r3, r3
 8004a62:	461a      	mov	r2, r3
 8004a64:	4b2d      	ldr	r3, [pc, #180]	; (8004b1c <readRangeContinuousMillimeters+0xe0>)
 8004a66:	881b      	ldrh	r3, [r3, #0]
 8004a68:	1ad3      	subs	r3, r2, r3
 8004a6a:	4a2d      	ldr	r2, [pc, #180]	; (8004b20 <readRangeContinuousMillimeters+0xe4>)
 8004a6c:	8812      	ldrh	r2, [r2, #0]
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	dd05      	ble.n	8004a7e <readRangeContinuousMillimeters+0x42>
    {
      g_isTimeout = true;
 8004a72:	4b2c      	ldr	r3, [pc, #176]	; (8004b24 <readRangeContinuousMillimeters+0xe8>)
 8004a74:	2201      	movs	r2, #1
 8004a76:	701a      	strb	r2, [r3, #0]
      return 65535;
 8004a78:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004a7c:	e04a      	b.n	8004b14 <readRangeContinuousMillimeters+0xd8>
  while ((readReg(RESULT_INTERRUPT_STATUS) & 0x07) == 0) {
 8004a7e:	2013      	movs	r0, #19
 8004a80:	f7ff fa30 	bl	8003ee4 <readReg>
 8004a84:	4603      	mov	r3, r0
 8004a86:	f003 0307 	and.w	r3, r3, #7
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d0e1      	beq.n	8004a52 <readRangeContinuousMillimeters+0x16>
    }
  }
  if( extraStats == 0 ){
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d105      	bne.n	8004aa0 <readRangeContinuousMillimeters+0x64>
    // assumptions: Linearity Corrective Gain is 1000 (default);
    // fractional ranging is not enabled
    temp = readReg16Bit(RESULT_RANGE_STATUS + 10);
 8004a94:	201e      	movs	r0, #30
 8004a96:	f7ff fa51 	bl	8003f3c <readReg16Bit>
 8004a9a:	4603      	mov	r3, r0
 8004a9c:	82fb      	strh	r3, [r7, #22]
 8004a9e:	e034      	b.n	8004b0a <readRangeContinuousMillimeters+0xce>
    //   4: 0 ?
    //   5: ???
    // 6,7: signal count rate [mcps], uint16_t, fixpoint9.7
    // 9,8: AmbientRateRtnMegaCps  [mcps], uint16_t, fixpoimt9.7
    // A,B: uncorrected distance [mm], uint16_t
    readMulti(0x14, tempBuffer, 12);
 8004aa0:	f107 0308 	add.w	r3, r7, #8
 8004aa4:	220c      	movs	r2, #12
 8004aa6:	4619      	mov	r1, r3
 8004aa8:	2014      	movs	r0, #20
 8004aaa:	f7ff faa1 	bl	8003ff0 <readMulti>
    extraStats->rangeStatus =  tempBuffer[0x00]>>3;
 8004aae:	7a3b      	ldrb	r3, [r7, #8]
 8004ab0:	08db      	lsrs	r3, r3, #3
 8004ab2:	b2da      	uxtb	r2, r3
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	721a      	strb	r2, [r3, #8]
    extraStats->spadCnt     = (tempBuffer[0x02]<<8) | tempBuffer[0x03];
 8004ab8:	7abb      	ldrb	r3, [r7, #10]
 8004aba:	021b      	lsls	r3, r3, #8
 8004abc:	b21a      	sxth	r2, r3
 8004abe:	7afb      	ldrb	r3, [r7, #11]
 8004ac0:	b21b      	sxth	r3, r3
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	b21b      	sxth	r3, r3
 8004ac6:	b29a      	uxth	r2, r3
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	80da      	strh	r2, [r3, #6]
    extraStats->signalCnt   = (tempBuffer[0x06]<<8) | tempBuffer[0x07];
 8004acc:	7bbb      	ldrb	r3, [r7, #14]
 8004ace:	021b      	lsls	r3, r3, #8
 8004ad0:	b21a      	sxth	r2, r3
 8004ad2:	7bfb      	ldrb	r3, [r7, #15]
 8004ad4:	b21b      	sxth	r3, r3
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	b21b      	sxth	r3, r3
 8004ada:	b29a      	uxth	r2, r3
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	805a      	strh	r2, [r3, #2]
    extraStats->ambientCnt  = (tempBuffer[0x08]<<8) | tempBuffer[0x09];    
 8004ae0:	7c3b      	ldrb	r3, [r7, #16]
 8004ae2:	021b      	lsls	r3, r3, #8
 8004ae4:	b21a      	sxth	r2, r3
 8004ae6:	7c7b      	ldrb	r3, [r7, #17]
 8004ae8:	b21b      	sxth	r3, r3
 8004aea:	4313      	orrs	r3, r2
 8004aec:	b21b      	sxth	r3, r3
 8004aee:	b29a      	uxth	r2, r3
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	809a      	strh	r2, [r3, #4]
    temp                    = (tempBuffer[0x0A]<<8) | tempBuffer[0x0B];
 8004af4:	7cbb      	ldrb	r3, [r7, #18]
 8004af6:	021b      	lsls	r3, r3, #8
 8004af8:	b21a      	sxth	r2, r3
 8004afa:	7cfb      	ldrb	r3, [r7, #19]
 8004afc:	b21b      	sxth	r3, r3
 8004afe:	4313      	orrs	r3, r2
 8004b00:	b21b      	sxth	r3, r3
 8004b02:	82fb      	strh	r3, [r7, #22]
    extraStats->rawDistance = temp;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	8afa      	ldrh	r2, [r7, #22]
 8004b08:	801a      	strh	r2, [r3, #0]
  }
  writeReg(SYSTEM_INTERRUPT_CLEAR, 0x01);
 8004b0a:	2101      	movs	r1, #1
 8004b0c:	200b      	movs	r0, #11
 8004b0e:	f7ff f995 	bl	8003e3c <writeReg>
  return temp;
 8004b12:	8afb      	ldrh	r3, [r7, #22]
}
 8004b14:	4618      	mov	r0, r3
 8004b16:	3718      	adds	r7, #24
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	bd80      	pop	{r7, pc}
 8004b1c:	20000404 	.word	0x20000404
 8004b20:	20000400 	.word	0x20000400
 8004b24:	20000402 	.word	0x20000402

08004b28 <readRangeSingleMillimeters>:

// Performs a single-shot range measurement and returns the reading in
// millimeters
// based on VL53L0X_PerformSingleRangingMeasurement()
// extraStats provides additional info for this measurment. Set to 0 if not needed.
uint16_t readRangeSingleMillimeters( statInfo_t_VL53L0X *extraStats ) {
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b082      	sub	sp, #8
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
  writeReg(0x80, 0x01);
 8004b30:	2101      	movs	r1, #1
 8004b32:	2080      	movs	r0, #128	; 0x80
 8004b34:	f7ff f982 	bl	8003e3c <writeReg>
  writeReg(0xFF, 0x01);
 8004b38:	2101      	movs	r1, #1
 8004b3a:	20ff      	movs	r0, #255	; 0xff
 8004b3c:	f7ff f97e 	bl	8003e3c <writeReg>
  writeReg(0x00, 0x00);
 8004b40:	2100      	movs	r1, #0
 8004b42:	2000      	movs	r0, #0
 8004b44:	f7ff f97a 	bl	8003e3c <writeReg>
  writeReg(0x91, g_stopVariable);
 8004b48:	4b21      	ldr	r3, [pc, #132]	; (8004bd0 <readRangeSingleMillimeters+0xa8>)
 8004b4a:	781b      	ldrb	r3, [r3, #0]
 8004b4c:	4619      	mov	r1, r3
 8004b4e:	2091      	movs	r0, #145	; 0x91
 8004b50:	f7ff f974 	bl	8003e3c <writeReg>
  writeReg(0x00, 0x01);
 8004b54:	2101      	movs	r1, #1
 8004b56:	2000      	movs	r0, #0
 8004b58:	f7ff f970 	bl	8003e3c <writeReg>
  writeReg(0xFF, 0x00);
 8004b5c:	2100      	movs	r1, #0
 8004b5e:	20ff      	movs	r0, #255	; 0xff
 8004b60:	f7ff f96c 	bl	8003e3c <writeReg>
  writeReg(0x80, 0x00);
 8004b64:	2100      	movs	r1, #0
 8004b66:	2080      	movs	r0, #128	; 0x80
 8004b68:	f7ff f968 	bl	8003e3c <writeReg>
  writeReg(SYSRANGE_START, 0x01);
 8004b6c:	2101      	movs	r1, #1
 8004b6e:	2000      	movs	r0, #0
 8004b70:	f7ff f964 	bl	8003e3c <writeReg>
  // "Wait until start bit has been cleared"
  startTimeout();
 8004b74:	f7fc fcf0 	bl	8001558 <HAL_GetTick>
 8004b78:	4603      	mov	r3, r0
 8004b7a:	b29a      	uxth	r2, r3
 8004b7c:	4b15      	ldr	r3, [pc, #84]	; (8004bd4 <readRangeSingleMillimeters+0xac>)
 8004b7e:	801a      	strh	r2, [r3, #0]
  while (readReg(SYSRANGE_START) & 0x01){
 8004b80:	e015      	b.n	8004bae <readRangeSingleMillimeters+0x86>
    if (checkTimeoutExpired()){
 8004b82:	4b15      	ldr	r3, [pc, #84]	; (8004bd8 <readRangeSingleMillimeters+0xb0>)
 8004b84:	881b      	ldrh	r3, [r3, #0]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d011      	beq.n	8004bae <readRangeSingleMillimeters+0x86>
 8004b8a:	f7fc fce5 	bl	8001558 <HAL_GetTick>
 8004b8e:	4603      	mov	r3, r0
 8004b90:	b29b      	uxth	r3, r3
 8004b92:	461a      	mov	r2, r3
 8004b94:	4b0f      	ldr	r3, [pc, #60]	; (8004bd4 <readRangeSingleMillimeters+0xac>)
 8004b96:	881b      	ldrh	r3, [r3, #0]
 8004b98:	1ad3      	subs	r3, r2, r3
 8004b9a:	4a0f      	ldr	r2, [pc, #60]	; (8004bd8 <readRangeSingleMillimeters+0xb0>)
 8004b9c:	8812      	ldrh	r2, [r2, #0]
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	dd05      	ble.n	8004bae <readRangeSingleMillimeters+0x86>
      g_isTimeout = true;
 8004ba2:	4b0e      	ldr	r3, [pc, #56]	; (8004bdc <readRangeSingleMillimeters+0xb4>)
 8004ba4:	2201      	movs	r2, #1
 8004ba6:	701a      	strb	r2, [r3, #0]
      return 65535;
 8004ba8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004bac:	e00b      	b.n	8004bc6 <readRangeSingleMillimeters+0x9e>
  while (readReg(SYSRANGE_START) & 0x01){
 8004bae:	2000      	movs	r0, #0
 8004bb0:	f7ff f998 	bl	8003ee4 <readReg>
 8004bb4:	4603      	mov	r3, r0
 8004bb6:	f003 0301 	and.w	r3, r3, #1
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d1e1      	bne.n	8004b82 <readRangeSingleMillimeters+0x5a>
    }
  }
  return readRangeContinuousMillimeters( extraStats );
 8004bbe:	6878      	ldr	r0, [r7, #4]
 8004bc0:	f7ff ff3c 	bl	8004a3c <readRangeContinuousMillimeters>
 8004bc4:	4603      	mov	r3, r0
}
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	3708      	adds	r7, #8
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	bd80      	pop	{r7, pc}
 8004bce:	bf00      	nop
 8004bd0:	20000406 	.word	0x20000406
 8004bd4:	20000404 	.word	0x20000404
 8004bd8:	20000400 	.word	0x20000400
 8004bdc:	20000402 	.word	0x20000402

08004be0 <getSpadInfo>:

// Get reference SPAD (single photon avalanche diode) count and type
// based on VL53L0X_get_info_from_device(),
// but only gets reference SPAD count and type
bool getSpadInfo(uint8_t * count, bool * type_is_aperture)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b084      	sub	sp, #16
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
 8004be8:	6039      	str	r1, [r7, #0]
  uint8_t tmp;

  writeReg(0x80, 0x01);
 8004bea:	2101      	movs	r1, #1
 8004bec:	2080      	movs	r0, #128	; 0x80
 8004bee:	f7ff f925 	bl	8003e3c <writeReg>
  writeReg(0xFF, 0x01);
 8004bf2:	2101      	movs	r1, #1
 8004bf4:	20ff      	movs	r0, #255	; 0xff
 8004bf6:	f7ff f921 	bl	8003e3c <writeReg>
  writeReg(0x00, 0x00);
 8004bfa:	2100      	movs	r1, #0
 8004bfc:	2000      	movs	r0, #0
 8004bfe:	f7ff f91d 	bl	8003e3c <writeReg>

  writeReg(0xFF, 0x06);
 8004c02:	2106      	movs	r1, #6
 8004c04:	20ff      	movs	r0, #255	; 0xff
 8004c06:	f7ff f919 	bl	8003e3c <writeReg>
  writeReg(0x83, readReg(0x83) | 0x04);
 8004c0a:	2083      	movs	r0, #131	; 0x83
 8004c0c:	f7ff f96a 	bl	8003ee4 <readReg>
 8004c10:	4603      	mov	r3, r0
 8004c12:	f043 0304 	orr.w	r3, r3, #4
 8004c16:	b2db      	uxtb	r3, r3
 8004c18:	4619      	mov	r1, r3
 8004c1a:	2083      	movs	r0, #131	; 0x83
 8004c1c:	f7ff f90e 	bl	8003e3c <writeReg>
  writeReg(0xFF, 0x07);
 8004c20:	2107      	movs	r1, #7
 8004c22:	20ff      	movs	r0, #255	; 0xff
 8004c24:	f7ff f90a 	bl	8003e3c <writeReg>
  writeReg(0x81, 0x01);
 8004c28:	2101      	movs	r1, #1
 8004c2a:	2081      	movs	r0, #129	; 0x81
 8004c2c:	f7ff f906 	bl	8003e3c <writeReg>

  writeReg(0x80, 0x01);
 8004c30:	2101      	movs	r1, #1
 8004c32:	2080      	movs	r0, #128	; 0x80
 8004c34:	f7ff f902 	bl	8003e3c <writeReg>

  writeReg(0x94, 0x6b);
 8004c38:	216b      	movs	r1, #107	; 0x6b
 8004c3a:	2094      	movs	r0, #148	; 0x94
 8004c3c:	f7ff f8fe 	bl	8003e3c <writeReg>
  writeReg(0x83, 0x00);
 8004c40:	2100      	movs	r1, #0
 8004c42:	2083      	movs	r0, #131	; 0x83
 8004c44:	f7ff f8fa 	bl	8003e3c <writeReg>
  startTimeout();
 8004c48:	f7fc fc86 	bl	8001558 <HAL_GetTick>
 8004c4c:	4603      	mov	r3, r0
 8004c4e:	b29a      	uxth	r2, r3
 8004c50:	4b2b      	ldr	r3, [pc, #172]	; (8004d00 <getSpadInfo+0x120>)
 8004c52:	801a      	strh	r2, [r3, #0]
  while (readReg(0x83) == 0x00)
 8004c54:	e011      	b.n	8004c7a <getSpadInfo+0x9a>
  {
    if (checkTimeoutExpired()) { return false; }
 8004c56:	4b2b      	ldr	r3, [pc, #172]	; (8004d04 <getSpadInfo+0x124>)
 8004c58:	881b      	ldrh	r3, [r3, #0]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d00d      	beq.n	8004c7a <getSpadInfo+0x9a>
 8004c5e:	f7fc fc7b 	bl	8001558 <HAL_GetTick>
 8004c62:	4603      	mov	r3, r0
 8004c64:	b29b      	uxth	r3, r3
 8004c66:	461a      	mov	r2, r3
 8004c68:	4b25      	ldr	r3, [pc, #148]	; (8004d00 <getSpadInfo+0x120>)
 8004c6a:	881b      	ldrh	r3, [r3, #0]
 8004c6c:	1ad3      	subs	r3, r2, r3
 8004c6e:	4a25      	ldr	r2, [pc, #148]	; (8004d04 <getSpadInfo+0x124>)
 8004c70:	8812      	ldrh	r2, [r2, #0]
 8004c72:	4293      	cmp	r3, r2
 8004c74:	dd01      	ble.n	8004c7a <getSpadInfo+0x9a>
 8004c76:	2300      	movs	r3, #0
 8004c78:	e03d      	b.n	8004cf6 <getSpadInfo+0x116>
  while (readReg(0x83) == 0x00)
 8004c7a:	2083      	movs	r0, #131	; 0x83
 8004c7c:	f7ff f932 	bl	8003ee4 <readReg>
 8004c80:	4603      	mov	r3, r0
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d0e7      	beq.n	8004c56 <getSpadInfo+0x76>
  }
  writeReg(0x83, 0x01);
 8004c86:	2101      	movs	r1, #1
 8004c88:	2083      	movs	r0, #131	; 0x83
 8004c8a:	f7ff f8d7 	bl	8003e3c <writeReg>
  tmp = readReg(0x92);
 8004c8e:	2092      	movs	r0, #146	; 0x92
 8004c90:	f7ff f928 	bl	8003ee4 <readReg>
 8004c94:	4603      	mov	r3, r0
 8004c96:	73fb      	strb	r3, [r7, #15]

  *count = tmp & 0x7f;
 8004c98:	7bfb      	ldrb	r3, [r7, #15]
 8004c9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c9e:	b2da      	uxtb	r2, r3
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	701a      	strb	r2, [r3, #0]
  *type_is_aperture = (tmp >> 7) & 0x01;
 8004ca4:	7bfb      	ldrb	r3, [r7, #15]
 8004ca6:	09db      	lsrs	r3, r3, #7
 8004ca8:	b2da      	uxtb	r2, r3
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	701a      	strb	r2, [r3, #0]

  writeReg(0x81, 0x00);
 8004cae:	2100      	movs	r1, #0
 8004cb0:	2081      	movs	r0, #129	; 0x81
 8004cb2:	f7ff f8c3 	bl	8003e3c <writeReg>
  writeReg(0xFF, 0x06);
 8004cb6:	2106      	movs	r1, #6
 8004cb8:	20ff      	movs	r0, #255	; 0xff
 8004cba:	f7ff f8bf 	bl	8003e3c <writeReg>
  writeReg(0x83, readReg(0x83)  & ~0x04);
 8004cbe:	2083      	movs	r0, #131	; 0x83
 8004cc0:	f7ff f910 	bl	8003ee4 <readReg>
 8004cc4:	4603      	mov	r3, r0
 8004cc6:	f023 0304 	bic.w	r3, r3, #4
 8004cca:	b2db      	uxtb	r3, r3
 8004ccc:	4619      	mov	r1, r3
 8004cce:	2083      	movs	r0, #131	; 0x83
 8004cd0:	f7ff f8b4 	bl	8003e3c <writeReg>
  writeReg(0xFF, 0x01);
 8004cd4:	2101      	movs	r1, #1
 8004cd6:	20ff      	movs	r0, #255	; 0xff
 8004cd8:	f7ff f8b0 	bl	8003e3c <writeReg>
  writeReg(0x00, 0x01);
 8004cdc:	2101      	movs	r1, #1
 8004cde:	2000      	movs	r0, #0
 8004ce0:	f7ff f8ac 	bl	8003e3c <writeReg>

  writeReg(0xFF, 0x00);
 8004ce4:	2100      	movs	r1, #0
 8004ce6:	20ff      	movs	r0, #255	; 0xff
 8004ce8:	f7ff f8a8 	bl	8003e3c <writeReg>
  writeReg(0x80, 0x00);
 8004cec:	2100      	movs	r1, #0
 8004cee:	2080      	movs	r0, #128	; 0x80
 8004cf0:	f7ff f8a4 	bl	8003e3c <writeReg>

  return true;
 8004cf4:	2301      	movs	r3, #1
}
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	3710      	adds	r7, #16
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	bd80      	pop	{r7, pc}
 8004cfe:	bf00      	nop
 8004d00:	20000404 	.word	0x20000404
 8004d04:	20000400 	.word	0x20000400

08004d08 <getSequenceStepEnables>:

// Get sequence step enables
// based on VL53L0X_GetSequenceStepEnables()
void getSequenceStepEnables(SequenceStepEnables * enables)
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b084      	sub	sp, #16
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
  uint8_t sequence_config = readReg(SYSTEM_SEQUENCE_CONFIG);
 8004d10:	2001      	movs	r0, #1
 8004d12:	f7ff f8e7 	bl	8003ee4 <readReg>
 8004d16:	4603      	mov	r3, r0
 8004d18:	73fb      	strb	r3, [r7, #15]

  enables->tcc          = (sequence_config >> 4) & 0x1;
 8004d1a:	7bfb      	ldrb	r3, [r7, #15]
 8004d1c:	091b      	lsrs	r3, r3, #4
 8004d1e:	b2db      	uxtb	r3, r3
 8004d20:	f003 0301 	and.w	r3, r3, #1
 8004d24:	b2da      	uxtb	r2, r3
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	701a      	strb	r2, [r3, #0]
  enables->dss          = (sequence_config >> 3) & 0x1;
 8004d2a:	7bfb      	ldrb	r3, [r7, #15]
 8004d2c:	08db      	lsrs	r3, r3, #3
 8004d2e:	b2db      	uxtb	r3, r3
 8004d30:	f003 0301 	and.w	r3, r3, #1
 8004d34:	b2da      	uxtb	r2, r3
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	709a      	strb	r2, [r3, #2]
  enables->msrc         = (sequence_config >> 2) & 0x1;
 8004d3a:	7bfb      	ldrb	r3, [r7, #15]
 8004d3c:	089b      	lsrs	r3, r3, #2
 8004d3e:	b2db      	uxtb	r3, r3
 8004d40:	f003 0301 	and.w	r3, r3, #1
 8004d44:	b2da      	uxtb	r2, r3
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	705a      	strb	r2, [r3, #1]
  enables->pre_range    = (sequence_config >> 6) & 0x1;
 8004d4a:	7bfb      	ldrb	r3, [r7, #15]
 8004d4c:	099b      	lsrs	r3, r3, #6
 8004d4e:	b2db      	uxtb	r3, r3
 8004d50:	f003 0301 	and.w	r3, r3, #1
 8004d54:	b2da      	uxtb	r2, r3
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	70da      	strb	r2, [r3, #3]
  enables->final_range  = (sequence_config >> 7) & 0x1;
 8004d5a:	7bfb      	ldrb	r3, [r7, #15]
 8004d5c:	09db      	lsrs	r3, r3, #7
 8004d5e:	b2da      	uxtb	r2, r3
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	711a      	strb	r2, [r3, #4]
}
 8004d64:	bf00      	nop
 8004d66:	3710      	adds	r7, #16
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	bd80      	pop	{r7, pc}

08004d6c <getSequenceStepTimeouts>:
// Get sequence step timeouts
// based on get_sequence_step_timeout(),
// but gets all timeouts instead of just the requested one, and also stores
// intermediate values
void getSequenceStepTimeouts(SequenceStepEnables const * enables, SequenceStepTimeouts * timeouts)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b082      	sub	sp, #8
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
 8004d74:	6039      	str	r1, [r7, #0]
  timeouts->pre_range_vcsel_period_pclks = getVcselPulsePeriod(VcselPeriodPreRange);
 8004d76:	2000      	movs	r0, #0
 8004d78:	f7ff fe3e 	bl	80049f8 <getVcselPulsePeriod>
 8004d7c:	4603      	mov	r3, r0
 8004d7e:	b29a      	uxth	r2, r3
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	801a      	strh	r2, [r3, #0]

  timeouts->msrc_dss_tcc_mclks = readReg(MSRC_CONFIG_TIMEOUT_MACROP) + 1;
 8004d84:	2046      	movs	r0, #70	; 0x46
 8004d86:	f7ff f8ad 	bl	8003ee4 <readReg>
 8004d8a:	4603      	mov	r3, r0
 8004d8c:	b29b      	uxth	r3, r3
 8004d8e:	3301      	adds	r3, #1
 8004d90:	b29a      	uxth	r2, r3
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	809a      	strh	r2, [r3, #4]
  timeouts->msrc_dss_tcc_us =
    timeoutMclksToMicroseconds(timeouts->msrc_dss_tcc_mclks,
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	889a      	ldrh	r2, [r3, #4]
                               timeouts->pre_range_vcsel_period_pclks);
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	881b      	ldrh	r3, [r3, #0]
    timeoutMclksToMicroseconds(timeouts->msrc_dss_tcc_mclks,
 8004d9e:	b2db      	uxtb	r3, r3
 8004da0:	4619      	mov	r1, r3
 8004da2:	4610      	mov	r0, r2
 8004da4:	f000 f886 	bl	8004eb4 <timeoutMclksToMicroseconds>
 8004da8:	4602      	mov	r2, r0
  timeouts->msrc_dss_tcc_us =
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	60da      	str	r2, [r3, #12]

  timeouts->pre_range_mclks =
    decodeTimeout(readReg16Bit(PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI));
 8004dae:	2051      	movs	r0, #81	; 0x51
 8004db0:	f7ff f8c4 	bl	8003f3c <readReg16Bit>
 8004db4:	4603      	mov	r3, r0
 8004db6:	4618      	mov	r0, r3
 8004db8:	f000 f83e 	bl	8004e38 <decodeTimeout>
 8004dbc:	4603      	mov	r3, r0
 8004dbe:	461a      	mov	r2, r3
  timeouts->pre_range_mclks =
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	80da      	strh	r2, [r3, #6]
  timeouts->pre_range_us =
    timeoutMclksToMicroseconds(timeouts->pre_range_mclks,
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	88da      	ldrh	r2, [r3, #6]
                               timeouts->pre_range_vcsel_period_pclks);
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	881b      	ldrh	r3, [r3, #0]
    timeoutMclksToMicroseconds(timeouts->pre_range_mclks,
 8004dcc:	b2db      	uxtb	r3, r3
 8004dce:	4619      	mov	r1, r3
 8004dd0:	4610      	mov	r0, r2
 8004dd2:	f000 f86f 	bl	8004eb4 <timeoutMclksToMicroseconds>
 8004dd6:	4602      	mov	r2, r0
  timeouts->pre_range_us =
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	611a      	str	r2, [r3, #16]

  timeouts->final_range_vcsel_period_pclks = getVcselPulsePeriod(VcselPeriodFinalRange);
 8004ddc:	2001      	movs	r0, #1
 8004dde:	f7ff fe0b 	bl	80049f8 <getVcselPulsePeriod>
 8004de2:	4603      	mov	r3, r0
 8004de4:	b29a      	uxth	r2, r3
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	805a      	strh	r2, [r3, #2]

  timeouts->final_range_mclks =
    decodeTimeout(readReg16Bit(FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI));
 8004dea:	2071      	movs	r0, #113	; 0x71
 8004dec:	f7ff f8a6 	bl	8003f3c <readReg16Bit>
 8004df0:	4603      	mov	r3, r0
 8004df2:	4618      	mov	r0, r3
 8004df4:	f000 f820 	bl	8004e38 <decodeTimeout>
 8004df8:	4603      	mov	r3, r0
 8004dfa:	461a      	mov	r2, r3
  timeouts->final_range_mclks =
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	811a      	strh	r2, [r3, #8]

  if (enables->pre_range)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	78db      	ldrb	r3, [r3, #3]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d007      	beq.n	8004e18 <getSequenceStepTimeouts+0xac>
  {
    timeouts->final_range_mclks -= timeouts->pre_range_mclks;
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	891a      	ldrh	r2, [r3, #8]
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	88db      	ldrh	r3, [r3, #6]
 8004e10:	1ad3      	subs	r3, r2, r3
 8004e12:	b29a      	uxth	r2, r3
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	811a      	strh	r2, [r3, #8]
  }

  timeouts->final_range_us =
    timeoutMclksToMicroseconds(timeouts->final_range_mclks,
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	891a      	ldrh	r2, [r3, #8]
                               timeouts->final_range_vcsel_period_pclks);
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	885b      	ldrh	r3, [r3, #2]
    timeoutMclksToMicroseconds(timeouts->final_range_mclks,
 8004e20:	b2db      	uxtb	r3, r3
 8004e22:	4619      	mov	r1, r3
 8004e24:	4610      	mov	r0, r2
 8004e26:	f000 f845 	bl	8004eb4 <timeoutMclksToMicroseconds>
 8004e2a:	4602      	mov	r2, r0
  timeouts->final_range_us =
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	615a      	str	r2, [r3, #20]
}
 8004e30:	bf00      	nop
 8004e32:	3708      	adds	r7, #8
 8004e34:	46bd      	mov	sp, r7
 8004e36:	bd80      	pop	{r7, pc}

08004e38 <decodeTimeout>:
// Decode sequence step timeout in MCLKs from register value
// based on VL53L0X_decode_timeout()
// Note: the original function returned a uint32_t, but the return value is
// always stored in a uint16_t.
uint16_t decodeTimeout(uint16_t reg_val)
{
 8004e38:	b480      	push	{r7}
 8004e3a:	b083      	sub	sp, #12
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	4603      	mov	r3, r0
 8004e40:	80fb      	strh	r3, [r7, #6]
  // format: "(LSByte * 2^MSByte) + 1"
  return (uint16_t)((reg_val & 0x00FF) <<
 8004e42:	88fb      	ldrh	r3, [r7, #6]
 8004e44:	b2db      	uxtb	r3, r3
         (uint16_t)((reg_val & 0xFF00) >> 8)) + 1;
 8004e46:	88fa      	ldrh	r2, [r7, #6]
 8004e48:	0a12      	lsrs	r2, r2, #8
 8004e4a:	b292      	uxth	r2, r2
  return (uint16_t)((reg_val & 0x00FF) <<
 8004e4c:	4093      	lsls	r3, r2
 8004e4e:	b29b      	uxth	r3, r3
         (uint16_t)((reg_val & 0xFF00) >> 8)) + 1;
 8004e50:	3301      	adds	r3, #1
 8004e52:	b29b      	uxth	r3, r3
}
 8004e54:	4618      	mov	r0, r3
 8004e56:	370c      	adds	r7, #12
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	bc80      	pop	{r7}
 8004e5c:	4770      	bx	lr

08004e5e <encodeTimeout>:
// Encode sequence step timeout register value from timeout in MCLKs
// based on VL53L0X_encode_timeout()
// Note: the original function took a uint16_t, but the argument passed to it
// is always a uint16_t.
uint16_t encodeTimeout(uint16_t timeout_mclks)
{
 8004e5e:	b480      	push	{r7}
 8004e60:	b085      	sub	sp, #20
 8004e62:	af00      	add	r7, sp, #0
 8004e64:	4603      	mov	r3, r0
 8004e66:	80fb      	strh	r3, [r7, #6]
  // format: "(LSByte * 2^MSByte) + 1"

  uint32_t ls_byte = 0;
 8004e68:	2300      	movs	r3, #0
 8004e6a:	60fb      	str	r3, [r7, #12]
  uint16_t ms_byte = 0;
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	817b      	strh	r3, [r7, #10]

  if (timeout_mclks > 0)
 8004e70:	88fb      	ldrh	r3, [r7, #6]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d018      	beq.n	8004ea8 <encodeTimeout+0x4a>
  {
    ls_byte = timeout_mclks - 1;
 8004e76:	88fb      	ldrh	r3, [r7, #6]
 8004e78:	3b01      	subs	r3, #1
 8004e7a:	60fb      	str	r3, [r7, #12]

    while ((ls_byte & 0xFFFFFF00) > 0)
 8004e7c:	e005      	b.n	8004e8a <encodeTimeout+0x2c>
    {
      ls_byte >>= 1;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	085b      	lsrs	r3, r3, #1
 8004e82:	60fb      	str	r3, [r7, #12]
      ms_byte++;
 8004e84:	897b      	ldrh	r3, [r7, #10]
 8004e86:	3301      	adds	r3, #1
 8004e88:	817b      	strh	r3, [r7, #10]
    while ((ls_byte & 0xFFFFFF00) > 0)
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d1f4      	bne.n	8004e7e <encodeTimeout+0x20>
    }

    return (ms_byte << 8) | (ls_byte & 0xFF);
 8004e94:	897b      	ldrh	r3, [r7, #10]
 8004e96:	021b      	lsls	r3, r3, #8
 8004e98:	b29a      	uxth	r2, r3
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	b29b      	uxth	r3, r3
 8004e9e:	b2db      	uxtb	r3, r3
 8004ea0:	b29b      	uxth	r3, r3
 8004ea2:	4313      	orrs	r3, r2
 8004ea4:	b29b      	uxth	r3, r3
 8004ea6:	e000      	b.n	8004eaa <encodeTimeout+0x4c>
  }
  else { return 0; }
 8004ea8:	2300      	movs	r3, #0
}
 8004eaa:	4618      	mov	r0, r3
 8004eac:	3714      	adds	r7, #20
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	bc80      	pop	{r7}
 8004eb2:	4770      	bx	lr

08004eb4 <timeoutMclksToMicroseconds>:

// Convert sequence step timeout from MCLKs to microseconds with given VCSEL period in PCLKs
// based on VL53L0X_calc_timeout_us()
uint32_t timeoutMclksToMicroseconds(uint16_t timeout_period_mclks, uint8_t vcsel_period_pclks)
{
 8004eb4:	b480      	push	{r7}
 8004eb6:	b085      	sub	sp, #20
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	4603      	mov	r3, r0
 8004ebc:	460a      	mov	r2, r1
 8004ebe:	80fb      	strh	r3, [r7, #6]
 8004ec0:	4613      	mov	r3, r2
 8004ec2:	717b      	strb	r3, [r7, #5]
  uint32_t macro_period_ns = calcMacroPeriod(vcsel_period_pclks);
 8004ec4:	797b      	ldrb	r3, [r7, #5]
 8004ec6:	4a0d      	ldr	r2, [pc, #52]	; (8004efc <timeoutMclksToMicroseconds+0x48>)
 8004ec8:	fb02 f303 	mul.w	r3, r2, r3
 8004ecc:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8004ed0:	4a0b      	ldr	r2, [pc, #44]	; (8004f00 <timeoutMclksToMicroseconds+0x4c>)
 8004ed2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ed6:	099b      	lsrs	r3, r3, #6
 8004ed8:	60fb      	str	r3, [r7, #12]

  return ((timeout_period_mclks * macro_period_ns) + (macro_period_ns / 2)) / 1000;
 8004eda:	88fb      	ldrh	r3, [r7, #6]
 8004edc:	68fa      	ldr	r2, [r7, #12]
 8004ede:	fb03 f202 	mul.w	r2, r3, r2
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	085b      	lsrs	r3, r3, #1
 8004ee6:	4413      	add	r3, r2
 8004ee8:	4a05      	ldr	r2, [pc, #20]	; (8004f00 <timeoutMclksToMicroseconds+0x4c>)
 8004eea:	fba2 2303 	umull	r2, r3, r2, r3
 8004eee:	099b      	lsrs	r3, r3, #6
}
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	3714      	adds	r7, #20
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	bc80      	pop	{r7}
 8004ef8:	4770      	bx	lr
 8004efa:	bf00      	nop
 8004efc:	003a2f00 	.word	0x003a2f00
 8004f00:	10624dd3 	.word	0x10624dd3

08004f04 <timeoutMicrosecondsToMclks>:

// Convert sequence step timeout from microseconds to MCLKs with given VCSEL period in PCLKs
// based on VL53L0X_calc_timeout_mclks()
uint32_t timeoutMicrosecondsToMclks(uint32_t timeout_period_us, uint8_t vcsel_period_pclks)
{
 8004f04:	b480      	push	{r7}
 8004f06:	b085      	sub	sp, #20
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
 8004f0c:	460b      	mov	r3, r1
 8004f0e:	70fb      	strb	r3, [r7, #3]
  uint32_t macro_period_ns = calcMacroPeriod(vcsel_period_pclks);
 8004f10:	78fb      	ldrb	r3, [r7, #3]
 8004f12:	4a0d      	ldr	r2, [pc, #52]	; (8004f48 <timeoutMicrosecondsToMclks+0x44>)
 8004f14:	fb02 f303 	mul.w	r3, r2, r3
 8004f18:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8004f1c:	4a0b      	ldr	r2, [pc, #44]	; (8004f4c <timeoutMicrosecondsToMclks+0x48>)
 8004f1e:	fba2 2303 	umull	r2, r3, r2, r3
 8004f22:	099b      	lsrs	r3, r3, #6
 8004f24:	60fb      	str	r3, [r7, #12]

  return (((timeout_period_us * 1000) + (macro_period_ns / 2)) / macro_period_ns);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004f2c:	fb03 f202 	mul.w	r2, r3, r2
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	085b      	lsrs	r3, r3, #1
 8004f34:	441a      	add	r2, r3
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	3714      	adds	r7, #20
 8004f40:	46bd      	mov	sp, r7
 8004f42:	bc80      	pop	{r7}
 8004f44:	4770      	bx	lr
 8004f46:	bf00      	nop
 8004f48:	003a2f00 	.word	0x003a2f00
 8004f4c:	10624dd3 	.word	0x10624dd3

08004f50 <performSingleRefCalibration>:


// based on VL53L0X_perform_single_ref_calibration()
bool performSingleRefCalibration(uint8_t vhv_init_byte)
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b082      	sub	sp, #8
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	4603      	mov	r3, r0
 8004f58:	71fb      	strb	r3, [r7, #7]
  writeReg(SYSRANGE_START, 0x01 | vhv_init_byte); // VL53L0X_REG_SYSRANGE_MODE_START_STOP
 8004f5a:	79fb      	ldrb	r3, [r7, #7]
 8004f5c:	f043 0301 	orr.w	r3, r3, #1
 8004f60:	b2db      	uxtb	r3, r3
 8004f62:	4619      	mov	r1, r3
 8004f64:	2000      	movs	r0, #0
 8004f66:	f7fe ff69 	bl	8003e3c <writeReg>

  startTimeout();
 8004f6a:	f7fc faf5 	bl	8001558 <HAL_GetTick>
 8004f6e:	4603      	mov	r3, r0
 8004f70:	b29a      	uxth	r2, r3
 8004f72:	4b15      	ldr	r3, [pc, #84]	; (8004fc8 <performSingleRefCalibration+0x78>)
 8004f74:	801a      	strh	r2, [r3, #0]
  while ((readReg(RESULT_INTERRUPT_STATUS) & 0x07) == 0)
 8004f76:	e011      	b.n	8004f9c <performSingleRefCalibration+0x4c>
  {
    if (checkTimeoutExpired()) { return false; }
 8004f78:	4b14      	ldr	r3, [pc, #80]	; (8004fcc <performSingleRefCalibration+0x7c>)
 8004f7a:	881b      	ldrh	r3, [r3, #0]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d00d      	beq.n	8004f9c <performSingleRefCalibration+0x4c>
 8004f80:	f7fc faea 	bl	8001558 <HAL_GetTick>
 8004f84:	4603      	mov	r3, r0
 8004f86:	b29b      	uxth	r3, r3
 8004f88:	461a      	mov	r2, r3
 8004f8a:	4b0f      	ldr	r3, [pc, #60]	; (8004fc8 <performSingleRefCalibration+0x78>)
 8004f8c:	881b      	ldrh	r3, [r3, #0]
 8004f8e:	1ad3      	subs	r3, r2, r3
 8004f90:	4a0e      	ldr	r2, [pc, #56]	; (8004fcc <performSingleRefCalibration+0x7c>)
 8004f92:	8812      	ldrh	r2, [r2, #0]
 8004f94:	4293      	cmp	r3, r2
 8004f96:	dd01      	ble.n	8004f9c <performSingleRefCalibration+0x4c>
 8004f98:	2300      	movs	r3, #0
 8004f9a:	e010      	b.n	8004fbe <performSingleRefCalibration+0x6e>
  while ((readReg(RESULT_INTERRUPT_STATUS) & 0x07) == 0)
 8004f9c:	2013      	movs	r0, #19
 8004f9e:	f7fe ffa1 	bl	8003ee4 <readReg>
 8004fa2:	4603      	mov	r3, r0
 8004fa4:	f003 0307 	and.w	r3, r3, #7
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d0e5      	beq.n	8004f78 <performSingleRefCalibration+0x28>
  }

  writeReg(SYSTEM_INTERRUPT_CLEAR, 0x01);
 8004fac:	2101      	movs	r1, #1
 8004fae:	200b      	movs	r0, #11
 8004fb0:	f7fe ff44 	bl	8003e3c <writeReg>

  writeReg(SYSRANGE_START, 0x00);
 8004fb4:	2100      	movs	r1, #0
 8004fb6:	2000      	movs	r0, #0
 8004fb8:	f7fe ff40 	bl	8003e3c <writeReg>

  return true;
 8004fbc:	2301      	movs	r3, #1
}
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	3708      	adds	r7, #8
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	bd80      	pop	{r7, pc}
 8004fc6:	bf00      	nop
 8004fc8:	20000404 	.word	0x20000404
 8004fcc:	20000400 	.word	0x20000400

08004fd0 <atoi>:
 8004fd0:	220a      	movs	r2, #10
 8004fd2:	2100      	movs	r1, #0
 8004fd4:	f000 b932 	b.w	800523c <strtol>

08004fd8 <malloc>:
 8004fd8:	4b02      	ldr	r3, [pc, #8]	; (8004fe4 <malloc+0xc>)
 8004fda:	4601      	mov	r1, r0
 8004fdc:	6818      	ldr	r0, [r3, #0]
 8004fde:	f000 b823 	b.w	8005028 <_malloc_r>
 8004fe2:	bf00      	nop
 8004fe4:	20000064 	.word	0x20000064

08004fe8 <sbrk_aligned>:
 8004fe8:	b570      	push	{r4, r5, r6, lr}
 8004fea:	4e0e      	ldr	r6, [pc, #56]	; (8005024 <sbrk_aligned+0x3c>)
 8004fec:	460c      	mov	r4, r1
 8004fee:	6831      	ldr	r1, [r6, #0]
 8004ff0:	4605      	mov	r5, r0
 8004ff2:	b911      	cbnz	r1, 8004ffa <sbrk_aligned+0x12>
 8004ff4:	f000 fbce 	bl	8005794 <_sbrk_r>
 8004ff8:	6030      	str	r0, [r6, #0]
 8004ffa:	4621      	mov	r1, r4
 8004ffc:	4628      	mov	r0, r5
 8004ffe:	f000 fbc9 	bl	8005794 <_sbrk_r>
 8005002:	1c43      	adds	r3, r0, #1
 8005004:	d00a      	beq.n	800501c <sbrk_aligned+0x34>
 8005006:	1cc4      	adds	r4, r0, #3
 8005008:	f024 0403 	bic.w	r4, r4, #3
 800500c:	42a0      	cmp	r0, r4
 800500e:	d007      	beq.n	8005020 <sbrk_aligned+0x38>
 8005010:	1a21      	subs	r1, r4, r0
 8005012:	4628      	mov	r0, r5
 8005014:	f000 fbbe 	bl	8005794 <_sbrk_r>
 8005018:	3001      	adds	r0, #1
 800501a:	d101      	bne.n	8005020 <sbrk_aligned+0x38>
 800501c:	f04f 34ff 	mov.w	r4, #4294967295
 8005020:	4620      	mov	r0, r4
 8005022:	bd70      	pop	{r4, r5, r6, pc}
 8005024:	2000046c 	.word	0x2000046c

08005028 <_malloc_r>:
 8005028:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800502c:	1ccd      	adds	r5, r1, #3
 800502e:	f025 0503 	bic.w	r5, r5, #3
 8005032:	3508      	adds	r5, #8
 8005034:	2d0c      	cmp	r5, #12
 8005036:	bf38      	it	cc
 8005038:	250c      	movcc	r5, #12
 800503a:	2d00      	cmp	r5, #0
 800503c:	4607      	mov	r7, r0
 800503e:	db01      	blt.n	8005044 <_malloc_r+0x1c>
 8005040:	42a9      	cmp	r1, r5
 8005042:	d905      	bls.n	8005050 <_malloc_r+0x28>
 8005044:	230c      	movs	r3, #12
 8005046:	2600      	movs	r6, #0
 8005048:	603b      	str	r3, [r7, #0]
 800504a:	4630      	mov	r0, r6
 800504c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005050:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005124 <_malloc_r+0xfc>
 8005054:	f000 f868 	bl	8005128 <__malloc_lock>
 8005058:	f8d8 3000 	ldr.w	r3, [r8]
 800505c:	461c      	mov	r4, r3
 800505e:	bb5c      	cbnz	r4, 80050b8 <_malloc_r+0x90>
 8005060:	4629      	mov	r1, r5
 8005062:	4638      	mov	r0, r7
 8005064:	f7ff ffc0 	bl	8004fe8 <sbrk_aligned>
 8005068:	1c43      	adds	r3, r0, #1
 800506a:	4604      	mov	r4, r0
 800506c:	d155      	bne.n	800511a <_malloc_r+0xf2>
 800506e:	f8d8 4000 	ldr.w	r4, [r8]
 8005072:	4626      	mov	r6, r4
 8005074:	2e00      	cmp	r6, #0
 8005076:	d145      	bne.n	8005104 <_malloc_r+0xdc>
 8005078:	2c00      	cmp	r4, #0
 800507a:	d048      	beq.n	800510e <_malloc_r+0xe6>
 800507c:	6823      	ldr	r3, [r4, #0]
 800507e:	4631      	mov	r1, r6
 8005080:	4638      	mov	r0, r7
 8005082:	eb04 0903 	add.w	r9, r4, r3
 8005086:	f000 fb85 	bl	8005794 <_sbrk_r>
 800508a:	4581      	cmp	r9, r0
 800508c:	d13f      	bne.n	800510e <_malloc_r+0xe6>
 800508e:	6821      	ldr	r1, [r4, #0]
 8005090:	4638      	mov	r0, r7
 8005092:	1a6d      	subs	r5, r5, r1
 8005094:	4629      	mov	r1, r5
 8005096:	f7ff ffa7 	bl	8004fe8 <sbrk_aligned>
 800509a:	3001      	adds	r0, #1
 800509c:	d037      	beq.n	800510e <_malloc_r+0xe6>
 800509e:	6823      	ldr	r3, [r4, #0]
 80050a0:	442b      	add	r3, r5
 80050a2:	6023      	str	r3, [r4, #0]
 80050a4:	f8d8 3000 	ldr.w	r3, [r8]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d038      	beq.n	800511e <_malloc_r+0xf6>
 80050ac:	685a      	ldr	r2, [r3, #4]
 80050ae:	42a2      	cmp	r2, r4
 80050b0:	d12b      	bne.n	800510a <_malloc_r+0xe2>
 80050b2:	2200      	movs	r2, #0
 80050b4:	605a      	str	r2, [r3, #4]
 80050b6:	e00f      	b.n	80050d8 <_malloc_r+0xb0>
 80050b8:	6822      	ldr	r2, [r4, #0]
 80050ba:	1b52      	subs	r2, r2, r5
 80050bc:	d41f      	bmi.n	80050fe <_malloc_r+0xd6>
 80050be:	2a0b      	cmp	r2, #11
 80050c0:	d917      	bls.n	80050f2 <_malloc_r+0xca>
 80050c2:	1961      	adds	r1, r4, r5
 80050c4:	42a3      	cmp	r3, r4
 80050c6:	6025      	str	r5, [r4, #0]
 80050c8:	bf18      	it	ne
 80050ca:	6059      	strne	r1, [r3, #4]
 80050cc:	6863      	ldr	r3, [r4, #4]
 80050ce:	bf08      	it	eq
 80050d0:	f8c8 1000 	streq.w	r1, [r8]
 80050d4:	5162      	str	r2, [r4, r5]
 80050d6:	604b      	str	r3, [r1, #4]
 80050d8:	4638      	mov	r0, r7
 80050da:	f104 060b 	add.w	r6, r4, #11
 80050de:	f000 f829 	bl	8005134 <__malloc_unlock>
 80050e2:	f026 0607 	bic.w	r6, r6, #7
 80050e6:	1d23      	adds	r3, r4, #4
 80050e8:	1af2      	subs	r2, r6, r3
 80050ea:	d0ae      	beq.n	800504a <_malloc_r+0x22>
 80050ec:	1b9b      	subs	r3, r3, r6
 80050ee:	50a3      	str	r3, [r4, r2]
 80050f0:	e7ab      	b.n	800504a <_malloc_r+0x22>
 80050f2:	42a3      	cmp	r3, r4
 80050f4:	6862      	ldr	r2, [r4, #4]
 80050f6:	d1dd      	bne.n	80050b4 <_malloc_r+0x8c>
 80050f8:	f8c8 2000 	str.w	r2, [r8]
 80050fc:	e7ec      	b.n	80050d8 <_malloc_r+0xb0>
 80050fe:	4623      	mov	r3, r4
 8005100:	6864      	ldr	r4, [r4, #4]
 8005102:	e7ac      	b.n	800505e <_malloc_r+0x36>
 8005104:	4634      	mov	r4, r6
 8005106:	6876      	ldr	r6, [r6, #4]
 8005108:	e7b4      	b.n	8005074 <_malloc_r+0x4c>
 800510a:	4613      	mov	r3, r2
 800510c:	e7cc      	b.n	80050a8 <_malloc_r+0x80>
 800510e:	230c      	movs	r3, #12
 8005110:	4638      	mov	r0, r7
 8005112:	603b      	str	r3, [r7, #0]
 8005114:	f000 f80e 	bl	8005134 <__malloc_unlock>
 8005118:	e797      	b.n	800504a <_malloc_r+0x22>
 800511a:	6025      	str	r5, [r4, #0]
 800511c:	e7dc      	b.n	80050d8 <_malloc_r+0xb0>
 800511e:	605b      	str	r3, [r3, #4]
 8005120:	deff      	udf	#255	; 0xff
 8005122:	bf00      	nop
 8005124:	20000468 	.word	0x20000468

08005128 <__malloc_lock>:
 8005128:	4801      	ldr	r0, [pc, #4]	; (8005130 <__malloc_lock+0x8>)
 800512a:	f000 bb7f 	b.w	800582c <__retarget_lock_acquire_recursive>
 800512e:	bf00      	nop
 8005130:	200005b0 	.word	0x200005b0

08005134 <__malloc_unlock>:
 8005134:	4801      	ldr	r0, [pc, #4]	; (800513c <__malloc_unlock+0x8>)
 8005136:	f000 bb7a 	b.w	800582e <__retarget_lock_release_recursive>
 800513a:	bf00      	nop
 800513c:	200005b0 	.word	0x200005b0

08005140 <_strtol_l.constprop.0>:
 8005140:	2b01      	cmp	r3, #1
 8005142:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005146:	4686      	mov	lr, r0
 8005148:	4690      	mov	r8, r2
 800514a:	d001      	beq.n	8005150 <_strtol_l.constprop.0+0x10>
 800514c:	2b24      	cmp	r3, #36	; 0x24
 800514e:	d906      	bls.n	800515e <_strtol_l.constprop.0+0x1e>
 8005150:	f000 fb42 	bl	80057d8 <__errno>
 8005154:	2316      	movs	r3, #22
 8005156:	6003      	str	r3, [r0, #0]
 8005158:	2000      	movs	r0, #0
 800515a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800515e:	460d      	mov	r5, r1
 8005160:	4835      	ldr	r0, [pc, #212]	; (8005238 <_strtol_l.constprop.0+0xf8>)
 8005162:	462a      	mov	r2, r5
 8005164:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005168:	5d06      	ldrb	r6, [r0, r4]
 800516a:	f016 0608 	ands.w	r6, r6, #8
 800516e:	d1f8      	bne.n	8005162 <_strtol_l.constprop.0+0x22>
 8005170:	2c2d      	cmp	r4, #45	; 0x2d
 8005172:	d12e      	bne.n	80051d2 <_strtol_l.constprop.0+0x92>
 8005174:	2601      	movs	r6, #1
 8005176:	782c      	ldrb	r4, [r5, #0]
 8005178:	1c95      	adds	r5, r2, #2
 800517a:	2b00      	cmp	r3, #0
 800517c:	d057      	beq.n	800522e <_strtol_l.constprop.0+0xee>
 800517e:	2b10      	cmp	r3, #16
 8005180:	d109      	bne.n	8005196 <_strtol_l.constprop.0+0x56>
 8005182:	2c30      	cmp	r4, #48	; 0x30
 8005184:	d107      	bne.n	8005196 <_strtol_l.constprop.0+0x56>
 8005186:	782a      	ldrb	r2, [r5, #0]
 8005188:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800518c:	2a58      	cmp	r2, #88	; 0x58
 800518e:	d149      	bne.n	8005224 <_strtol_l.constprop.0+0xe4>
 8005190:	2310      	movs	r3, #16
 8005192:	786c      	ldrb	r4, [r5, #1]
 8005194:	3502      	adds	r5, #2
 8005196:	2200      	movs	r2, #0
 8005198:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
 800519c:	f10c 3cff 	add.w	ip, ip, #4294967295
 80051a0:	fbbc f9f3 	udiv	r9, ip, r3
 80051a4:	4610      	mov	r0, r2
 80051a6:	fb03 ca19 	mls	sl, r3, r9, ip
 80051aa:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 80051ae:	2f09      	cmp	r7, #9
 80051b0:	d814      	bhi.n	80051dc <_strtol_l.constprop.0+0x9c>
 80051b2:	463c      	mov	r4, r7
 80051b4:	42a3      	cmp	r3, r4
 80051b6:	dd20      	ble.n	80051fa <_strtol_l.constprop.0+0xba>
 80051b8:	1c57      	adds	r7, r2, #1
 80051ba:	d007      	beq.n	80051cc <_strtol_l.constprop.0+0x8c>
 80051bc:	4581      	cmp	r9, r0
 80051be:	d319      	bcc.n	80051f4 <_strtol_l.constprop.0+0xb4>
 80051c0:	d101      	bne.n	80051c6 <_strtol_l.constprop.0+0x86>
 80051c2:	45a2      	cmp	sl, r4
 80051c4:	db16      	blt.n	80051f4 <_strtol_l.constprop.0+0xb4>
 80051c6:	2201      	movs	r2, #1
 80051c8:	fb00 4003 	mla	r0, r0, r3, r4
 80051cc:	f815 4b01 	ldrb.w	r4, [r5], #1
 80051d0:	e7eb      	b.n	80051aa <_strtol_l.constprop.0+0x6a>
 80051d2:	2c2b      	cmp	r4, #43	; 0x2b
 80051d4:	bf04      	itt	eq
 80051d6:	782c      	ldrbeq	r4, [r5, #0]
 80051d8:	1c95      	addeq	r5, r2, #2
 80051da:	e7ce      	b.n	800517a <_strtol_l.constprop.0+0x3a>
 80051dc:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 80051e0:	2f19      	cmp	r7, #25
 80051e2:	d801      	bhi.n	80051e8 <_strtol_l.constprop.0+0xa8>
 80051e4:	3c37      	subs	r4, #55	; 0x37
 80051e6:	e7e5      	b.n	80051b4 <_strtol_l.constprop.0+0x74>
 80051e8:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 80051ec:	2f19      	cmp	r7, #25
 80051ee:	d804      	bhi.n	80051fa <_strtol_l.constprop.0+0xba>
 80051f0:	3c57      	subs	r4, #87	; 0x57
 80051f2:	e7df      	b.n	80051b4 <_strtol_l.constprop.0+0x74>
 80051f4:	f04f 32ff 	mov.w	r2, #4294967295
 80051f8:	e7e8      	b.n	80051cc <_strtol_l.constprop.0+0x8c>
 80051fa:	1c53      	adds	r3, r2, #1
 80051fc:	d108      	bne.n	8005210 <_strtol_l.constprop.0+0xd0>
 80051fe:	2322      	movs	r3, #34	; 0x22
 8005200:	4660      	mov	r0, ip
 8005202:	f8ce 3000 	str.w	r3, [lr]
 8005206:	f1b8 0f00 	cmp.w	r8, #0
 800520a:	d0a6      	beq.n	800515a <_strtol_l.constprop.0+0x1a>
 800520c:	1e69      	subs	r1, r5, #1
 800520e:	e006      	b.n	800521e <_strtol_l.constprop.0+0xde>
 8005210:	b106      	cbz	r6, 8005214 <_strtol_l.constprop.0+0xd4>
 8005212:	4240      	negs	r0, r0
 8005214:	f1b8 0f00 	cmp.w	r8, #0
 8005218:	d09f      	beq.n	800515a <_strtol_l.constprop.0+0x1a>
 800521a:	2a00      	cmp	r2, #0
 800521c:	d1f6      	bne.n	800520c <_strtol_l.constprop.0+0xcc>
 800521e:	f8c8 1000 	str.w	r1, [r8]
 8005222:	e79a      	b.n	800515a <_strtol_l.constprop.0+0x1a>
 8005224:	2430      	movs	r4, #48	; 0x30
 8005226:	2b00      	cmp	r3, #0
 8005228:	d1b5      	bne.n	8005196 <_strtol_l.constprop.0+0x56>
 800522a:	2308      	movs	r3, #8
 800522c:	e7b3      	b.n	8005196 <_strtol_l.constprop.0+0x56>
 800522e:	2c30      	cmp	r4, #48	; 0x30
 8005230:	d0a9      	beq.n	8005186 <_strtol_l.constprop.0+0x46>
 8005232:	230a      	movs	r3, #10
 8005234:	e7af      	b.n	8005196 <_strtol_l.constprop.0+0x56>
 8005236:	bf00      	nop
 8005238:	0800629f 	.word	0x0800629f

0800523c <strtol>:
 800523c:	4613      	mov	r3, r2
 800523e:	460a      	mov	r2, r1
 8005240:	4601      	mov	r1, r0
 8005242:	4802      	ldr	r0, [pc, #8]	; (800524c <strtol+0x10>)
 8005244:	6800      	ldr	r0, [r0, #0]
 8005246:	f7ff bf7b 	b.w	8005140 <_strtol_l.constprop.0>
 800524a:	bf00      	nop
 800524c:	20000064 	.word	0x20000064

08005250 <std>:
 8005250:	2300      	movs	r3, #0
 8005252:	b510      	push	{r4, lr}
 8005254:	4604      	mov	r4, r0
 8005256:	e9c0 3300 	strd	r3, r3, [r0]
 800525a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800525e:	6083      	str	r3, [r0, #8]
 8005260:	8181      	strh	r1, [r0, #12]
 8005262:	6643      	str	r3, [r0, #100]	; 0x64
 8005264:	81c2      	strh	r2, [r0, #14]
 8005266:	6183      	str	r3, [r0, #24]
 8005268:	4619      	mov	r1, r3
 800526a:	2208      	movs	r2, #8
 800526c:	305c      	adds	r0, #92	; 0x5c
 800526e:	f000 f9e5 	bl	800563c <memset>
 8005272:	4b05      	ldr	r3, [pc, #20]	; (8005288 <std+0x38>)
 8005274:	6224      	str	r4, [r4, #32]
 8005276:	6263      	str	r3, [r4, #36]	; 0x24
 8005278:	4b04      	ldr	r3, [pc, #16]	; (800528c <std+0x3c>)
 800527a:	62a3      	str	r3, [r4, #40]	; 0x28
 800527c:	4b04      	ldr	r3, [pc, #16]	; (8005290 <std+0x40>)
 800527e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005280:	4b04      	ldr	r3, [pc, #16]	; (8005294 <std+0x44>)
 8005282:	6323      	str	r3, [r4, #48]	; 0x30
 8005284:	bd10      	pop	{r4, pc}
 8005286:	bf00      	nop
 8005288:	0800548d 	.word	0x0800548d
 800528c:	080054af 	.word	0x080054af
 8005290:	080054e7 	.word	0x080054e7
 8005294:	0800550b 	.word	0x0800550b

08005298 <stdio_exit_handler>:
 8005298:	4a02      	ldr	r2, [pc, #8]	; (80052a4 <stdio_exit_handler+0xc>)
 800529a:	4903      	ldr	r1, [pc, #12]	; (80052a8 <stdio_exit_handler+0x10>)
 800529c:	4803      	ldr	r0, [pc, #12]	; (80052ac <stdio_exit_handler+0x14>)
 800529e:	f000 b869 	b.w	8005374 <_fwalk_sglue>
 80052a2:	bf00      	nop
 80052a4:	2000000c 	.word	0x2000000c
 80052a8:	08005fd9 	.word	0x08005fd9
 80052ac:	20000018 	.word	0x20000018

080052b0 <cleanup_stdio>:
 80052b0:	6841      	ldr	r1, [r0, #4]
 80052b2:	4b0c      	ldr	r3, [pc, #48]	; (80052e4 <cleanup_stdio+0x34>)
 80052b4:	b510      	push	{r4, lr}
 80052b6:	4299      	cmp	r1, r3
 80052b8:	4604      	mov	r4, r0
 80052ba:	d001      	beq.n	80052c0 <cleanup_stdio+0x10>
 80052bc:	f000 fe8c 	bl	8005fd8 <_fflush_r>
 80052c0:	68a1      	ldr	r1, [r4, #8]
 80052c2:	4b09      	ldr	r3, [pc, #36]	; (80052e8 <cleanup_stdio+0x38>)
 80052c4:	4299      	cmp	r1, r3
 80052c6:	d002      	beq.n	80052ce <cleanup_stdio+0x1e>
 80052c8:	4620      	mov	r0, r4
 80052ca:	f000 fe85 	bl	8005fd8 <_fflush_r>
 80052ce:	68e1      	ldr	r1, [r4, #12]
 80052d0:	4b06      	ldr	r3, [pc, #24]	; (80052ec <cleanup_stdio+0x3c>)
 80052d2:	4299      	cmp	r1, r3
 80052d4:	d004      	beq.n	80052e0 <cleanup_stdio+0x30>
 80052d6:	4620      	mov	r0, r4
 80052d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80052dc:	f000 be7c 	b.w	8005fd8 <_fflush_r>
 80052e0:	bd10      	pop	{r4, pc}
 80052e2:	bf00      	nop
 80052e4:	20000470 	.word	0x20000470
 80052e8:	200004d8 	.word	0x200004d8
 80052ec:	20000540 	.word	0x20000540

080052f0 <global_stdio_init.part.0>:
 80052f0:	b510      	push	{r4, lr}
 80052f2:	4b0b      	ldr	r3, [pc, #44]	; (8005320 <global_stdio_init.part.0+0x30>)
 80052f4:	4c0b      	ldr	r4, [pc, #44]	; (8005324 <global_stdio_init.part.0+0x34>)
 80052f6:	4a0c      	ldr	r2, [pc, #48]	; (8005328 <global_stdio_init.part.0+0x38>)
 80052f8:	4620      	mov	r0, r4
 80052fa:	601a      	str	r2, [r3, #0]
 80052fc:	2104      	movs	r1, #4
 80052fe:	2200      	movs	r2, #0
 8005300:	f7ff ffa6 	bl	8005250 <std>
 8005304:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005308:	2201      	movs	r2, #1
 800530a:	2109      	movs	r1, #9
 800530c:	f7ff ffa0 	bl	8005250 <std>
 8005310:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005314:	2202      	movs	r2, #2
 8005316:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800531a:	2112      	movs	r1, #18
 800531c:	f7ff bf98 	b.w	8005250 <std>
 8005320:	200005a8 	.word	0x200005a8
 8005324:	20000470 	.word	0x20000470
 8005328:	08005299 	.word	0x08005299

0800532c <__sfp_lock_acquire>:
 800532c:	4801      	ldr	r0, [pc, #4]	; (8005334 <__sfp_lock_acquire+0x8>)
 800532e:	f000 ba7d 	b.w	800582c <__retarget_lock_acquire_recursive>
 8005332:	bf00      	nop
 8005334:	200005b1 	.word	0x200005b1

08005338 <__sfp_lock_release>:
 8005338:	4801      	ldr	r0, [pc, #4]	; (8005340 <__sfp_lock_release+0x8>)
 800533a:	f000 ba78 	b.w	800582e <__retarget_lock_release_recursive>
 800533e:	bf00      	nop
 8005340:	200005b1 	.word	0x200005b1

08005344 <__sinit>:
 8005344:	b510      	push	{r4, lr}
 8005346:	4604      	mov	r4, r0
 8005348:	f7ff fff0 	bl	800532c <__sfp_lock_acquire>
 800534c:	6a23      	ldr	r3, [r4, #32]
 800534e:	b11b      	cbz	r3, 8005358 <__sinit+0x14>
 8005350:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005354:	f7ff bff0 	b.w	8005338 <__sfp_lock_release>
 8005358:	4b04      	ldr	r3, [pc, #16]	; (800536c <__sinit+0x28>)
 800535a:	6223      	str	r3, [r4, #32]
 800535c:	4b04      	ldr	r3, [pc, #16]	; (8005370 <__sinit+0x2c>)
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d1f5      	bne.n	8005350 <__sinit+0xc>
 8005364:	f7ff ffc4 	bl	80052f0 <global_stdio_init.part.0>
 8005368:	e7f2      	b.n	8005350 <__sinit+0xc>
 800536a:	bf00      	nop
 800536c:	080052b1 	.word	0x080052b1
 8005370:	200005a8 	.word	0x200005a8

08005374 <_fwalk_sglue>:
 8005374:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005378:	4607      	mov	r7, r0
 800537a:	4688      	mov	r8, r1
 800537c:	4614      	mov	r4, r2
 800537e:	2600      	movs	r6, #0
 8005380:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005384:	f1b9 0901 	subs.w	r9, r9, #1
 8005388:	d505      	bpl.n	8005396 <_fwalk_sglue+0x22>
 800538a:	6824      	ldr	r4, [r4, #0]
 800538c:	2c00      	cmp	r4, #0
 800538e:	d1f7      	bne.n	8005380 <_fwalk_sglue+0xc>
 8005390:	4630      	mov	r0, r6
 8005392:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005396:	89ab      	ldrh	r3, [r5, #12]
 8005398:	2b01      	cmp	r3, #1
 800539a:	d907      	bls.n	80053ac <_fwalk_sglue+0x38>
 800539c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80053a0:	3301      	adds	r3, #1
 80053a2:	d003      	beq.n	80053ac <_fwalk_sglue+0x38>
 80053a4:	4629      	mov	r1, r5
 80053a6:	4638      	mov	r0, r7
 80053a8:	47c0      	blx	r8
 80053aa:	4306      	orrs	r6, r0
 80053ac:	3568      	adds	r5, #104	; 0x68
 80053ae:	e7e9      	b.n	8005384 <_fwalk_sglue+0x10>

080053b0 <iprintf>:
 80053b0:	b40f      	push	{r0, r1, r2, r3}
 80053b2:	b507      	push	{r0, r1, r2, lr}
 80053b4:	4906      	ldr	r1, [pc, #24]	; (80053d0 <iprintf+0x20>)
 80053b6:	ab04      	add	r3, sp, #16
 80053b8:	6808      	ldr	r0, [r1, #0]
 80053ba:	f853 2b04 	ldr.w	r2, [r3], #4
 80053be:	6881      	ldr	r1, [r0, #8]
 80053c0:	9301      	str	r3, [sp, #4]
 80053c2:	f000 fad9 	bl	8005978 <_vfiprintf_r>
 80053c6:	b003      	add	sp, #12
 80053c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80053cc:	b004      	add	sp, #16
 80053ce:	4770      	bx	lr
 80053d0:	20000064 	.word	0x20000064

080053d4 <_puts_r>:
 80053d4:	6a03      	ldr	r3, [r0, #32]
 80053d6:	b570      	push	{r4, r5, r6, lr}
 80053d8:	4605      	mov	r5, r0
 80053da:	460e      	mov	r6, r1
 80053dc:	6884      	ldr	r4, [r0, #8]
 80053de:	b90b      	cbnz	r3, 80053e4 <_puts_r+0x10>
 80053e0:	f7ff ffb0 	bl	8005344 <__sinit>
 80053e4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80053e6:	07db      	lsls	r3, r3, #31
 80053e8:	d405      	bmi.n	80053f6 <_puts_r+0x22>
 80053ea:	89a3      	ldrh	r3, [r4, #12]
 80053ec:	0598      	lsls	r0, r3, #22
 80053ee:	d402      	bmi.n	80053f6 <_puts_r+0x22>
 80053f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80053f2:	f000 fa1b 	bl	800582c <__retarget_lock_acquire_recursive>
 80053f6:	89a3      	ldrh	r3, [r4, #12]
 80053f8:	0719      	lsls	r1, r3, #28
 80053fa:	d513      	bpl.n	8005424 <_puts_r+0x50>
 80053fc:	6923      	ldr	r3, [r4, #16]
 80053fe:	b18b      	cbz	r3, 8005424 <_puts_r+0x50>
 8005400:	3e01      	subs	r6, #1
 8005402:	68a3      	ldr	r3, [r4, #8]
 8005404:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005408:	3b01      	subs	r3, #1
 800540a:	60a3      	str	r3, [r4, #8]
 800540c:	b9e9      	cbnz	r1, 800544a <_puts_r+0x76>
 800540e:	2b00      	cmp	r3, #0
 8005410:	da2e      	bge.n	8005470 <_puts_r+0x9c>
 8005412:	4622      	mov	r2, r4
 8005414:	210a      	movs	r1, #10
 8005416:	4628      	mov	r0, r5
 8005418:	f000 f87b 	bl	8005512 <__swbuf_r>
 800541c:	3001      	adds	r0, #1
 800541e:	d007      	beq.n	8005430 <_puts_r+0x5c>
 8005420:	250a      	movs	r5, #10
 8005422:	e007      	b.n	8005434 <_puts_r+0x60>
 8005424:	4621      	mov	r1, r4
 8005426:	4628      	mov	r0, r5
 8005428:	f000 f8b0 	bl	800558c <__swsetup_r>
 800542c:	2800      	cmp	r0, #0
 800542e:	d0e7      	beq.n	8005400 <_puts_r+0x2c>
 8005430:	f04f 35ff 	mov.w	r5, #4294967295
 8005434:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005436:	07da      	lsls	r2, r3, #31
 8005438:	d405      	bmi.n	8005446 <_puts_r+0x72>
 800543a:	89a3      	ldrh	r3, [r4, #12]
 800543c:	059b      	lsls	r3, r3, #22
 800543e:	d402      	bmi.n	8005446 <_puts_r+0x72>
 8005440:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005442:	f000 f9f4 	bl	800582e <__retarget_lock_release_recursive>
 8005446:	4628      	mov	r0, r5
 8005448:	bd70      	pop	{r4, r5, r6, pc}
 800544a:	2b00      	cmp	r3, #0
 800544c:	da04      	bge.n	8005458 <_puts_r+0x84>
 800544e:	69a2      	ldr	r2, [r4, #24]
 8005450:	429a      	cmp	r2, r3
 8005452:	dc06      	bgt.n	8005462 <_puts_r+0x8e>
 8005454:	290a      	cmp	r1, #10
 8005456:	d004      	beq.n	8005462 <_puts_r+0x8e>
 8005458:	6823      	ldr	r3, [r4, #0]
 800545a:	1c5a      	adds	r2, r3, #1
 800545c:	6022      	str	r2, [r4, #0]
 800545e:	7019      	strb	r1, [r3, #0]
 8005460:	e7cf      	b.n	8005402 <_puts_r+0x2e>
 8005462:	4622      	mov	r2, r4
 8005464:	4628      	mov	r0, r5
 8005466:	f000 f854 	bl	8005512 <__swbuf_r>
 800546a:	3001      	adds	r0, #1
 800546c:	d1c9      	bne.n	8005402 <_puts_r+0x2e>
 800546e:	e7df      	b.n	8005430 <_puts_r+0x5c>
 8005470:	250a      	movs	r5, #10
 8005472:	6823      	ldr	r3, [r4, #0]
 8005474:	1c5a      	adds	r2, r3, #1
 8005476:	6022      	str	r2, [r4, #0]
 8005478:	701d      	strb	r5, [r3, #0]
 800547a:	e7db      	b.n	8005434 <_puts_r+0x60>

0800547c <puts>:
 800547c:	4b02      	ldr	r3, [pc, #8]	; (8005488 <puts+0xc>)
 800547e:	4601      	mov	r1, r0
 8005480:	6818      	ldr	r0, [r3, #0]
 8005482:	f7ff bfa7 	b.w	80053d4 <_puts_r>
 8005486:	bf00      	nop
 8005488:	20000064 	.word	0x20000064

0800548c <__sread>:
 800548c:	b510      	push	{r4, lr}
 800548e:	460c      	mov	r4, r1
 8005490:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005494:	f000 f96c 	bl	8005770 <_read_r>
 8005498:	2800      	cmp	r0, #0
 800549a:	bfab      	itete	ge
 800549c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800549e:	89a3      	ldrhlt	r3, [r4, #12]
 80054a0:	181b      	addge	r3, r3, r0
 80054a2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80054a6:	bfac      	ite	ge
 80054a8:	6563      	strge	r3, [r4, #84]	; 0x54
 80054aa:	81a3      	strhlt	r3, [r4, #12]
 80054ac:	bd10      	pop	{r4, pc}

080054ae <__swrite>:
 80054ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80054b2:	461f      	mov	r7, r3
 80054b4:	898b      	ldrh	r3, [r1, #12]
 80054b6:	4605      	mov	r5, r0
 80054b8:	05db      	lsls	r3, r3, #23
 80054ba:	460c      	mov	r4, r1
 80054bc:	4616      	mov	r6, r2
 80054be:	d505      	bpl.n	80054cc <__swrite+0x1e>
 80054c0:	2302      	movs	r3, #2
 80054c2:	2200      	movs	r2, #0
 80054c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80054c8:	f000 f940 	bl	800574c <_lseek_r>
 80054cc:	89a3      	ldrh	r3, [r4, #12]
 80054ce:	4632      	mov	r2, r6
 80054d0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80054d4:	81a3      	strh	r3, [r4, #12]
 80054d6:	4628      	mov	r0, r5
 80054d8:	463b      	mov	r3, r7
 80054da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80054de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80054e2:	f000 b967 	b.w	80057b4 <_write_r>

080054e6 <__sseek>:
 80054e6:	b510      	push	{r4, lr}
 80054e8:	460c      	mov	r4, r1
 80054ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80054ee:	f000 f92d 	bl	800574c <_lseek_r>
 80054f2:	1c43      	adds	r3, r0, #1
 80054f4:	89a3      	ldrh	r3, [r4, #12]
 80054f6:	bf15      	itete	ne
 80054f8:	6560      	strne	r0, [r4, #84]	; 0x54
 80054fa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80054fe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005502:	81a3      	strheq	r3, [r4, #12]
 8005504:	bf18      	it	ne
 8005506:	81a3      	strhne	r3, [r4, #12]
 8005508:	bd10      	pop	{r4, pc}

0800550a <__sclose>:
 800550a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800550e:	f000 b90d 	b.w	800572c <_close_r>

08005512 <__swbuf_r>:
 8005512:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005514:	460e      	mov	r6, r1
 8005516:	4614      	mov	r4, r2
 8005518:	4605      	mov	r5, r0
 800551a:	b118      	cbz	r0, 8005524 <__swbuf_r+0x12>
 800551c:	6a03      	ldr	r3, [r0, #32]
 800551e:	b90b      	cbnz	r3, 8005524 <__swbuf_r+0x12>
 8005520:	f7ff ff10 	bl	8005344 <__sinit>
 8005524:	69a3      	ldr	r3, [r4, #24]
 8005526:	60a3      	str	r3, [r4, #8]
 8005528:	89a3      	ldrh	r3, [r4, #12]
 800552a:	071a      	lsls	r2, r3, #28
 800552c:	d525      	bpl.n	800557a <__swbuf_r+0x68>
 800552e:	6923      	ldr	r3, [r4, #16]
 8005530:	b31b      	cbz	r3, 800557a <__swbuf_r+0x68>
 8005532:	6823      	ldr	r3, [r4, #0]
 8005534:	6922      	ldr	r2, [r4, #16]
 8005536:	b2f6      	uxtb	r6, r6
 8005538:	1a98      	subs	r0, r3, r2
 800553a:	6963      	ldr	r3, [r4, #20]
 800553c:	4637      	mov	r7, r6
 800553e:	4283      	cmp	r3, r0
 8005540:	dc04      	bgt.n	800554c <__swbuf_r+0x3a>
 8005542:	4621      	mov	r1, r4
 8005544:	4628      	mov	r0, r5
 8005546:	f000 fd47 	bl	8005fd8 <_fflush_r>
 800554a:	b9e0      	cbnz	r0, 8005586 <__swbuf_r+0x74>
 800554c:	68a3      	ldr	r3, [r4, #8]
 800554e:	3b01      	subs	r3, #1
 8005550:	60a3      	str	r3, [r4, #8]
 8005552:	6823      	ldr	r3, [r4, #0]
 8005554:	1c5a      	adds	r2, r3, #1
 8005556:	6022      	str	r2, [r4, #0]
 8005558:	701e      	strb	r6, [r3, #0]
 800555a:	6962      	ldr	r2, [r4, #20]
 800555c:	1c43      	adds	r3, r0, #1
 800555e:	429a      	cmp	r2, r3
 8005560:	d004      	beq.n	800556c <__swbuf_r+0x5a>
 8005562:	89a3      	ldrh	r3, [r4, #12]
 8005564:	07db      	lsls	r3, r3, #31
 8005566:	d506      	bpl.n	8005576 <__swbuf_r+0x64>
 8005568:	2e0a      	cmp	r6, #10
 800556a:	d104      	bne.n	8005576 <__swbuf_r+0x64>
 800556c:	4621      	mov	r1, r4
 800556e:	4628      	mov	r0, r5
 8005570:	f000 fd32 	bl	8005fd8 <_fflush_r>
 8005574:	b938      	cbnz	r0, 8005586 <__swbuf_r+0x74>
 8005576:	4638      	mov	r0, r7
 8005578:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800557a:	4621      	mov	r1, r4
 800557c:	4628      	mov	r0, r5
 800557e:	f000 f805 	bl	800558c <__swsetup_r>
 8005582:	2800      	cmp	r0, #0
 8005584:	d0d5      	beq.n	8005532 <__swbuf_r+0x20>
 8005586:	f04f 37ff 	mov.w	r7, #4294967295
 800558a:	e7f4      	b.n	8005576 <__swbuf_r+0x64>

0800558c <__swsetup_r>:
 800558c:	b538      	push	{r3, r4, r5, lr}
 800558e:	4b2a      	ldr	r3, [pc, #168]	; (8005638 <__swsetup_r+0xac>)
 8005590:	4605      	mov	r5, r0
 8005592:	6818      	ldr	r0, [r3, #0]
 8005594:	460c      	mov	r4, r1
 8005596:	b118      	cbz	r0, 80055a0 <__swsetup_r+0x14>
 8005598:	6a03      	ldr	r3, [r0, #32]
 800559a:	b90b      	cbnz	r3, 80055a0 <__swsetup_r+0x14>
 800559c:	f7ff fed2 	bl	8005344 <__sinit>
 80055a0:	89a3      	ldrh	r3, [r4, #12]
 80055a2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80055a6:	0718      	lsls	r0, r3, #28
 80055a8:	d422      	bmi.n	80055f0 <__swsetup_r+0x64>
 80055aa:	06d9      	lsls	r1, r3, #27
 80055ac:	d407      	bmi.n	80055be <__swsetup_r+0x32>
 80055ae:	2309      	movs	r3, #9
 80055b0:	602b      	str	r3, [r5, #0]
 80055b2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80055b6:	f04f 30ff 	mov.w	r0, #4294967295
 80055ba:	81a3      	strh	r3, [r4, #12]
 80055bc:	e034      	b.n	8005628 <__swsetup_r+0x9c>
 80055be:	0758      	lsls	r0, r3, #29
 80055c0:	d512      	bpl.n	80055e8 <__swsetup_r+0x5c>
 80055c2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80055c4:	b141      	cbz	r1, 80055d8 <__swsetup_r+0x4c>
 80055c6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80055ca:	4299      	cmp	r1, r3
 80055cc:	d002      	beq.n	80055d4 <__swsetup_r+0x48>
 80055ce:	4628      	mov	r0, r5
 80055d0:	f000 f962 	bl	8005898 <_free_r>
 80055d4:	2300      	movs	r3, #0
 80055d6:	6363      	str	r3, [r4, #52]	; 0x34
 80055d8:	89a3      	ldrh	r3, [r4, #12]
 80055da:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80055de:	81a3      	strh	r3, [r4, #12]
 80055e0:	2300      	movs	r3, #0
 80055e2:	6063      	str	r3, [r4, #4]
 80055e4:	6923      	ldr	r3, [r4, #16]
 80055e6:	6023      	str	r3, [r4, #0]
 80055e8:	89a3      	ldrh	r3, [r4, #12]
 80055ea:	f043 0308 	orr.w	r3, r3, #8
 80055ee:	81a3      	strh	r3, [r4, #12]
 80055f0:	6923      	ldr	r3, [r4, #16]
 80055f2:	b94b      	cbnz	r3, 8005608 <__swsetup_r+0x7c>
 80055f4:	89a3      	ldrh	r3, [r4, #12]
 80055f6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80055fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80055fe:	d003      	beq.n	8005608 <__swsetup_r+0x7c>
 8005600:	4621      	mov	r1, r4
 8005602:	4628      	mov	r0, r5
 8005604:	f000 fd47 	bl	8006096 <__smakebuf_r>
 8005608:	89a0      	ldrh	r0, [r4, #12]
 800560a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800560e:	f010 0301 	ands.w	r3, r0, #1
 8005612:	d00a      	beq.n	800562a <__swsetup_r+0x9e>
 8005614:	2300      	movs	r3, #0
 8005616:	60a3      	str	r3, [r4, #8]
 8005618:	6963      	ldr	r3, [r4, #20]
 800561a:	425b      	negs	r3, r3
 800561c:	61a3      	str	r3, [r4, #24]
 800561e:	6923      	ldr	r3, [r4, #16]
 8005620:	b943      	cbnz	r3, 8005634 <__swsetup_r+0xa8>
 8005622:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005626:	d1c4      	bne.n	80055b2 <__swsetup_r+0x26>
 8005628:	bd38      	pop	{r3, r4, r5, pc}
 800562a:	0781      	lsls	r1, r0, #30
 800562c:	bf58      	it	pl
 800562e:	6963      	ldrpl	r3, [r4, #20]
 8005630:	60a3      	str	r3, [r4, #8]
 8005632:	e7f4      	b.n	800561e <__swsetup_r+0x92>
 8005634:	2000      	movs	r0, #0
 8005636:	e7f7      	b.n	8005628 <__swsetup_r+0x9c>
 8005638:	20000064 	.word	0x20000064

0800563c <memset>:
 800563c:	4603      	mov	r3, r0
 800563e:	4402      	add	r2, r0
 8005640:	4293      	cmp	r3, r2
 8005642:	d100      	bne.n	8005646 <memset+0xa>
 8005644:	4770      	bx	lr
 8005646:	f803 1b01 	strb.w	r1, [r3], #1
 800564a:	e7f9      	b.n	8005640 <memset+0x4>

0800564c <strncpy>:
 800564c:	4603      	mov	r3, r0
 800564e:	b510      	push	{r4, lr}
 8005650:	3901      	subs	r1, #1
 8005652:	b132      	cbz	r2, 8005662 <strncpy+0x16>
 8005654:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8005658:	3a01      	subs	r2, #1
 800565a:	f803 4b01 	strb.w	r4, [r3], #1
 800565e:	2c00      	cmp	r4, #0
 8005660:	d1f7      	bne.n	8005652 <strncpy+0x6>
 8005662:	2100      	movs	r1, #0
 8005664:	441a      	add	r2, r3
 8005666:	4293      	cmp	r3, r2
 8005668:	d100      	bne.n	800566c <strncpy+0x20>
 800566a:	bd10      	pop	{r4, pc}
 800566c:	f803 1b01 	strb.w	r1, [r3], #1
 8005670:	e7f9      	b.n	8005666 <strncpy+0x1a>
	...

08005674 <strtok>:
 8005674:	4b16      	ldr	r3, [pc, #88]	; (80056d0 <strtok+0x5c>)
 8005676:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800567a:	681f      	ldr	r7, [r3, #0]
 800567c:	4605      	mov	r5, r0
 800567e:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 8005680:	460e      	mov	r6, r1
 8005682:	b9ec      	cbnz	r4, 80056c0 <strtok+0x4c>
 8005684:	2050      	movs	r0, #80	; 0x50
 8005686:	f7ff fca7 	bl	8004fd8 <malloc>
 800568a:	4602      	mov	r2, r0
 800568c:	6478      	str	r0, [r7, #68]	; 0x44
 800568e:	b920      	cbnz	r0, 800569a <strtok+0x26>
 8005690:	215b      	movs	r1, #91	; 0x5b
 8005692:	4b10      	ldr	r3, [pc, #64]	; (80056d4 <strtok+0x60>)
 8005694:	4810      	ldr	r0, [pc, #64]	; (80056d8 <strtok+0x64>)
 8005696:	f000 f8e1 	bl	800585c <__assert_func>
 800569a:	e9c0 4400 	strd	r4, r4, [r0]
 800569e:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80056a2:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80056a6:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 80056aa:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 80056ae:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 80056b2:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 80056b6:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 80056ba:	6184      	str	r4, [r0, #24]
 80056bc:	7704      	strb	r4, [r0, #28]
 80056be:	6244      	str	r4, [r0, #36]	; 0x24
 80056c0:	4631      	mov	r1, r6
 80056c2:	4628      	mov	r0, r5
 80056c4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80056c6:	2301      	movs	r3, #1
 80056c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80056cc:	f000 b806 	b.w	80056dc <__strtok_r>
 80056d0:	20000064 	.word	0x20000064
 80056d4:	0800639f 	.word	0x0800639f
 80056d8:	080063b6 	.word	0x080063b6

080056dc <__strtok_r>:
 80056dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80056de:	b908      	cbnz	r0, 80056e4 <__strtok_r+0x8>
 80056e0:	6810      	ldr	r0, [r2, #0]
 80056e2:	b188      	cbz	r0, 8005708 <__strtok_r+0x2c>
 80056e4:	4604      	mov	r4, r0
 80056e6:	460f      	mov	r7, r1
 80056e8:	4620      	mov	r0, r4
 80056ea:	f814 5b01 	ldrb.w	r5, [r4], #1
 80056ee:	f817 6b01 	ldrb.w	r6, [r7], #1
 80056f2:	b91e      	cbnz	r6, 80056fc <__strtok_r+0x20>
 80056f4:	b965      	cbnz	r5, 8005710 <__strtok_r+0x34>
 80056f6:	4628      	mov	r0, r5
 80056f8:	6015      	str	r5, [r2, #0]
 80056fa:	e005      	b.n	8005708 <__strtok_r+0x2c>
 80056fc:	42b5      	cmp	r5, r6
 80056fe:	d1f6      	bne.n	80056ee <__strtok_r+0x12>
 8005700:	2b00      	cmp	r3, #0
 8005702:	d1f0      	bne.n	80056e6 <__strtok_r+0xa>
 8005704:	6014      	str	r4, [r2, #0]
 8005706:	7003      	strb	r3, [r0, #0]
 8005708:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800570a:	461c      	mov	r4, r3
 800570c:	e00c      	b.n	8005728 <__strtok_r+0x4c>
 800570e:	b915      	cbnz	r5, 8005716 <__strtok_r+0x3a>
 8005710:	460e      	mov	r6, r1
 8005712:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005716:	f816 5b01 	ldrb.w	r5, [r6], #1
 800571a:	42ab      	cmp	r3, r5
 800571c:	d1f7      	bne.n	800570e <__strtok_r+0x32>
 800571e:	2b00      	cmp	r3, #0
 8005720:	d0f3      	beq.n	800570a <__strtok_r+0x2e>
 8005722:	2300      	movs	r3, #0
 8005724:	f804 3c01 	strb.w	r3, [r4, #-1]
 8005728:	6014      	str	r4, [r2, #0]
 800572a:	e7ed      	b.n	8005708 <__strtok_r+0x2c>

0800572c <_close_r>:
 800572c:	b538      	push	{r3, r4, r5, lr}
 800572e:	2300      	movs	r3, #0
 8005730:	4d05      	ldr	r5, [pc, #20]	; (8005748 <_close_r+0x1c>)
 8005732:	4604      	mov	r4, r0
 8005734:	4608      	mov	r0, r1
 8005736:	602b      	str	r3, [r5, #0]
 8005738:	f7fb fcaa 	bl	8001090 <_close>
 800573c:	1c43      	adds	r3, r0, #1
 800573e:	d102      	bne.n	8005746 <_close_r+0x1a>
 8005740:	682b      	ldr	r3, [r5, #0]
 8005742:	b103      	cbz	r3, 8005746 <_close_r+0x1a>
 8005744:	6023      	str	r3, [r4, #0]
 8005746:	bd38      	pop	{r3, r4, r5, pc}
 8005748:	200005ac 	.word	0x200005ac

0800574c <_lseek_r>:
 800574c:	b538      	push	{r3, r4, r5, lr}
 800574e:	4604      	mov	r4, r0
 8005750:	4608      	mov	r0, r1
 8005752:	4611      	mov	r1, r2
 8005754:	2200      	movs	r2, #0
 8005756:	4d05      	ldr	r5, [pc, #20]	; (800576c <_lseek_r+0x20>)
 8005758:	602a      	str	r2, [r5, #0]
 800575a:	461a      	mov	r2, r3
 800575c:	f7fb fcbc 	bl	80010d8 <_lseek>
 8005760:	1c43      	adds	r3, r0, #1
 8005762:	d102      	bne.n	800576a <_lseek_r+0x1e>
 8005764:	682b      	ldr	r3, [r5, #0]
 8005766:	b103      	cbz	r3, 800576a <_lseek_r+0x1e>
 8005768:	6023      	str	r3, [r4, #0]
 800576a:	bd38      	pop	{r3, r4, r5, pc}
 800576c:	200005ac 	.word	0x200005ac

08005770 <_read_r>:
 8005770:	b538      	push	{r3, r4, r5, lr}
 8005772:	4604      	mov	r4, r0
 8005774:	4608      	mov	r0, r1
 8005776:	4611      	mov	r1, r2
 8005778:	2200      	movs	r2, #0
 800577a:	4d05      	ldr	r5, [pc, #20]	; (8005790 <_read_r+0x20>)
 800577c:	602a      	str	r2, [r5, #0]
 800577e:	461a      	mov	r2, r3
 8005780:	f7fb fc69 	bl	8001056 <_read>
 8005784:	1c43      	adds	r3, r0, #1
 8005786:	d102      	bne.n	800578e <_read_r+0x1e>
 8005788:	682b      	ldr	r3, [r5, #0]
 800578a:	b103      	cbz	r3, 800578e <_read_r+0x1e>
 800578c:	6023      	str	r3, [r4, #0]
 800578e:	bd38      	pop	{r3, r4, r5, pc}
 8005790:	200005ac 	.word	0x200005ac

08005794 <_sbrk_r>:
 8005794:	b538      	push	{r3, r4, r5, lr}
 8005796:	2300      	movs	r3, #0
 8005798:	4d05      	ldr	r5, [pc, #20]	; (80057b0 <_sbrk_r+0x1c>)
 800579a:	4604      	mov	r4, r0
 800579c:	4608      	mov	r0, r1
 800579e:	602b      	str	r3, [r5, #0]
 80057a0:	f7fb fca6 	bl	80010f0 <_sbrk>
 80057a4:	1c43      	adds	r3, r0, #1
 80057a6:	d102      	bne.n	80057ae <_sbrk_r+0x1a>
 80057a8:	682b      	ldr	r3, [r5, #0]
 80057aa:	b103      	cbz	r3, 80057ae <_sbrk_r+0x1a>
 80057ac:	6023      	str	r3, [r4, #0]
 80057ae:	bd38      	pop	{r3, r4, r5, pc}
 80057b0:	200005ac 	.word	0x200005ac

080057b4 <_write_r>:
 80057b4:	b538      	push	{r3, r4, r5, lr}
 80057b6:	4604      	mov	r4, r0
 80057b8:	4608      	mov	r0, r1
 80057ba:	4611      	mov	r1, r2
 80057bc:	2200      	movs	r2, #0
 80057be:	4d05      	ldr	r5, [pc, #20]	; (80057d4 <_write_r+0x20>)
 80057c0:	602a      	str	r2, [r5, #0]
 80057c2:	461a      	mov	r2, r3
 80057c4:	f7fb f934 	bl	8000a30 <_write>
 80057c8:	1c43      	adds	r3, r0, #1
 80057ca:	d102      	bne.n	80057d2 <_write_r+0x1e>
 80057cc:	682b      	ldr	r3, [r5, #0]
 80057ce:	b103      	cbz	r3, 80057d2 <_write_r+0x1e>
 80057d0:	6023      	str	r3, [r4, #0]
 80057d2:	bd38      	pop	{r3, r4, r5, pc}
 80057d4:	200005ac 	.word	0x200005ac

080057d8 <__errno>:
 80057d8:	4b01      	ldr	r3, [pc, #4]	; (80057e0 <__errno+0x8>)
 80057da:	6818      	ldr	r0, [r3, #0]
 80057dc:	4770      	bx	lr
 80057de:	bf00      	nop
 80057e0:	20000064 	.word	0x20000064

080057e4 <__libc_init_array>:
 80057e4:	b570      	push	{r4, r5, r6, lr}
 80057e6:	2600      	movs	r6, #0
 80057e8:	4d0c      	ldr	r5, [pc, #48]	; (800581c <__libc_init_array+0x38>)
 80057ea:	4c0d      	ldr	r4, [pc, #52]	; (8005820 <__libc_init_array+0x3c>)
 80057ec:	1b64      	subs	r4, r4, r5
 80057ee:	10a4      	asrs	r4, r4, #2
 80057f0:	42a6      	cmp	r6, r4
 80057f2:	d109      	bne.n	8005808 <__libc_init_array+0x24>
 80057f4:	f000 fd08 	bl	8006208 <_init>
 80057f8:	2600      	movs	r6, #0
 80057fa:	4d0a      	ldr	r5, [pc, #40]	; (8005824 <__libc_init_array+0x40>)
 80057fc:	4c0a      	ldr	r4, [pc, #40]	; (8005828 <__libc_init_array+0x44>)
 80057fe:	1b64      	subs	r4, r4, r5
 8005800:	10a4      	asrs	r4, r4, #2
 8005802:	42a6      	cmp	r6, r4
 8005804:	d105      	bne.n	8005812 <__libc_init_array+0x2e>
 8005806:	bd70      	pop	{r4, r5, r6, pc}
 8005808:	f855 3b04 	ldr.w	r3, [r5], #4
 800580c:	4798      	blx	r3
 800580e:	3601      	adds	r6, #1
 8005810:	e7ee      	b.n	80057f0 <__libc_init_array+0xc>
 8005812:	f855 3b04 	ldr.w	r3, [r5], #4
 8005816:	4798      	blx	r3
 8005818:	3601      	adds	r6, #1
 800581a:	e7f2      	b.n	8005802 <__libc_init_array+0x1e>
 800581c:	08006480 	.word	0x08006480
 8005820:	08006480 	.word	0x08006480
 8005824:	08006480 	.word	0x08006480
 8005828:	08006484 	.word	0x08006484

0800582c <__retarget_lock_acquire_recursive>:
 800582c:	4770      	bx	lr

0800582e <__retarget_lock_release_recursive>:
 800582e:	4770      	bx	lr

08005830 <strcpy>:
 8005830:	4603      	mov	r3, r0
 8005832:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005836:	f803 2b01 	strb.w	r2, [r3], #1
 800583a:	2a00      	cmp	r2, #0
 800583c:	d1f9      	bne.n	8005832 <strcpy+0x2>
 800583e:	4770      	bx	lr

08005840 <memcpy>:
 8005840:	440a      	add	r2, r1
 8005842:	4291      	cmp	r1, r2
 8005844:	f100 33ff 	add.w	r3, r0, #4294967295
 8005848:	d100      	bne.n	800584c <memcpy+0xc>
 800584a:	4770      	bx	lr
 800584c:	b510      	push	{r4, lr}
 800584e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005852:	4291      	cmp	r1, r2
 8005854:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005858:	d1f9      	bne.n	800584e <memcpy+0xe>
 800585a:	bd10      	pop	{r4, pc}

0800585c <__assert_func>:
 800585c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800585e:	4614      	mov	r4, r2
 8005860:	461a      	mov	r2, r3
 8005862:	4b09      	ldr	r3, [pc, #36]	; (8005888 <__assert_func+0x2c>)
 8005864:	4605      	mov	r5, r0
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	68d8      	ldr	r0, [r3, #12]
 800586a:	b14c      	cbz	r4, 8005880 <__assert_func+0x24>
 800586c:	4b07      	ldr	r3, [pc, #28]	; (800588c <__assert_func+0x30>)
 800586e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005872:	9100      	str	r1, [sp, #0]
 8005874:	462b      	mov	r3, r5
 8005876:	4906      	ldr	r1, [pc, #24]	; (8005890 <__assert_func+0x34>)
 8005878:	f000 fbd6 	bl	8006028 <fiprintf>
 800587c:	f000 fc78 	bl	8006170 <abort>
 8005880:	4b04      	ldr	r3, [pc, #16]	; (8005894 <__assert_func+0x38>)
 8005882:	461c      	mov	r4, r3
 8005884:	e7f3      	b.n	800586e <__assert_func+0x12>
 8005886:	bf00      	nop
 8005888:	20000064 	.word	0x20000064
 800588c:	08006410 	.word	0x08006410
 8005890:	0800641d 	.word	0x0800641d
 8005894:	0800644b 	.word	0x0800644b

08005898 <_free_r>:
 8005898:	b538      	push	{r3, r4, r5, lr}
 800589a:	4605      	mov	r5, r0
 800589c:	2900      	cmp	r1, #0
 800589e:	d040      	beq.n	8005922 <_free_r+0x8a>
 80058a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80058a4:	1f0c      	subs	r4, r1, #4
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	bfb8      	it	lt
 80058aa:	18e4      	addlt	r4, r4, r3
 80058ac:	f7ff fc3c 	bl	8005128 <__malloc_lock>
 80058b0:	4a1c      	ldr	r2, [pc, #112]	; (8005924 <_free_r+0x8c>)
 80058b2:	6813      	ldr	r3, [r2, #0]
 80058b4:	b933      	cbnz	r3, 80058c4 <_free_r+0x2c>
 80058b6:	6063      	str	r3, [r4, #4]
 80058b8:	6014      	str	r4, [r2, #0]
 80058ba:	4628      	mov	r0, r5
 80058bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80058c0:	f7ff bc38 	b.w	8005134 <__malloc_unlock>
 80058c4:	42a3      	cmp	r3, r4
 80058c6:	d908      	bls.n	80058da <_free_r+0x42>
 80058c8:	6820      	ldr	r0, [r4, #0]
 80058ca:	1821      	adds	r1, r4, r0
 80058cc:	428b      	cmp	r3, r1
 80058ce:	bf01      	itttt	eq
 80058d0:	6819      	ldreq	r1, [r3, #0]
 80058d2:	685b      	ldreq	r3, [r3, #4]
 80058d4:	1809      	addeq	r1, r1, r0
 80058d6:	6021      	streq	r1, [r4, #0]
 80058d8:	e7ed      	b.n	80058b6 <_free_r+0x1e>
 80058da:	461a      	mov	r2, r3
 80058dc:	685b      	ldr	r3, [r3, #4]
 80058de:	b10b      	cbz	r3, 80058e4 <_free_r+0x4c>
 80058e0:	42a3      	cmp	r3, r4
 80058e2:	d9fa      	bls.n	80058da <_free_r+0x42>
 80058e4:	6811      	ldr	r1, [r2, #0]
 80058e6:	1850      	adds	r0, r2, r1
 80058e8:	42a0      	cmp	r0, r4
 80058ea:	d10b      	bne.n	8005904 <_free_r+0x6c>
 80058ec:	6820      	ldr	r0, [r4, #0]
 80058ee:	4401      	add	r1, r0
 80058f0:	1850      	adds	r0, r2, r1
 80058f2:	4283      	cmp	r3, r0
 80058f4:	6011      	str	r1, [r2, #0]
 80058f6:	d1e0      	bne.n	80058ba <_free_r+0x22>
 80058f8:	6818      	ldr	r0, [r3, #0]
 80058fa:	685b      	ldr	r3, [r3, #4]
 80058fc:	4408      	add	r0, r1
 80058fe:	6010      	str	r0, [r2, #0]
 8005900:	6053      	str	r3, [r2, #4]
 8005902:	e7da      	b.n	80058ba <_free_r+0x22>
 8005904:	d902      	bls.n	800590c <_free_r+0x74>
 8005906:	230c      	movs	r3, #12
 8005908:	602b      	str	r3, [r5, #0]
 800590a:	e7d6      	b.n	80058ba <_free_r+0x22>
 800590c:	6820      	ldr	r0, [r4, #0]
 800590e:	1821      	adds	r1, r4, r0
 8005910:	428b      	cmp	r3, r1
 8005912:	bf01      	itttt	eq
 8005914:	6819      	ldreq	r1, [r3, #0]
 8005916:	685b      	ldreq	r3, [r3, #4]
 8005918:	1809      	addeq	r1, r1, r0
 800591a:	6021      	streq	r1, [r4, #0]
 800591c:	6063      	str	r3, [r4, #4]
 800591e:	6054      	str	r4, [r2, #4]
 8005920:	e7cb      	b.n	80058ba <_free_r+0x22>
 8005922:	bd38      	pop	{r3, r4, r5, pc}
 8005924:	20000468 	.word	0x20000468

08005928 <__sfputc_r>:
 8005928:	6893      	ldr	r3, [r2, #8]
 800592a:	b410      	push	{r4}
 800592c:	3b01      	subs	r3, #1
 800592e:	2b00      	cmp	r3, #0
 8005930:	6093      	str	r3, [r2, #8]
 8005932:	da07      	bge.n	8005944 <__sfputc_r+0x1c>
 8005934:	6994      	ldr	r4, [r2, #24]
 8005936:	42a3      	cmp	r3, r4
 8005938:	db01      	blt.n	800593e <__sfputc_r+0x16>
 800593a:	290a      	cmp	r1, #10
 800593c:	d102      	bne.n	8005944 <__sfputc_r+0x1c>
 800593e:	bc10      	pop	{r4}
 8005940:	f7ff bde7 	b.w	8005512 <__swbuf_r>
 8005944:	6813      	ldr	r3, [r2, #0]
 8005946:	1c58      	adds	r0, r3, #1
 8005948:	6010      	str	r0, [r2, #0]
 800594a:	7019      	strb	r1, [r3, #0]
 800594c:	4608      	mov	r0, r1
 800594e:	bc10      	pop	{r4}
 8005950:	4770      	bx	lr

08005952 <__sfputs_r>:
 8005952:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005954:	4606      	mov	r6, r0
 8005956:	460f      	mov	r7, r1
 8005958:	4614      	mov	r4, r2
 800595a:	18d5      	adds	r5, r2, r3
 800595c:	42ac      	cmp	r4, r5
 800595e:	d101      	bne.n	8005964 <__sfputs_r+0x12>
 8005960:	2000      	movs	r0, #0
 8005962:	e007      	b.n	8005974 <__sfputs_r+0x22>
 8005964:	463a      	mov	r2, r7
 8005966:	4630      	mov	r0, r6
 8005968:	f814 1b01 	ldrb.w	r1, [r4], #1
 800596c:	f7ff ffdc 	bl	8005928 <__sfputc_r>
 8005970:	1c43      	adds	r3, r0, #1
 8005972:	d1f3      	bne.n	800595c <__sfputs_r+0xa>
 8005974:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005978 <_vfiprintf_r>:
 8005978:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800597c:	460d      	mov	r5, r1
 800597e:	4614      	mov	r4, r2
 8005980:	4698      	mov	r8, r3
 8005982:	4606      	mov	r6, r0
 8005984:	b09d      	sub	sp, #116	; 0x74
 8005986:	b118      	cbz	r0, 8005990 <_vfiprintf_r+0x18>
 8005988:	6a03      	ldr	r3, [r0, #32]
 800598a:	b90b      	cbnz	r3, 8005990 <_vfiprintf_r+0x18>
 800598c:	f7ff fcda 	bl	8005344 <__sinit>
 8005990:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005992:	07d9      	lsls	r1, r3, #31
 8005994:	d405      	bmi.n	80059a2 <_vfiprintf_r+0x2a>
 8005996:	89ab      	ldrh	r3, [r5, #12]
 8005998:	059a      	lsls	r2, r3, #22
 800599a:	d402      	bmi.n	80059a2 <_vfiprintf_r+0x2a>
 800599c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800599e:	f7ff ff45 	bl	800582c <__retarget_lock_acquire_recursive>
 80059a2:	89ab      	ldrh	r3, [r5, #12]
 80059a4:	071b      	lsls	r3, r3, #28
 80059a6:	d501      	bpl.n	80059ac <_vfiprintf_r+0x34>
 80059a8:	692b      	ldr	r3, [r5, #16]
 80059aa:	b99b      	cbnz	r3, 80059d4 <_vfiprintf_r+0x5c>
 80059ac:	4629      	mov	r1, r5
 80059ae:	4630      	mov	r0, r6
 80059b0:	f7ff fdec 	bl	800558c <__swsetup_r>
 80059b4:	b170      	cbz	r0, 80059d4 <_vfiprintf_r+0x5c>
 80059b6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80059b8:	07dc      	lsls	r4, r3, #31
 80059ba:	d504      	bpl.n	80059c6 <_vfiprintf_r+0x4e>
 80059bc:	f04f 30ff 	mov.w	r0, #4294967295
 80059c0:	b01d      	add	sp, #116	; 0x74
 80059c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059c6:	89ab      	ldrh	r3, [r5, #12]
 80059c8:	0598      	lsls	r0, r3, #22
 80059ca:	d4f7      	bmi.n	80059bc <_vfiprintf_r+0x44>
 80059cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80059ce:	f7ff ff2e 	bl	800582e <__retarget_lock_release_recursive>
 80059d2:	e7f3      	b.n	80059bc <_vfiprintf_r+0x44>
 80059d4:	2300      	movs	r3, #0
 80059d6:	9309      	str	r3, [sp, #36]	; 0x24
 80059d8:	2320      	movs	r3, #32
 80059da:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80059de:	2330      	movs	r3, #48	; 0x30
 80059e0:	f04f 0901 	mov.w	r9, #1
 80059e4:	f8cd 800c 	str.w	r8, [sp, #12]
 80059e8:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8005b98 <_vfiprintf_r+0x220>
 80059ec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80059f0:	4623      	mov	r3, r4
 80059f2:	469a      	mov	sl, r3
 80059f4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80059f8:	b10a      	cbz	r2, 80059fe <_vfiprintf_r+0x86>
 80059fa:	2a25      	cmp	r2, #37	; 0x25
 80059fc:	d1f9      	bne.n	80059f2 <_vfiprintf_r+0x7a>
 80059fe:	ebba 0b04 	subs.w	fp, sl, r4
 8005a02:	d00b      	beq.n	8005a1c <_vfiprintf_r+0xa4>
 8005a04:	465b      	mov	r3, fp
 8005a06:	4622      	mov	r2, r4
 8005a08:	4629      	mov	r1, r5
 8005a0a:	4630      	mov	r0, r6
 8005a0c:	f7ff ffa1 	bl	8005952 <__sfputs_r>
 8005a10:	3001      	adds	r0, #1
 8005a12:	f000 80a9 	beq.w	8005b68 <_vfiprintf_r+0x1f0>
 8005a16:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005a18:	445a      	add	r2, fp
 8005a1a:	9209      	str	r2, [sp, #36]	; 0x24
 8005a1c:	f89a 3000 	ldrb.w	r3, [sl]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	f000 80a1 	beq.w	8005b68 <_vfiprintf_r+0x1f0>
 8005a26:	2300      	movs	r3, #0
 8005a28:	f04f 32ff 	mov.w	r2, #4294967295
 8005a2c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005a30:	f10a 0a01 	add.w	sl, sl, #1
 8005a34:	9304      	str	r3, [sp, #16]
 8005a36:	9307      	str	r3, [sp, #28]
 8005a38:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005a3c:	931a      	str	r3, [sp, #104]	; 0x68
 8005a3e:	4654      	mov	r4, sl
 8005a40:	2205      	movs	r2, #5
 8005a42:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a46:	4854      	ldr	r0, [pc, #336]	; (8005b98 <_vfiprintf_r+0x220>)
 8005a48:	f000 fb84 	bl	8006154 <memchr>
 8005a4c:	9a04      	ldr	r2, [sp, #16]
 8005a4e:	b9d8      	cbnz	r0, 8005a88 <_vfiprintf_r+0x110>
 8005a50:	06d1      	lsls	r1, r2, #27
 8005a52:	bf44      	itt	mi
 8005a54:	2320      	movmi	r3, #32
 8005a56:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005a5a:	0713      	lsls	r3, r2, #28
 8005a5c:	bf44      	itt	mi
 8005a5e:	232b      	movmi	r3, #43	; 0x2b
 8005a60:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005a64:	f89a 3000 	ldrb.w	r3, [sl]
 8005a68:	2b2a      	cmp	r3, #42	; 0x2a
 8005a6a:	d015      	beq.n	8005a98 <_vfiprintf_r+0x120>
 8005a6c:	4654      	mov	r4, sl
 8005a6e:	2000      	movs	r0, #0
 8005a70:	f04f 0c0a 	mov.w	ip, #10
 8005a74:	9a07      	ldr	r2, [sp, #28]
 8005a76:	4621      	mov	r1, r4
 8005a78:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005a7c:	3b30      	subs	r3, #48	; 0x30
 8005a7e:	2b09      	cmp	r3, #9
 8005a80:	d94d      	bls.n	8005b1e <_vfiprintf_r+0x1a6>
 8005a82:	b1b0      	cbz	r0, 8005ab2 <_vfiprintf_r+0x13a>
 8005a84:	9207      	str	r2, [sp, #28]
 8005a86:	e014      	b.n	8005ab2 <_vfiprintf_r+0x13a>
 8005a88:	eba0 0308 	sub.w	r3, r0, r8
 8005a8c:	fa09 f303 	lsl.w	r3, r9, r3
 8005a90:	4313      	orrs	r3, r2
 8005a92:	46a2      	mov	sl, r4
 8005a94:	9304      	str	r3, [sp, #16]
 8005a96:	e7d2      	b.n	8005a3e <_vfiprintf_r+0xc6>
 8005a98:	9b03      	ldr	r3, [sp, #12]
 8005a9a:	1d19      	adds	r1, r3, #4
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	9103      	str	r1, [sp, #12]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	bfbb      	ittet	lt
 8005aa4:	425b      	neglt	r3, r3
 8005aa6:	f042 0202 	orrlt.w	r2, r2, #2
 8005aaa:	9307      	strge	r3, [sp, #28]
 8005aac:	9307      	strlt	r3, [sp, #28]
 8005aae:	bfb8      	it	lt
 8005ab0:	9204      	strlt	r2, [sp, #16]
 8005ab2:	7823      	ldrb	r3, [r4, #0]
 8005ab4:	2b2e      	cmp	r3, #46	; 0x2e
 8005ab6:	d10c      	bne.n	8005ad2 <_vfiprintf_r+0x15a>
 8005ab8:	7863      	ldrb	r3, [r4, #1]
 8005aba:	2b2a      	cmp	r3, #42	; 0x2a
 8005abc:	d134      	bne.n	8005b28 <_vfiprintf_r+0x1b0>
 8005abe:	9b03      	ldr	r3, [sp, #12]
 8005ac0:	3402      	adds	r4, #2
 8005ac2:	1d1a      	adds	r2, r3, #4
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	9203      	str	r2, [sp, #12]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	bfb8      	it	lt
 8005acc:	f04f 33ff 	movlt.w	r3, #4294967295
 8005ad0:	9305      	str	r3, [sp, #20]
 8005ad2:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005b9c <_vfiprintf_r+0x224>
 8005ad6:	2203      	movs	r2, #3
 8005ad8:	4650      	mov	r0, sl
 8005ada:	7821      	ldrb	r1, [r4, #0]
 8005adc:	f000 fb3a 	bl	8006154 <memchr>
 8005ae0:	b138      	cbz	r0, 8005af2 <_vfiprintf_r+0x17a>
 8005ae2:	2240      	movs	r2, #64	; 0x40
 8005ae4:	9b04      	ldr	r3, [sp, #16]
 8005ae6:	eba0 000a 	sub.w	r0, r0, sl
 8005aea:	4082      	lsls	r2, r0
 8005aec:	4313      	orrs	r3, r2
 8005aee:	3401      	adds	r4, #1
 8005af0:	9304      	str	r3, [sp, #16]
 8005af2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005af6:	2206      	movs	r2, #6
 8005af8:	4829      	ldr	r0, [pc, #164]	; (8005ba0 <_vfiprintf_r+0x228>)
 8005afa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005afe:	f000 fb29 	bl	8006154 <memchr>
 8005b02:	2800      	cmp	r0, #0
 8005b04:	d03f      	beq.n	8005b86 <_vfiprintf_r+0x20e>
 8005b06:	4b27      	ldr	r3, [pc, #156]	; (8005ba4 <_vfiprintf_r+0x22c>)
 8005b08:	bb1b      	cbnz	r3, 8005b52 <_vfiprintf_r+0x1da>
 8005b0a:	9b03      	ldr	r3, [sp, #12]
 8005b0c:	3307      	adds	r3, #7
 8005b0e:	f023 0307 	bic.w	r3, r3, #7
 8005b12:	3308      	adds	r3, #8
 8005b14:	9303      	str	r3, [sp, #12]
 8005b16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b18:	443b      	add	r3, r7
 8005b1a:	9309      	str	r3, [sp, #36]	; 0x24
 8005b1c:	e768      	b.n	80059f0 <_vfiprintf_r+0x78>
 8005b1e:	460c      	mov	r4, r1
 8005b20:	2001      	movs	r0, #1
 8005b22:	fb0c 3202 	mla	r2, ip, r2, r3
 8005b26:	e7a6      	b.n	8005a76 <_vfiprintf_r+0xfe>
 8005b28:	2300      	movs	r3, #0
 8005b2a:	f04f 0c0a 	mov.w	ip, #10
 8005b2e:	4619      	mov	r1, r3
 8005b30:	3401      	adds	r4, #1
 8005b32:	9305      	str	r3, [sp, #20]
 8005b34:	4620      	mov	r0, r4
 8005b36:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005b3a:	3a30      	subs	r2, #48	; 0x30
 8005b3c:	2a09      	cmp	r2, #9
 8005b3e:	d903      	bls.n	8005b48 <_vfiprintf_r+0x1d0>
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d0c6      	beq.n	8005ad2 <_vfiprintf_r+0x15a>
 8005b44:	9105      	str	r1, [sp, #20]
 8005b46:	e7c4      	b.n	8005ad2 <_vfiprintf_r+0x15a>
 8005b48:	4604      	mov	r4, r0
 8005b4a:	2301      	movs	r3, #1
 8005b4c:	fb0c 2101 	mla	r1, ip, r1, r2
 8005b50:	e7f0      	b.n	8005b34 <_vfiprintf_r+0x1bc>
 8005b52:	ab03      	add	r3, sp, #12
 8005b54:	9300      	str	r3, [sp, #0]
 8005b56:	462a      	mov	r2, r5
 8005b58:	4630      	mov	r0, r6
 8005b5a:	4b13      	ldr	r3, [pc, #76]	; (8005ba8 <_vfiprintf_r+0x230>)
 8005b5c:	a904      	add	r1, sp, #16
 8005b5e:	f3af 8000 	nop.w
 8005b62:	4607      	mov	r7, r0
 8005b64:	1c78      	adds	r0, r7, #1
 8005b66:	d1d6      	bne.n	8005b16 <_vfiprintf_r+0x19e>
 8005b68:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005b6a:	07d9      	lsls	r1, r3, #31
 8005b6c:	d405      	bmi.n	8005b7a <_vfiprintf_r+0x202>
 8005b6e:	89ab      	ldrh	r3, [r5, #12]
 8005b70:	059a      	lsls	r2, r3, #22
 8005b72:	d402      	bmi.n	8005b7a <_vfiprintf_r+0x202>
 8005b74:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005b76:	f7ff fe5a 	bl	800582e <__retarget_lock_release_recursive>
 8005b7a:	89ab      	ldrh	r3, [r5, #12]
 8005b7c:	065b      	lsls	r3, r3, #25
 8005b7e:	f53f af1d 	bmi.w	80059bc <_vfiprintf_r+0x44>
 8005b82:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005b84:	e71c      	b.n	80059c0 <_vfiprintf_r+0x48>
 8005b86:	ab03      	add	r3, sp, #12
 8005b88:	9300      	str	r3, [sp, #0]
 8005b8a:	462a      	mov	r2, r5
 8005b8c:	4630      	mov	r0, r6
 8005b8e:	4b06      	ldr	r3, [pc, #24]	; (8005ba8 <_vfiprintf_r+0x230>)
 8005b90:	a904      	add	r1, sp, #16
 8005b92:	f000 f87d 	bl	8005c90 <_printf_i>
 8005b96:	e7e4      	b.n	8005b62 <_vfiprintf_r+0x1ea>
 8005b98:	0800644c 	.word	0x0800644c
 8005b9c:	08006452 	.word	0x08006452
 8005ba0:	08006456 	.word	0x08006456
 8005ba4:	00000000 	.word	0x00000000
 8005ba8:	08005953 	.word	0x08005953

08005bac <_printf_common>:
 8005bac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005bb0:	4616      	mov	r6, r2
 8005bb2:	4699      	mov	r9, r3
 8005bb4:	688a      	ldr	r2, [r1, #8]
 8005bb6:	690b      	ldr	r3, [r1, #16]
 8005bb8:	4607      	mov	r7, r0
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	bfb8      	it	lt
 8005bbe:	4613      	movlt	r3, r2
 8005bc0:	6033      	str	r3, [r6, #0]
 8005bc2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005bc6:	460c      	mov	r4, r1
 8005bc8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005bcc:	b10a      	cbz	r2, 8005bd2 <_printf_common+0x26>
 8005bce:	3301      	adds	r3, #1
 8005bd0:	6033      	str	r3, [r6, #0]
 8005bd2:	6823      	ldr	r3, [r4, #0]
 8005bd4:	0699      	lsls	r1, r3, #26
 8005bd6:	bf42      	ittt	mi
 8005bd8:	6833      	ldrmi	r3, [r6, #0]
 8005bda:	3302      	addmi	r3, #2
 8005bdc:	6033      	strmi	r3, [r6, #0]
 8005bde:	6825      	ldr	r5, [r4, #0]
 8005be0:	f015 0506 	ands.w	r5, r5, #6
 8005be4:	d106      	bne.n	8005bf4 <_printf_common+0x48>
 8005be6:	f104 0a19 	add.w	sl, r4, #25
 8005bea:	68e3      	ldr	r3, [r4, #12]
 8005bec:	6832      	ldr	r2, [r6, #0]
 8005bee:	1a9b      	subs	r3, r3, r2
 8005bf0:	42ab      	cmp	r3, r5
 8005bf2:	dc2b      	bgt.n	8005c4c <_printf_common+0xa0>
 8005bf4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005bf8:	1e13      	subs	r3, r2, #0
 8005bfa:	6822      	ldr	r2, [r4, #0]
 8005bfc:	bf18      	it	ne
 8005bfe:	2301      	movne	r3, #1
 8005c00:	0692      	lsls	r2, r2, #26
 8005c02:	d430      	bmi.n	8005c66 <_printf_common+0xba>
 8005c04:	4649      	mov	r1, r9
 8005c06:	4638      	mov	r0, r7
 8005c08:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005c0c:	47c0      	blx	r8
 8005c0e:	3001      	adds	r0, #1
 8005c10:	d023      	beq.n	8005c5a <_printf_common+0xae>
 8005c12:	6823      	ldr	r3, [r4, #0]
 8005c14:	6922      	ldr	r2, [r4, #16]
 8005c16:	f003 0306 	and.w	r3, r3, #6
 8005c1a:	2b04      	cmp	r3, #4
 8005c1c:	bf14      	ite	ne
 8005c1e:	2500      	movne	r5, #0
 8005c20:	6833      	ldreq	r3, [r6, #0]
 8005c22:	f04f 0600 	mov.w	r6, #0
 8005c26:	bf08      	it	eq
 8005c28:	68e5      	ldreq	r5, [r4, #12]
 8005c2a:	f104 041a 	add.w	r4, r4, #26
 8005c2e:	bf08      	it	eq
 8005c30:	1aed      	subeq	r5, r5, r3
 8005c32:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8005c36:	bf08      	it	eq
 8005c38:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005c3c:	4293      	cmp	r3, r2
 8005c3e:	bfc4      	itt	gt
 8005c40:	1a9b      	subgt	r3, r3, r2
 8005c42:	18ed      	addgt	r5, r5, r3
 8005c44:	42b5      	cmp	r5, r6
 8005c46:	d11a      	bne.n	8005c7e <_printf_common+0xd2>
 8005c48:	2000      	movs	r0, #0
 8005c4a:	e008      	b.n	8005c5e <_printf_common+0xb2>
 8005c4c:	2301      	movs	r3, #1
 8005c4e:	4652      	mov	r2, sl
 8005c50:	4649      	mov	r1, r9
 8005c52:	4638      	mov	r0, r7
 8005c54:	47c0      	blx	r8
 8005c56:	3001      	adds	r0, #1
 8005c58:	d103      	bne.n	8005c62 <_printf_common+0xb6>
 8005c5a:	f04f 30ff 	mov.w	r0, #4294967295
 8005c5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c62:	3501      	adds	r5, #1
 8005c64:	e7c1      	b.n	8005bea <_printf_common+0x3e>
 8005c66:	2030      	movs	r0, #48	; 0x30
 8005c68:	18e1      	adds	r1, r4, r3
 8005c6a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005c6e:	1c5a      	adds	r2, r3, #1
 8005c70:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005c74:	4422      	add	r2, r4
 8005c76:	3302      	adds	r3, #2
 8005c78:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005c7c:	e7c2      	b.n	8005c04 <_printf_common+0x58>
 8005c7e:	2301      	movs	r3, #1
 8005c80:	4622      	mov	r2, r4
 8005c82:	4649      	mov	r1, r9
 8005c84:	4638      	mov	r0, r7
 8005c86:	47c0      	blx	r8
 8005c88:	3001      	adds	r0, #1
 8005c8a:	d0e6      	beq.n	8005c5a <_printf_common+0xae>
 8005c8c:	3601      	adds	r6, #1
 8005c8e:	e7d9      	b.n	8005c44 <_printf_common+0x98>

08005c90 <_printf_i>:
 8005c90:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005c94:	7e0f      	ldrb	r7, [r1, #24]
 8005c96:	4691      	mov	r9, r2
 8005c98:	2f78      	cmp	r7, #120	; 0x78
 8005c9a:	4680      	mov	r8, r0
 8005c9c:	460c      	mov	r4, r1
 8005c9e:	469a      	mov	sl, r3
 8005ca0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005ca2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005ca6:	d807      	bhi.n	8005cb8 <_printf_i+0x28>
 8005ca8:	2f62      	cmp	r7, #98	; 0x62
 8005caa:	d80a      	bhi.n	8005cc2 <_printf_i+0x32>
 8005cac:	2f00      	cmp	r7, #0
 8005cae:	f000 80d5 	beq.w	8005e5c <_printf_i+0x1cc>
 8005cb2:	2f58      	cmp	r7, #88	; 0x58
 8005cb4:	f000 80c1 	beq.w	8005e3a <_printf_i+0x1aa>
 8005cb8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005cbc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005cc0:	e03a      	b.n	8005d38 <_printf_i+0xa8>
 8005cc2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005cc6:	2b15      	cmp	r3, #21
 8005cc8:	d8f6      	bhi.n	8005cb8 <_printf_i+0x28>
 8005cca:	a101      	add	r1, pc, #4	; (adr r1, 8005cd0 <_printf_i+0x40>)
 8005ccc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005cd0:	08005d29 	.word	0x08005d29
 8005cd4:	08005d3d 	.word	0x08005d3d
 8005cd8:	08005cb9 	.word	0x08005cb9
 8005cdc:	08005cb9 	.word	0x08005cb9
 8005ce0:	08005cb9 	.word	0x08005cb9
 8005ce4:	08005cb9 	.word	0x08005cb9
 8005ce8:	08005d3d 	.word	0x08005d3d
 8005cec:	08005cb9 	.word	0x08005cb9
 8005cf0:	08005cb9 	.word	0x08005cb9
 8005cf4:	08005cb9 	.word	0x08005cb9
 8005cf8:	08005cb9 	.word	0x08005cb9
 8005cfc:	08005e43 	.word	0x08005e43
 8005d00:	08005d69 	.word	0x08005d69
 8005d04:	08005dfd 	.word	0x08005dfd
 8005d08:	08005cb9 	.word	0x08005cb9
 8005d0c:	08005cb9 	.word	0x08005cb9
 8005d10:	08005e65 	.word	0x08005e65
 8005d14:	08005cb9 	.word	0x08005cb9
 8005d18:	08005d69 	.word	0x08005d69
 8005d1c:	08005cb9 	.word	0x08005cb9
 8005d20:	08005cb9 	.word	0x08005cb9
 8005d24:	08005e05 	.word	0x08005e05
 8005d28:	682b      	ldr	r3, [r5, #0]
 8005d2a:	1d1a      	adds	r2, r3, #4
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	602a      	str	r2, [r5, #0]
 8005d30:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005d34:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005d38:	2301      	movs	r3, #1
 8005d3a:	e0a0      	b.n	8005e7e <_printf_i+0x1ee>
 8005d3c:	6820      	ldr	r0, [r4, #0]
 8005d3e:	682b      	ldr	r3, [r5, #0]
 8005d40:	0607      	lsls	r7, r0, #24
 8005d42:	f103 0104 	add.w	r1, r3, #4
 8005d46:	6029      	str	r1, [r5, #0]
 8005d48:	d501      	bpl.n	8005d4e <_printf_i+0xbe>
 8005d4a:	681e      	ldr	r6, [r3, #0]
 8005d4c:	e003      	b.n	8005d56 <_printf_i+0xc6>
 8005d4e:	0646      	lsls	r6, r0, #25
 8005d50:	d5fb      	bpl.n	8005d4a <_printf_i+0xba>
 8005d52:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005d56:	2e00      	cmp	r6, #0
 8005d58:	da03      	bge.n	8005d62 <_printf_i+0xd2>
 8005d5a:	232d      	movs	r3, #45	; 0x2d
 8005d5c:	4276      	negs	r6, r6
 8005d5e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d62:	230a      	movs	r3, #10
 8005d64:	4859      	ldr	r0, [pc, #356]	; (8005ecc <_printf_i+0x23c>)
 8005d66:	e012      	b.n	8005d8e <_printf_i+0xfe>
 8005d68:	682b      	ldr	r3, [r5, #0]
 8005d6a:	6820      	ldr	r0, [r4, #0]
 8005d6c:	1d19      	adds	r1, r3, #4
 8005d6e:	6029      	str	r1, [r5, #0]
 8005d70:	0605      	lsls	r5, r0, #24
 8005d72:	d501      	bpl.n	8005d78 <_printf_i+0xe8>
 8005d74:	681e      	ldr	r6, [r3, #0]
 8005d76:	e002      	b.n	8005d7e <_printf_i+0xee>
 8005d78:	0641      	lsls	r1, r0, #25
 8005d7a:	d5fb      	bpl.n	8005d74 <_printf_i+0xe4>
 8005d7c:	881e      	ldrh	r6, [r3, #0]
 8005d7e:	2f6f      	cmp	r7, #111	; 0x6f
 8005d80:	bf0c      	ite	eq
 8005d82:	2308      	moveq	r3, #8
 8005d84:	230a      	movne	r3, #10
 8005d86:	4851      	ldr	r0, [pc, #324]	; (8005ecc <_printf_i+0x23c>)
 8005d88:	2100      	movs	r1, #0
 8005d8a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005d8e:	6865      	ldr	r5, [r4, #4]
 8005d90:	2d00      	cmp	r5, #0
 8005d92:	bfa8      	it	ge
 8005d94:	6821      	ldrge	r1, [r4, #0]
 8005d96:	60a5      	str	r5, [r4, #8]
 8005d98:	bfa4      	itt	ge
 8005d9a:	f021 0104 	bicge.w	r1, r1, #4
 8005d9e:	6021      	strge	r1, [r4, #0]
 8005da0:	b90e      	cbnz	r6, 8005da6 <_printf_i+0x116>
 8005da2:	2d00      	cmp	r5, #0
 8005da4:	d04b      	beq.n	8005e3e <_printf_i+0x1ae>
 8005da6:	4615      	mov	r5, r2
 8005da8:	fbb6 f1f3 	udiv	r1, r6, r3
 8005dac:	fb03 6711 	mls	r7, r3, r1, r6
 8005db0:	5dc7      	ldrb	r7, [r0, r7]
 8005db2:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005db6:	4637      	mov	r7, r6
 8005db8:	42bb      	cmp	r3, r7
 8005dba:	460e      	mov	r6, r1
 8005dbc:	d9f4      	bls.n	8005da8 <_printf_i+0x118>
 8005dbe:	2b08      	cmp	r3, #8
 8005dc0:	d10b      	bne.n	8005dda <_printf_i+0x14a>
 8005dc2:	6823      	ldr	r3, [r4, #0]
 8005dc4:	07de      	lsls	r6, r3, #31
 8005dc6:	d508      	bpl.n	8005dda <_printf_i+0x14a>
 8005dc8:	6923      	ldr	r3, [r4, #16]
 8005dca:	6861      	ldr	r1, [r4, #4]
 8005dcc:	4299      	cmp	r1, r3
 8005dce:	bfde      	ittt	le
 8005dd0:	2330      	movle	r3, #48	; 0x30
 8005dd2:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005dd6:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005dda:	1b52      	subs	r2, r2, r5
 8005ddc:	6122      	str	r2, [r4, #16]
 8005dde:	464b      	mov	r3, r9
 8005de0:	4621      	mov	r1, r4
 8005de2:	4640      	mov	r0, r8
 8005de4:	f8cd a000 	str.w	sl, [sp]
 8005de8:	aa03      	add	r2, sp, #12
 8005dea:	f7ff fedf 	bl	8005bac <_printf_common>
 8005dee:	3001      	adds	r0, #1
 8005df0:	d14a      	bne.n	8005e88 <_printf_i+0x1f8>
 8005df2:	f04f 30ff 	mov.w	r0, #4294967295
 8005df6:	b004      	add	sp, #16
 8005df8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005dfc:	6823      	ldr	r3, [r4, #0]
 8005dfe:	f043 0320 	orr.w	r3, r3, #32
 8005e02:	6023      	str	r3, [r4, #0]
 8005e04:	2778      	movs	r7, #120	; 0x78
 8005e06:	4832      	ldr	r0, [pc, #200]	; (8005ed0 <_printf_i+0x240>)
 8005e08:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005e0c:	6823      	ldr	r3, [r4, #0]
 8005e0e:	6829      	ldr	r1, [r5, #0]
 8005e10:	061f      	lsls	r7, r3, #24
 8005e12:	f851 6b04 	ldr.w	r6, [r1], #4
 8005e16:	d402      	bmi.n	8005e1e <_printf_i+0x18e>
 8005e18:	065f      	lsls	r7, r3, #25
 8005e1a:	bf48      	it	mi
 8005e1c:	b2b6      	uxthmi	r6, r6
 8005e1e:	07df      	lsls	r7, r3, #31
 8005e20:	bf48      	it	mi
 8005e22:	f043 0320 	orrmi.w	r3, r3, #32
 8005e26:	6029      	str	r1, [r5, #0]
 8005e28:	bf48      	it	mi
 8005e2a:	6023      	strmi	r3, [r4, #0]
 8005e2c:	b91e      	cbnz	r6, 8005e36 <_printf_i+0x1a6>
 8005e2e:	6823      	ldr	r3, [r4, #0]
 8005e30:	f023 0320 	bic.w	r3, r3, #32
 8005e34:	6023      	str	r3, [r4, #0]
 8005e36:	2310      	movs	r3, #16
 8005e38:	e7a6      	b.n	8005d88 <_printf_i+0xf8>
 8005e3a:	4824      	ldr	r0, [pc, #144]	; (8005ecc <_printf_i+0x23c>)
 8005e3c:	e7e4      	b.n	8005e08 <_printf_i+0x178>
 8005e3e:	4615      	mov	r5, r2
 8005e40:	e7bd      	b.n	8005dbe <_printf_i+0x12e>
 8005e42:	682b      	ldr	r3, [r5, #0]
 8005e44:	6826      	ldr	r6, [r4, #0]
 8005e46:	1d18      	adds	r0, r3, #4
 8005e48:	6961      	ldr	r1, [r4, #20]
 8005e4a:	6028      	str	r0, [r5, #0]
 8005e4c:	0635      	lsls	r5, r6, #24
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	d501      	bpl.n	8005e56 <_printf_i+0x1c6>
 8005e52:	6019      	str	r1, [r3, #0]
 8005e54:	e002      	b.n	8005e5c <_printf_i+0x1cc>
 8005e56:	0670      	lsls	r0, r6, #25
 8005e58:	d5fb      	bpl.n	8005e52 <_printf_i+0x1c2>
 8005e5a:	8019      	strh	r1, [r3, #0]
 8005e5c:	2300      	movs	r3, #0
 8005e5e:	4615      	mov	r5, r2
 8005e60:	6123      	str	r3, [r4, #16]
 8005e62:	e7bc      	b.n	8005dde <_printf_i+0x14e>
 8005e64:	682b      	ldr	r3, [r5, #0]
 8005e66:	2100      	movs	r1, #0
 8005e68:	1d1a      	adds	r2, r3, #4
 8005e6a:	602a      	str	r2, [r5, #0]
 8005e6c:	681d      	ldr	r5, [r3, #0]
 8005e6e:	6862      	ldr	r2, [r4, #4]
 8005e70:	4628      	mov	r0, r5
 8005e72:	f000 f96f 	bl	8006154 <memchr>
 8005e76:	b108      	cbz	r0, 8005e7c <_printf_i+0x1ec>
 8005e78:	1b40      	subs	r0, r0, r5
 8005e7a:	6060      	str	r0, [r4, #4]
 8005e7c:	6863      	ldr	r3, [r4, #4]
 8005e7e:	6123      	str	r3, [r4, #16]
 8005e80:	2300      	movs	r3, #0
 8005e82:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e86:	e7aa      	b.n	8005dde <_printf_i+0x14e>
 8005e88:	462a      	mov	r2, r5
 8005e8a:	4649      	mov	r1, r9
 8005e8c:	4640      	mov	r0, r8
 8005e8e:	6923      	ldr	r3, [r4, #16]
 8005e90:	47d0      	blx	sl
 8005e92:	3001      	adds	r0, #1
 8005e94:	d0ad      	beq.n	8005df2 <_printf_i+0x162>
 8005e96:	6823      	ldr	r3, [r4, #0]
 8005e98:	079b      	lsls	r3, r3, #30
 8005e9a:	d413      	bmi.n	8005ec4 <_printf_i+0x234>
 8005e9c:	68e0      	ldr	r0, [r4, #12]
 8005e9e:	9b03      	ldr	r3, [sp, #12]
 8005ea0:	4298      	cmp	r0, r3
 8005ea2:	bfb8      	it	lt
 8005ea4:	4618      	movlt	r0, r3
 8005ea6:	e7a6      	b.n	8005df6 <_printf_i+0x166>
 8005ea8:	2301      	movs	r3, #1
 8005eaa:	4632      	mov	r2, r6
 8005eac:	4649      	mov	r1, r9
 8005eae:	4640      	mov	r0, r8
 8005eb0:	47d0      	blx	sl
 8005eb2:	3001      	adds	r0, #1
 8005eb4:	d09d      	beq.n	8005df2 <_printf_i+0x162>
 8005eb6:	3501      	adds	r5, #1
 8005eb8:	68e3      	ldr	r3, [r4, #12]
 8005eba:	9903      	ldr	r1, [sp, #12]
 8005ebc:	1a5b      	subs	r3, r3, r1
 8005ebe:	42ab      	cmp	r3, r5
 8005ec0:	dcf2      	bgt.n	8005ea8 <_printf_i+0x218>
 8005ec2:	e7eb      	b.n	8005e9c <_printf_i+0x20c>
 8005ec4:	2500      	movs	r5, #0
 8005ec6:	f104 0619 	add.w	r6, r4, #25
 8005eca:	e7f5      	b.n	8005eb8 <_printf_i+0x228>
 8005ecc:	0800645d 	.word	0x0800645d
 8005ed0:	0800646e 	.word	0x0800646e

08005ed4 <__sflush_r>:
 8005ed4:	898a      	ldrh	r2, [r1, #12]
 8005ed6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ed8:	4605      	mov	r5, r0
 8005eda:	0710      	lsls	r0, r2, #28
 8005edc:	460c      	mov	r4, r1
 8005ede:	d457      	bmi.n	8005f90 <__sflush_r+0xbc>
 8005ee0:	684b      	ldr	r3, [r1, #4]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	dc04      	bgt.n	8005ef0 <__sflush_r+0x1c>
 8005ee6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	dc01      	bgt.n	8005ef0 <__sflush_r+0x1c>
 8005eec:	2000      	movs	r0, #0
 8005eee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ef0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005ef2:	2e00      	cmp	r6, #0
 8005ef4:	d0fa      	beq.n	8005eec <__sflush_r+0x18>
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005efc:	682f      	ldr	r7, [r5, #0]
 8005efe:	6a21      	ldr	r1, [r4, #32]
 8005f00:	602b      	str	r3, [r5, #0]
 8005f02:	d032      	beq.n	8005f6a <__sflush_r+0x96>
 8005f04:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005f06:	89a3      	ldrh	r3, [r4, #12]
 8005f08:	075a      	lsls	r2, r3, #29
 8005f0a:	d505      	bpl.n	8005f18 <__sflush_r+0x44>
 8005f0c:	6863      	ldr	r3, [r4, #4]
 8005f0e:	1ac0      	subs	r0, r0, r3
 8005f10:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005f12:	b10b      	cbz	r3, 8005f18 <__sflush_r+0x44>
 8005f14:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005f16:	1ac0      	subs	r0, r0, r3
 8005f18:	2300      	movs	r3, #0
 8005f1a:	4602      	mov	r2, r0
 8005f1c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005f1e:	4628      	mov	r0, r5
 8005f20:	6a21      	ldr	r1, [r4, #32]
 8005f22:	47b0      	blx	r6
 8005f24:	1c43      	adds	r3, r0, #1
 8005f26:	89a3      	ldrh	r3, [r4, #12]
 8005f28:	d106      	bne.n	8005f38 <__sflush_r+0x64>
 8005f2a:	6829      	ldr	r1, [r5, #0]
 8005f2c:	291d      	cmp	r1, #29
 8005f2e:	d82b      	bhi.n	8005f88 <__sflush_r+0xb4>
 8005f30:	4a28      	ldr	r2, [pc, #160]	; (8005fd4 <__sflush_r+0x100>)
 8005f32:	410a      	asrs	r2, r1
 8005f34:	07d6      	lsls	r6, r2, #31
 8005f36:	d427      	bmi.n	8005f88 <__sflush_r+0xb4>
 8005f38:	2200      	movs	r2, #0
 8005f3a:	6062      	str	r2, [r4, #4]
 8005f3c:	6922      	ldr	r2, [r4, #16]
 8005f3e:	04d9      	lsls	r1, r3, #19
 8005f40:	6022      	str	r2, [r4, #0]
 8005f42:	d504      	bpl.n	8005f4e <__sflush_r+0x7a>
 8005f44:	1c42      	adds	r2, r0, #1
 8005f46:	d101      	bne.n	8005f4c <__sflush_r+0x78>
 8005f48:	682b      	ldr	r3, [r5, #0]
 8005f4a:	b903      	cbnz	r3, 8005f4e <__sflush_r+0x7a>
 8005f4c:	6560      	str	r0, [r4, #84]	; 0x54
 8005f4e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005f50:	602f      	str	r7, [r5, #0]
 8005f52:	2900      	cmp	r1, #0
 8005f54:	d0ca      	beq.n	8005eec <__sflush_r+0x18>
 8005f56:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005f5a:	4299      	cmp	r1, r3
 8005f5c:	d002      	beq.n	8005f64 <__sflush_r+0x90>
 8005f5e:	4628      	mov	r0, r5
 8005f60:	f7ff fc9a 	bl	8005898 <_free_r>
 8005f64:	2000      	movs	r0, #0
 8005f66:	6360      	str	r0, [r4, #52]	; 0x34
 8005f68:	e7c1      	b.n	8005eee <__sflush_r+0x1a>
 8005f6a:	2301      	movs	r3, #1
 8005f6c:	4628      	mov	r0, r5
 8005f6e:	47b0      	blx	r6
 8005f70:	1c41      	adds	r1, r0, #1
 8005f72:	d1c8      	bne.n	8005f06 <__sflush_r+0x32>
 8005f74:	682b      	ldr	r3, [r5, #0]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d0c5      	beq.n	8005f06 <__sflush_r+0x32>
 8005f7a:	2b1d      	cmp	r3, #29
 8005f7c:	d001      	beq.n	8005f82 <__sflush_r+0xae>
 8005f7e:	2b16      	cmp	r3, #22
 8005f80:	d101      	bne.n	8005f86 <__sflush_r+0xb2>
 8005f82:	602f      	str	r7, [r5, #0]
 8005f84:	e7b2      	b.n	8005eec <__sflush_r+0x18>
 8005f86:	89a3      	ldrh	r3, [r4, #12]
 8005f88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005f8c:	81a3      	strh	r3, [r4, #12]
 8005f8e:	e7ae      	b.n	8005eee <__sflush_r+0x1a>
 8005f90:	690f      	ldr	r7, [r1, #16]
 8005f92:	2f00      	cmp	r7, #0
 8005f94:	d0aa      	beq.n	8005eec <__sflush_r+0x18>
 8005f96:	0793      	lsls	r3, r2, #30
 8005f98:	bf18      	it	ne
 8005f9a:	2300      	movne	r3, #0
 8005f9c:	680e      	ldr	r6, [r1, #0]
 8005f9e:	bf08      	it	eq
 8005fa0:	694b      	ldreq	r3, [r1, #20]
 8005fa2:	1bf6      	subs	r6, r6, r7
 8005fa4:	600f      	str	r7, [r1, #0]
 8005fa6:	608b      	str	r3, [r1, #8]
 8005fa8:	2e00      	cmp	r6, #0
 8005faa:	dd9f      	ble.n	8005eec <__sflush_r+0x18>
 8005fac:	4633      	mov	r3, r6
 8005fae:	463a      	mov	r2, r7
 8005fb0:	4628      	mov	r0, r5
 8005fb2:	6a21      	ldr	r1, [r4, #32]
 8005fb4:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8005fb8:	47e0      	blx	ip
 8005fba:	2800      	cmp	r0, #0
 8005fbc:	dc06      	bgt.n	8005fcc <__sflush_r+0xf8>
 8005fbe:	89a3      	ldrh	r3, [r4, #12]
 8005fc0:	f04f 30ff 	mov.w	r0, #4294967295
 8005fc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005fc8:	81a3      	strh	r3, [r4, #12]
 8005fca:	e790      	b.n	8005eee <__sflush_r+0x1a>
 8005fcc:	4407      	add	r7, r0
 8005fce:	1a36      	subs	r6, r6, r0
 8005fd0:	e7ea      	b.n	8005fa8 <__sflush_r+0xd4>
 8005fd2:	bf00      	nop
 8005fd4:	dfbffffe 	.word	0xdfbffffe

08005fd8 <_fflush_r>:
 8005fd8:	b538      	push	{r3, r4, r5, lr}
 8005fda:	690b      	ldr	r3, [r1, #16]
 8005fdc:	4605      	mov	r5, r0
 8005fde:	460c      	mov	r4, r1
 8005fe0:	b913      	cbnz	r3, 8005fe8 <_fflush_r+0x10>
 8005fe2:	2500      	movs	r5, #0
 8005fe4:	4628      	mov	r0, r5
 8005fe6:	bd38      	pop	{r3, r4, r5, pc}
 8005fe8:	b118      	cbz	r0, 8005ff2 <_fflush_r+0x1a>
 8005fea:	6a03      	ldr	r3, [r0, #32]
 8005fec:	b90b      	cbnz	r3, 8005ff2 <_fflush_r+0x1a>
 8005fee:	f7ff f9a9 	bl	8005344 <__sinit>
 8005ff2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d0f3      	beq.n	8005fe2 <_fflush_r+0xa>
 8005ffa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005ffc:	07d0      	lsls	r0, r2, #31
 8005ffe:	d404      	bmi.n	800600a <_fflush_r+0x32>
 8006000:	0599      	lsls	r1, r3, #22
 8006002:	d402      	bmi.n	800600a <_fflush_r+0x32>
 8006004:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006006:	f7ff fc11 	bl	800582c <__retarget_lock_acquire_recursive>
 800600a:	4628      	mov	r0, r5
 800600c:	4621      	mov	r1, r4
 800600e:	f7ff ff61 	bl	8005ed4 <__sflush_r>
 8006012:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006014:	4605      	mov	r5, r0
 8006016:	07da      	lsls	r2, r3, #31
 8006018:	d4e4      	bmi.n	8005fe4 <_fflush_r+0xc>
 800601a:	89a3      	ldrh	r3, [r4, #12]
 800601c:	059b      	lsls	r3, r3, #22
 800601e:	d4e1      	bmi.n	8005fe4 <_fflush_r+0xc>
 8006020:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006022:	f7ff fc04 	bl	800582e <__retarget_lock_release_recursive>
 8006026:	e7dd      	b.n	8005fe4 <_fflush_r+0xc>

08006028 <fiprintf>:
 8006028:	b40e      	push	{r1, r2, r3}
 800602a:	b503      	push	{r0, r1, lr}
 800602c:	4601      	mov	r1, r0
 800602e:	ab03      	add	r3, sp, #12
 8006030:	4805      	ldr	r0, [pc, #20]	; (8006048 <fiprintf+0x20>)
 8006032:	f853 2b04 	ldr.w	r2, [r3], #4
 8006036:	6800      	ldr	r0, [r0, #0]
 8006038:	9301      	str	r3, [sp, #4]
 800603a:	f7ff fc9d 	bl	8005978 <_vfiprintf_r>
 800603e:	b002      	add	sp, #8
 8006040:	f85d eb04 	ldr.w	lr, [sp], #4
 8006044:	b003      	add	sp, #12
 8006046:	4770      	bx	lr
 8006048:	20000064 	.word	0x20000064

0800604c <__swhatbuf_r>:
 800604c:	b570      	push	{r4, r5, r6, lr}
 800604e:	460c      	mov	r4, r1
 8006050:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006054:	4615      	mov	r5, r2
 8006056:	2900      	cmp	r1, #0
 8006058:	461e      	mov	r6, r3
 800605a:	b096      	sub	sp, #88	; 0x58
 800605c:	da0c      	bge.n	8006078 <__swhatbuf_r+0x2c>
 800605e:	89a3      	ldrh	r3, [r4, #12]
 8006060:	2100      	movs	r1, #0
 8006062:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006066:	bf0c      	ite	eq
 8006068:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800606c:	2340      	movne	r3, #64	; 0x40
 800606e:	2000      	movs	r0, #0
 8006070:	6031      	str	r1, [r6, #0]
 8006072:	602b      	str	r3, [r5, #0]
 8006074:	b016      	add	sp, #88	; 0x58
 8006076:	bd70      	pop	{r4, r5, r6, pc}
 8006078:	466a      	mov	r2, sp
 800607a:	f000 f849 	bl	8006110 <_fstat_r>
 800607e:	2800      	cmp	r0, #0
 8006080:	dbed      	blt.n	800605e <__swhatbuf_r+0x12>
 8006082:	9901      	ldr	r1, [sp, #4]
 8006084:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8006088:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800608c:	4259      	negs	r1, r3
 800608e:	4159      	adcs	r1, r3
 8006090:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006094:	e7eb      	b.n	800606e <__swhatbuf_r+0x22>

08006096 <__smakebuf_r>:
 8006096:	898b      	ldrh	r3, [r1, #12]
 8006098:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800609a:	079d      	lsls	r5, r3, #30
 800609c:	4606      	mov	r6, r0
 800609e:	460c      	mov	r4, r1
 80060a0:	d507      	bpl.n	80060b2 <__smakebuf_r+0x1c>
 80060a2:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80060a6:	6023      	str	r3, [r4, #0]
 80060a8:	6123      	str	r3, [r4, #16]
 80060aa:	2301      	movs	r3, #1
 80060ac:	6163      	str	r3, [r4, #20]
 80060ae:	b002      	add	sp, #8
 80060b0:	bd70      	pop	{r4, r5, r6, pc}
 80060b2:	466a      	mov	r2, sp
 80060b4:	ab01      	add	r3, sp, #4
 80060b6:	f7ff ffc9 	bl	800604c <__swhatbuf_r>
 80060ba:	9900      	ldr	r1, [sp, #0]
 80060bc:	4605      	mov	r5, r0
 80060be:	4630      	mov	r0, r6
 80060c0:	f7fe ffb2 	bl	8005028 <_malloc_r>
 80060c4:	b948      	cbnz	r0, 80060da <__smakebuf_r+0x44>
 80060c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80060ca:	059a      	lsls	r2, r3, #22
 80060cc:	d4ef      	bmi.n	80060ae <__smakebuf_r+0x18>
 80060ce:	f023 0303 	bic.w	r3, r3, #3
 80060d2:	f043 0302 	orr.w	r3, r3, #2
 80060d6:	81a3      	strh	r3, [r4, #12]
 80060d8:	e7e3      	b.n	80060a2 <__smakebuf_r+0xc>
 80060da:	89a3      	ldrh	r3, [r4, #12]
 80060dc:	6020      	str	r0, [r4, #0]
 80060de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060e2:	81a3      	strh	r3, [r4, #12]
 80060e4:	9b00      	ldr	r3, [sp, #0]
 80060e6:	6120      	str	r0, [r4, #16]
 80060e8:	6163      	str	r3, [r4, #20]
 80060ea:	9b01      	ldr	r3, [sp, #4]
 80060ec:	b15b      	cbz	r3, 8006106 <__smakebuf_r+0x70>
 80060ee:	4630      	mov	r0, r6
 80060f0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80060f4:	f000 f81e 	bl	8006134 <_isatty_r>
 80060f8:	b128      	cbz	r0, 8006106 <__smakebuf_r+0x70>
 80060fa:	89a3      	ldrh	r3, [r4, #12]
 80060fc:	f023 0303 	bic.w	r3, r3, #3
 8006100:	f043 0301 	orr.w	r3, r3, #1
 8006104:	81a3      	strh	r3, [r4, #12]
 8006106:	89a3      	ldrh	r3, [r4, #12]
 8006108:	431d      	orrs	r5, r3
 800610a:	81a5      	strh	r5, [r4, #12]
 800610c:	e7cf      	b.n	80060ae <__smakebuf_r+0x18>
	...

08006110 <_fstat_r>:
 8006110:	b538      	push	{r3, r4, r5, lr}
 8006112:	2300      	movs	r3, #0
 8006114:	4d06      	ldr	r5, [pc, #24]	; (8006130 <_fstat_r+0x20>)
 8006116:	4604      	mov	r4, r0
 8006118:	4608      	mov	r0, r1
 800611a:	4611      	mov	r1, r2
 800611c:	602b      	str	r3, [r5, #0]
 800611e:	f7fa ffc2 	bl	80010a6 <_fstat>
 8006122:	1c43      	adds	r3, r0, #1
 8006124:	d102      	bne.n	800612c <_fstat_r+0x1c>
 8006126:	682b      	ldr	r3, [r5, #0]
 8006128:	b103      	cbz	r3, 800612c <_fstat_r+0x1c>
 800612a:	6023      	str	r3, [r4, #0]
 800612c:	bd38      	pop	{r3, r4, r5, pc}
 800612e:	bf00      	nop
 8006130:	200005ac 	.word	0x200005ac

08006134 <_isatty_r>:
 8006134:	b538      	push	{r3, r4, r5, lr}
 8006136:	2300      	movs	r3, #0
 8006138:	4d05      	ldr	r5, [pc, #20]	; (8006150 <_isatty_r+0x1c>)
 800613a:	4604      	mov	r4, r0
 800613c:	4608      	mov	r0, r1
 800613e:	602b      	str	r3, [r5, #0]
 8006140:	f7fa ffc0 	bl	80010c4 <_isatty>
 8006144:	1c43      	adds	r3, r0, #1
 8006146:	d102      	bne.n	800614e <_isatty_r+0x1a>
 8006148:	682b      	ldr	r3, [r5, #0]
 800614a:	b103      	cbz	r3, 800614e <_isatty_r+0x1a>
 800614c:	6023      	str	r3, [r4, #0]
 800614e:	bd38      	pop	{r3, r4, r5, pc}
 8006150:	200005ac 	.word	0x200005ac

08006154 <memchr>:
 8006154:	4603      	mov	r3, r0
 8006156:	b510      	push	{r4, lr}
 8006158:	b2c9      	uxtb	r1, r1
 800615a:	4402      	add	r2, r0
 800615c:	4293      	cmp	r3, r2
 800615e:	4618      	mov	r0, r3
 8006160:	d101      	bne.n	8006166 <memchr+0x12>
 8006162:	2000      	movs	r0, #0
 8006164:	e003      	b.n	800616e <memchr+0x1a>
 8006166:	7804      	ldrb	r4, [r0, #0]
 8006168:	3301      	adds	r3, #1
 800616a:	428c      	cmp	r4, r1
 800616c:	d1f6      	bne.n	800615c <memchr+0x8>
 800616e:	bd10      	pop	{r4, pc}

08006170 <abort>:
 8006170:	2006      	movs	r0, #6
 8006172:	b508      	push	{r3, lr}
 8006174:	f000 f82c 	bl	80061d0 <raise>
 8006178:	2001      	movs	r0, #1
 800617a:	f7fa ff62 	bl	8001042 <_exit>

0800617e <_raise_r>:
 800617e:	291f      	cmp	r1, #31
 8006180:	b538      	push	{r3, r4, r5, lr}
 8006182:	4604      	mov	r4, r0
 8006184:	460d      	mov	r5, r1
 8006186:	d904      	bls.n	8006192 <_raise_r+0x14>
 8006188:	2316      	movs	r3, #22
 800618a:	6003      	str	r3, [r0, #0]
 800618c:	f04f 30ff 	mov.w	r0, #4294967295
 8006190:	bd38      	pop	{r3, r4, r5, pc}
 8006192:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8006194:	b112      	cbz	r2, 800619c <_raise_r+0x1e>
 8006196:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800619a:	b94b      	cbnz	r3, 80061b0 <_raise_r+0x32>
 800619c:	4620      	mov	r0, r4
 800619e:	f000 f831 	bl	8006204 <_getpid_r>
 80061a2:	462a      	mov	r2, r5
 80061a4:	4601      	mov	r1, r0
 80061a6:	4620      	mov	r0, r4
 80061a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80061ac:	f000 b818 	b.w	80061e0 <_kill_r>
 80061b0:	2b01      	cmp	r3, #1
 80061b2:	d00a      	beq.n	80061ca <_raise_r+0x4c>
 80061b4:	1c59      	adds	r1, r3, #1
 80061b6:	d103      	bne.n	80061c0 <_raise_r+0x42>
 80061b8:	2316      	movs	r3, #22
 80061ba:	6003      	str	r3, [r0, #0]
 80061bc:	2001      	movs	r0, #1
 80061be:	e7e7      	b.n	8006190 <_raise_r+0x12>
 80061c0:	2400      	movs	r4, #0
 80061c2:	4628      	mov	r0, r5
 80061c4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80061c8:	4798      	blx	r3
 80061ca:	2000      	movs	r0, #0
 80061cc:	e7e0      	b.n	8006190 <_raise_r+0x12>
	...

080061d0 <raise>:
 80061d0:	4b02      	ldr	r3, [pc, #8]	; (80061dc <raise+0xc>)
 80061d2:	4601      	mov	r1, r0
 80061d4:	6818      	ldr	r0, [r3, #0]
 80061d6:	f7ff bfd2 	b.w	800617e <_raise_r>
 80061da:	bf00      	nop
 80061dc:	20000064 	.word	0x20000064

080061e0 <_kill_r>:
 80061e0:	b538      	push	{r3, r4, r5, lr}
 80061e2:	2300      	movs	r3, #0
 80061e4:	4d06      	ldr	r5, [pc, #24]	; (8006200 <_kill_r+0x20>)
 80061e6:	4604      	mov	r4, r0
 80061e8:	4608      	mov	r0, r1
 80061ea:	4611      	mov	r1, r2
 80061ec:	602b      	str	r3, [r5, #0]
 80061ee:	f7fa ff18 	bl	8001022 <_kill>
 80061f2:	1c43      	adds	r3, r0, #1
 80061f4:	d102      	bne.n	80061fc <_kill_r+0x1c>
 80061f6:	682b      	ldr	r3, [r5, #0]
 80061f8:	b103      	cbz	r3, 80061fc <_kill_r+0x1c>
 80061fa:	6023      	str	r3, [r4, #0]
 80061fc:	bd38      	pop	{r3, r4, r5, pc}
 80061fe:	bf00      	nop
 8006200:	200005ac 	.word	0x200005ac

08006204 <_getpid_r>:
 8006204:	f7fa bf06 	b.w	8001014 <_getpid>

08006208 <_init>:
 8006208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800620a:	bf00      	nop
 800620c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800620e:	bc08      	pop	{r3}
 8006210:	469e      	mov	lr, r3
 8006212:	4770      	bx	lr

08006214 <_fini>:
 8006214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006216:	bf00      	nop
 8006218:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800621a:	bc08      	pop	{r3}
 800621c:	469e      	mov	lr, r3
 800621e:	4770      	bx	lr
